
Grid_Coverage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  00001e7e  00001f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800318  00800318  0000202a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000202a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006be  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002934  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f70  00000000  00000000  000053d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  00007348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065d  00000000  00000000  00007858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000100e  00000000  00000000  00007eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00008ec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_5>
      18:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_6>
      1c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      58:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      64:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      68:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      6c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      70:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      74:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      78:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      7c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      80:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      84:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      88:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      8c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      90:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      94:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      98:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      9c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      a0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      a4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      a8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      ac:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      b0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      b4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      b8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      bc:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      c0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      c4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      c8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      cc:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      d0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      d4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      d8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      dc:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      e0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      e4:	d6 06       	cpc	r13, r22
      e6:	d6 06       	cpc	r13, r22
      e8:	d6 06       	cpc	r13, r22
      ea:	d6 06       	cpc	r13, r22
      ec:	d6 06       	cpc	r13, r22
      ee:	d6 06       	cpc	r13, r22
      f0:	d6 06       	cpc	r13, r22
      f2:	9e 06       	cpc	r9, r30
      f4:	a1 06       	cpc	r10, r17
      f6:	a4 06       	cpc	r10, r20
      f8:	d6 06       	cpc	r13, r22
      fa:	a7 06       	cpc	r10, r23
      fc:	aa 06       	cpc	r10, r26
      fe:	ad 06       	cpc	r10, r29
     100:	d6 06       	cpc	r13, r22
     102:	d6 06       	cpc	r13, r22
     104:	d6 06       	cpc	r13, r22
     106:	d6 06       	cpc	r13, r22
     108:	d6 06       	cpc	r13, r22
     10a:	d6 06       	cpc	r13, r22
     10c:	d6 06       	cpc	r13, r22
     10e:	b0 06       	cpc	r11, r16
     110:	b3 06       	cpc	r11, r19
     112:	b6 06       	cpc	r11, r22
     114:	d6 06       	cpc	r13, r22
     116:	b9 06       	cpc	r11, r25
     118:	bc 06       	cpc	r11, r28
     11a:	bf 06       	cpc	r11, r31
     11c:	d6 06       	cpc	r13, r22
     11e:	d6 06       	cpc	r13, r22
     120:	d6 06       	cpc	r13, r22
     122:	d6 06       	cpc	r13, r22
     124:	d6 06       	cpc	r13, r22
     126:	d6 06       	cpc	r13, r22
     128:	d6 06       	cpc	r13, r22
     12a:	c2 06       	cpc	r12, r18
     12c:	c5 06       	cpc	r12, r21
     12e:	c8 06       	cpc	r12, r24
     130:	d6 06       	cpc	r13, r22
     132:	cb 06       	cpc	r12, r27
     134:	ce 06       	cpc	r12, r30
     136:	d1 06       	cpc	r13, r17
     138:	d6 06       	cpc	r13, r22
     13a:	d6 06       	cpc	r13, r22
     13c:	d6 06       	cpc	r13, r22
     13e:	d6 06       	cpc	r13, r22
     140:	d6 06       	cpc	r13, r22
     142:	d6 06       	cpc	r13, r22
     144:	d6 06       	cpc	r13, r22

00000146 <__ctors_end>:
     146:	11 24       	eor	r1, r1
     148:	1f be       	out	0x3f, r1	; 63
     14a:	cf ef       	ldi	r28, 0xFF	; 255
     14c:	d1 e2       	ldi	r29, 0x21	; 33
     14e:	de bf       	out	0x3e, r29	; 62
     150:	cd bf       	out	0x3d, r28	; 61
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0c bf       	out	0x3c, r16	; 60

00000156 <__do_copy_data>:
     156:	13 e0       	ldi	r17, 0x03	; 3
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b2 e0       	ldi	r27, 0x02	; 2
     15c:	ee e7       	ldi	r30, 0x7E	; 126
     15e:	fe e1       	ldi	r31, 0x1E	; 30
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0b bf       	out	0x3b, r16	; 59
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x14>
     166:	07 90       	elpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a8 31       	cpi	r26, 0x18	; 24
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0x10>

00000170 <__do_clear_bss>:
     170:	13 e0       	ldi	r17, 0x03	; 3
     172:	a8 e1       	ldi	r26, 0x18	; 24
     174:	b3 e0       	ldi	r27, 0x03	; 3
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a4 34       	cpi	r26, 0x44	; 68
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 88 08 	call	0x1110	; 0x1110 <main>
     184:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18c:	86 e6       	ldi	r24, 0x66	; 102
     18e:	9e e0       	ldi	r25, 0x0E	; 14
     190:	fc 01       	movw	r30, r24
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     19a:	40 e3       	ldi	r20, 0x30	; 48
     19c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     19e:	42 9a       	sbi	0x08, 2	; 8
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	38 e4       	ldi	r19, 0x48	; 72
     1a4:	f9 01       	movw	r30, r18
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1aa:	42 98       	cbi	0x08, 2	; 8
     1ac:	fc 01       	movw	r30, r24
     1ae:	31 97       	sbiw	r30, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1b6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1b8:	42 9a       	sbi	0x08, 2	; 8
     1ba:	f9 01       	movw	r30, r18
     1bc:	31 97       	sbiw	r30, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1c0:	42 98       	cbi	0x08, 2	; 8
     1c2:	fc 01       	movw	r30, r24
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ca:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1cc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	f9 01       	movw	r30, r18
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1d6:	42 98       	cbi	0x08, 2	; 8
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1dc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1de:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1e0:	80 e2       	ldi	r24, 0x20	; 32
     1e2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1e4:	42 9a       	sbi	0x08, 2	; 8
     1e6:	c9 01       	movw	r24, r18
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8

	
}
     1ee:	08 95       	ret

000001f0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	9f 70       	andi	r25, 0x0F	; 15
     1f4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1f6:	28 b1       	in	r18, 0x08	; 8
     1f8:	98 2f       	mov	r25, r24
     1fa:	90 7f       	andi	r25, 0xF0	; 240
     1fc:	92 2b       	or	r25, r18
     1fe:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     200:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     202:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	38 e4       	ldi	r19, 0x48	; 72
     20a:	f9 01       	movw	r30, r18
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     210:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     212:	98 b1       	in	r25, 0x08	; 8
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     218:	98 b1       	in	r25, 0x08	; 8
     21a:	82 95       	swap	r24
     21c:	80 7f       	andi	r24, 0xF0	; 240
     21e:	98 2b       	or	r25, r24
     220:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     222:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     224:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     226:	42 9a       	sbi	0x08, 2	; 8
     228:	c9 01       	movw	r24, r18
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     22e:	42 98       	cbi	0x08, 2	; 8
}
     230:	08 95       	ret

00000232 <lcd_init>:
     232:	86 e6       	ldi	r24, 0x66	; 102
     234:	9e e0       	ldi	r25, 0x0E	; 14
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     23a:	88 e2       	ldi	r24, 0x28	; 40
     23c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x01);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x06);
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     24c:	8e e0       	ldi	r24, 0x0E	; 14
     24e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x80);
     252:	80 e8       	ldi	r24, 0x80	; 128
     254:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
		
}
     258:	08 95       	ret

0000025a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     25a:	98 b1       	in	r25, 0x08	; 8
     25c:	9f 70       	andi	r25, 0x0F	; 15
     25e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     260:	28 b1       	in	r18, 0x08	; 8
     262:	98 2f       	mov	r25, r24
     264:	90 7f       	andi	r25, 0xF0	; 240
     266:	92 2b       	or	r25, r18
     268:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     26a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     26c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26e:	42 9a       	sbi	0x08, 2	; 8
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	38 e4       	ldi	r19, 0x48	; 72
     274:	f9 01       	movw	r30, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     27a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     27c:	98 b1       	in	r25, 0x08	; 8
     27e:	9f 70       	andi	r25, 0x0F	; 15
     280:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     282:	98 b1       	in	r25, 0x08	; 8
     284:	82 95       	swap	r24
     286:	80 7f       	andi	r24, 0xF0	; 240
     288:	98 2b       	or	r25, r24
     28a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     290:	42 9a       	sbi	0x08, 2	; 8
     292:	c9 01       	movw	r24, r18
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     298:	42 98       	cbi	0x08, 2	; 8
}
     29a:	08 95       	ret

0000029c <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     29c:	80 e8       	ldi	r24, 0x80	; 128
     29e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
}
     2a2:	08 95       	ret

000002a4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	ec 01       	movw	r28, r24
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2ac:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
		str++;
     2b0:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     2b2:	88 81       	ld	r24, Y
     2b4:	88 23       	and	r24, r24
     2b6:	d1 f7       	brne	.-12     	; 0x2ac <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2be:	82 30       	cpi	r24, 0x02	; 2
     2c0:	69 f0       	breq	.+26     	; 0x2dc <lcd_cursor+0x1e>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	18 f4       	brcc	.+6      	; 0x2cc <lcd_cursor+0xe>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	a9 f4       	brne	.+42     	; 0x2f4 <lcd_cursor+0x36>
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <lcd_cursor+0x18>
     2cc:	83 30       	cpi	r24, 0x03	; 3
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <lcd_cursor+0x24>
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	81 f4       	brne	.+32     	; 0x2f4 <lcd_cursor+0x36>
     2d4:	0b c0       	rjmp	.+22     	; 0x2ec <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2d6:	86 2f       	mov	r24, r22
     2d8:	81 58       	subi	r24, 0x81	; 129
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2dc:	86 2f       	mov	r24, r22
     2de:	81 54       	subi	r24, 0x41	; 65
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2e2:	86 2f       	mov	r24, r22
     2e4:	8d 56       	subi	r24, 0x6D	; 109
     2e6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     2ea:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2ec:	86 2f       	mov	r24, r22
     2ee:	8d 52       	subi	r24, 0x2D	; 45
     2f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     2f4:	08 95       	ret

000002f6 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	8a 01       	movw	r16, r20
     300:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     302:	88 23       	and	r24, r24
     304:	11 f0       	breq	.+4      	; 0x30a <lcd_print+0x14>
     306:	66 23       	and	r22, r22
     308:	19 f4       	brne	.+6      	; 0x310 <lcd_print+0x1a>
	{
		lcd_home();
     30a:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_home>
     30e:	02 c0       	rjmp	.+4      	; 0x314 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     310:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_cursor>
	}
	if(digits==5 || flag==1)
     314:	c5 30       	cpi	r28, 0x05	; 5
     316:	d1 05       	cpc	r29, r1
     318:	71 f4       	brne	.+28     	; 0x336 <lcd_print+0x40>
	{
		million=value/10000+48;
     31a:	c8 01       	movw	r24, r16
     31c:	60 e1       	ldi	r22, 0x10	; 16
     31e:	77 e2       	ldi	r23, 0x27	; 39
     320:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     324:	cb 01       	movw	r24, r22
     326:	c0 96       	adiw	r24, 0x30	; 48
     328:	90 93 33 03 	sts	0x0333, r25
     32c:	80 93 32 03 	sts	0x0332, r24
		lcd_wr_char(million);
     330:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
     334:	05 c0       	rjmp	.+10     	; 0x340 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     336:	c4 30       	cpi	r28, 0x04	; 4
     338:	d1 05       	cpc	r29, r1
     33a:	11 f0       	breq	.+4      	; 0x340 <lcd_print+0x4a>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	16 c0       	rjmp	.+44     	; 0x36c <lcd_print+0x76>
	{
		temp = value/1000;
     340:	c8 01       	movw	r24, r16
     342:	68 ee       	ldi	r22, 0xE8	; 232
     344:	73 e0       	ldi	r23, 0x03	; 3
     346:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     34a:	cb 01       	movw	r24, r22
     34c:	60 93 34 03 	sts	0x0334, r22
     350:	90 93 35 03 	sts	0x0335, r25
		thousand = temp%10 + 48;
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     35c:	c0 96       	adiw	r24, 0x30	; 48
     35e:	90 93 43 03 	sts	0x0343, r25
     362:	80 93 42 03 	sts	0x0342, r24
		lcd_wr_char(thousand);
     366:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
     36a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     36c:	c3 30       	cpi	r28, 0x03	; 3
     36e:	d1 05       	cpc	r29, r1
     370:	21 f0       	breq	.+8      	; 0x37a <lcd_print+0x84>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	11 f0       	breq	.+4      	; 0x37a <lcd_print+0x84>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	16 c0       	rjmp	.+44     	; 0x3a6 <lcd_print+0xb0>
	{
		temp = value/100;
     37a:	c8 01       	movw	r24, r16
     37c:	64 e6       	ldi	r22, 0x64	; 100
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	60 93 34 03 	sts	0x0334, r22
     38a:	90 93 35 03 	sts	0x0335, r25
		hundred = temp%10 + 48;
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     396:	c0 96       	adiw	r24, 0x30	; 48
     398:	90 93 3c 03 	sts	0x033C, r25
     39c:	80 93 3b 03 	sts	0x033B, r24
		lcd_wr_char(hundred);
     3a0:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3a6:	c2 30       	cpi	r28, 0x02	; 2
     3a8:	d1 05       	cpc	r29, r1
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <lcd_print+0xbe>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <lcd_print+0xbe>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	16 c0       	rjmp	.+44     	; 0x3e0 <lcd_print+0xea>
	{
		temp = value/10;
     3b4:	c8 01       	movw	r24, r16
     3b6:	6a e0       	ldi	r22, 0x0A	; 10
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     3be:	cb 01       	movw	r24, r22
     3c0:	60 93 34 03 	sts	0x0334, r22
     3c4:	90 93 35 03 	sts	0x0335, r25
		tens = temp%10 + 48;
     3c8:	6a e0       	ldi	r22, 0x0A	; 10
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     3d0:	c0 96       	adiw	r24, 0x30	; 48
     3d2:	90 93 3a 03 	sts	0x033A, r25
     3d6:	80 93 39 03 	sts	0x0339, r24
		lcd_wr_char(tens);
     3da:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
     3de:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     3e0:	c1 30       	cpi	r28, 0x01	; 1
     3e2:	d1 05       	cpc	r29, r1
     3e4:	11 f0       	breq	.+4      	; 0x3ea <lcd_print+0xf4>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	61 f4       	brne	.+24     	; 0x402 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     3ea:	c8 01       	movw	r24, r16
     3ec:	6a e0       	ldi	r22, 0x0A	; 10
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__udivmodhi4>
     3f4:	c0 96       	adiw	r24, 0x30	; 48
     3f6:	90 93 41 03 	sts	0x0341, r25
     3fa:	80 93 40 03 	sts	0x0340, r24
		lcd_wr_char(unit);
     3fe:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
	}
	if(digits>5)
     402:	26 97       	sbiw	r28, 0x06	; 6
     404:	1c f0       	brlt	.+6      	; 0x40c <lcd_print+0x116>
	{
		lcd_wr_char('E');
     406:	85 e4       	ldi	r24, 0x45	; 69
     408:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_wr_char>
	}
	
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret

00000416 <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     416:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     418:	2d 9a       	sbi	0x05, 5	; 5
}
     41a:	08 95       	ret

0000041c <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     41c:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     41e:	2e 9a       	sbi	0x05, 6	; 5
}
     420:	08 95       	ret

00000422 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     422:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     424:	2f 9a       	sbi	0x05, 7	; 5
}
     426:	08 95       	ret

00000428 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     428:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	a0 e0       	ldi	r26, 0x00	; 0
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 84 0c 	call	0x1908	; 0x1908 <__floatunsisf>
     43a:	2b e7       	ldi	r18, 0x7B	; 123
     43c:	34 e1       	ldi	r19, 0x14	; 20
     43e:	4e ee       	ldi	r20, 0xEE	; 238
     440:	5f e3       	ldi	r21, 0x3F	; 63
     442:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__divsf3>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	4c e0       	ldi	r20, 0x0C	; 12
     44c:	52 e4       	ldi	r21, 0x42	; 66
     44e:	0e 94 27 0b 	call	0x164e	; 0x164e <__addsf3>
     452:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__fixunssfsi>
     456:	60 93 88 00 	sts	0x0088, r22
}
     45a:	08 95       	ret

0000045c <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     45c:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a0 e0       	ldi	r26, 0x00	; 0
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	bc 01       	movw	r22, r24
     468:	cd 01       	movw	r24, r26
     46a:	0e 94 84 0c 	call	0x1908	; 0x1908 <__floatunsisf>
     46e:	2b e7       	ldi	r18, 0x7B	; 123
     470:	34 e1       	ldi	r19, 0x14	; 20
     472:	4e ee       	ldi	r20, 0xEE	; 238
     474:	5f e3       	ldi	r21, 0x3F	; 63
     476:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__divsf3>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	4c e0       	ldi	r20, 0x0C	; 12
     480:	52 e4       	ldi	r21, 0x42	; 66
     482:	0e 94 27 0b 	call	0x164e	; 0x164e <__addsf3>
     486:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__fixunssfsi>
     48a:	60 93 8a 00 	sts	0x008A, r22
}
     48e:	08 95       	ret

00000490 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     490:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionServo;
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	bc 01       	movw	r22, r24
     49c:	cd 01       	movw	r24, r26
     49e:	0e 94 84 0c 	call	0x1908	; 0x1908 <__floatunsisf>
     4a2:	2b e7       	ldi	r18, 0x7B	; 123
     4a4:	34 e1       	ldi	r19, 0x14	; 20
     4a6:	4e ee       	ldi	r20, 0xEE	; 238
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__divsf3>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	4c e0       	ldi	r20, 0x0C	; 12
     4b4:	52 e4       	ldi	r21, 0x42	; 66
     4b6:	0e 94 27 0b 	call	0x164e	; 0x164e <__addsf3>
     4ba:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__fixunssfsi>
     4be:	60 93 8c 00 	sts	0x008C, r22
}
     4c2:	08 95       	ret

000004c4 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	80 93 88 00 	sts	0x0088, r24
}
     4d0:	08 95       	ret

000004d2 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	80 93 8a 00 	sts	0x008A, r24
}
     4de:	08 95       	ret

000004e0 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	80 93 8c 00 	sts	0x008C, r24
} 
     4ec:	08 95       	ret

000004ee <c2_pin_init>:
//  C1 , C2 motor code
/////////////////////////////////////////////////

void c2_pin_init(void)
{
	DDRA = 0xCF;
     4ee:	8f ec       	ldi	r24, 0xCF	; 207
     4f0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
     4f2:	12 b8       	out	0x02, r1	; 2

	DDRE = DDRE | 0x04;   //Setting PL3 and PL4 pins as output for PWM generation
     4f4:	6a 9a       	sbi	0x0d, 2	; 13
 	PORTE = PORTE | 0x04; //PL3 and PL4 pins are for velocity control using PWM.
     4f6:	72 9a       	sbi	0x0e, 2	; 14
}
     4f8:	08 95       	ret

000004fa <c2motor_control>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4fa:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     4fc:	9f 73       	andi	r25, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     4fe:	80 7c       	andi	r24, 0xC0	; 192
     500:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     502:	82 b9       	out	0x02, r24	; 2
}
     504:	08 95       	ret

00000506 <c2forward>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     506:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     508:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     50a:	80 64       	ori	r24, 0x40	; 64
 PORTA = PortARestore; 		// executing the command
     50c:	82 b9       	out	0x02, r24	; 2

void c2forward(void)
{
	c2motor_control(0x40);
	
}
     50e:	08 95       	ret

00000510 <c2backward>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     510:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     512:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     514:	80 68       	ori	r24, 0x80	; 128
 PORTA = PortARestore; 		// executing the command
     516:	82 b9       	out	0x02, r24	; 2
}

void c2backward()
{
	c2motor_control(0x80);
}
     518:	08 95       	ret

0000051a <c2stop>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     51a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     51c:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     51e:	82 b9       	out	0x02, r24	; 2

void c2stop()
{
	c2motor_control(0x00);
	
}
     520:	08 95       	ret

00000522 <c2_encoder_pin_config>:


void c2_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xBF;  //Set the direction of the PORTE 4 pin as input
     522:	6e 98       	cbi	0x0d, 6	; 13
 PORTE = PORTE | 0x40; //Enable internal pull-up for PORTE 4 pin
     524:	76 9a       	sbi	0x0e, 6	; 14
}
     526:	08 95       	ret

00000528 <c2_position_encoder_interrupt_init>:


void c2_position_encoder_interrupt_init (void) //Interrupt 6 enable
{
 cli(); //Clears the global interrupt
     528:	f8 94       	cli
 EICRB = EICRB | 0x20; // INT6 is set to trigger with falling edge
     52a:	ea e6       	ldi	r30, 0x6A	; 106
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	80 62       	ori	r24, 0x20	; 32
     532:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x40; // Enable Interrupt INT6 for right position encoder
     534:	ee 9a       	sbi	0x1d, 6	; 29
 sei();   // Enables the global interrupt 
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <__vector_7>:


ISR(INT6_vect)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	8f 93       	push	r24
     546:	9f 93       	push	r25
     548:	af 93       	push	r26
     54a:	bf 93       	push	r27
 ShaftCountC2++;  //increment C2 shaft position count
     54c:	80 91 2a 03 	lds	r24, 0x032A
     550:	90 91 2b 03 	lds	r25, 0x032B
     554:	a0 91 2c 03 	lds	r26, 0x032C
     558:	b0 91 2d 03 	lds	r27, 0x032D
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	a1 1d       	adc	r26, r1
     560:	b1 1d       	adc	r27, r1
     562:	80 93 2a 03 	sts	0x032A, r24
     566:	90 93 2b 03 	sts	0x032B, r25
     56a:	a0 93 2c 03 	sts	0x032C, r26
     56e:	b0 93 2d 03 	sts	0x032D, r27
}
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <c2_linear_distance_mm>:
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
  
 ShaftCountC2 = 0;
     584:	10 92 2a 03 	sts	0x032A, r1
     588:	10 92 2b 03 	sts	0x032B, r1
     58c:	10 92 2c 03 	sts	0x032C, r1
     590:	10 92 2d 03 	sts	0x032D, r1
     594:	ff cf       	rjmp	.-2      	; 0x594 <c2_linear_distance_mm+0x10>

00000596 <c2forward_mm>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     596:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     598:	2f 73       	andi	r18, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     59a:	20 64       	ori	r18, 0x40	; 64
 PORTA = PortARestore; 		// executing the command
     59c:	22 b9       	out	0x02, r18	; 2


void c2forward_mm(unsigned int DistanceInMM)
{
 c2forward();
 c2_linear_distance_mm(DistanceInMM);
     59e:	0e 94 c2 02 	call	0x584	; 0x584 <c2_linear_distance_mm>
}
     5a2:	08 95       	ret

000005a4 <c2backward_mm>:
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5a4:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     5a6:	2f 73       	andi	r18, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     5a8:	20 68       	ori	r18, 0x80	; 128
 PORTA = PortARestore; 		// executing the command
     5aa:	22 b9       	out	0x02, r18	; 2
}

void c2backward_mm(unsigned int DistanceInMM)
{
 c2backward();
 c2_linear_distance_mm(DistanceInMM);
     5ac:	0e 94 c2 02 	call	0x584	; 0x584 <c2_linear_distance_mm>
}
     5b0:	08 95       	ret

000005b2 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     5b2:	87 b1       	in	r24, 0x07	; 7
     5b4:	87 6f       	ori	r24, 0xF7	; 247
     5b6:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     5b8:	88 b1       	in	r24, 0x08	; 8
     5ba:	80 78       	andi	r24, 0x80	; 128
     5bc:	88 b9       	out	0x08, r24	; 8
}
     5be:	08 95       	ret

000005c0 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     5c0:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     5c2:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     5c4:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     5c8:	10 92 08 01 	sts	0x0108, r1
}
     5cc:	08 95       	ret

000005ce <buzzer_pin_config>:

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     5ce:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     5d0:	43 98       	cbi	0x08, 3	; 8
}
     5d2:	08 95       	ret

000005d4 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     5d4:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     5d6:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     5d8:	88 b9       	out	0x08, r24	; 8
}
     5da:	08 95       	ret

000005dc <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     5dc:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     5de:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     5e0:	88 b9       	out	0x08, r24	; 8
}
     5e2:	08 95       	ret

000005e4 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{

 DDRA = DDRA | 0x0F;
     5e4:	81 b1       	in	r24, 0x01	; 1
     5e6:	8f 60       	ori	r24, 0x0F	; 15
     5e8:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     5ea:	82 b1       	in	r24, 0x02	; 2
     5ec:	80 7f       	andi	r24, 0xF0	; 240
     5ee:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     5f0:	ea e0       	ldi	r30, 0x0A	; 10
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	80 81       	ld	r24, Z
     5f6:	88 61       	ori	r24, 0x18	; 24
     5f8:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     5fa:	eb e0       	ldi	r30, 0x0B	; 11
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	80 81       	ld	r24, Z
     600:	88 61       	ori	r24, 0x18	; 24
     602:	80 83       	st	Z, r24

 // I guess for DC Motors
 //DDRE = 0x08;
 //PORTE = 0x08;
}
     604:	08 95       	ret

00000606 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     606:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     608:	74 9a       	sbi	0x0e, 4	; 14
}
     60a:	08 95       	ret

0000060c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     60c:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     60e:	75 9a       	sbi	0x0e, 5	; 14
}
     610:	08 95       	ret

00000612 <port_init>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     612:	87 b1       	in	r24, 0x07	; 7
     614:	87 6f       	ori	r24, 0xF7	; 247
     616:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     618:	88 b1       	in	r24, 0x08	; 8
     61a:	80 78       	andi	r24, 0x80	; 128
     61c:	88 b9       	out	0x08, r24	; 8
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     61e:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     620:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     622:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     626:	10 92 08 01 	sts	0x0108, r1
//  C1 , C2 motor code
/////////////////////////////////////////////////

void c2_pin_init(void)
{
	DDRA = 0xCF;
     62a:	8f ec       	ldi	r24, 0xCF	; 207
     62c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
     62e:	12 b8       	out	0x02, r1	; 2

	DDRE = DDRE | 0x04;   //Setting PL3 and PL4 pins as output for PWM generation
     630:	6a 9a       	sbi	0x0d, 2	; 13
 	PORTE = PORTE | 0x04; //PL3 and PL4 pins are for velocity control using PWM.
     632:	72 9a       	sbi	0x0e, 2	; 14

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{

 DDRA = DDRA | 0x0F;
     634:	81 b1       	in	r24, 0x01	; 1
     636:	8f 60       	ori	r24, 0x0F	; 15
     638:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     63a:	82 b1       	in	r24, 0x02	; 2
     63c:	80 7f       	andi	r24, 0xF0	; 240
     63e:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     640:	ea e0       	ldi	r30, 0x0A	; 10
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	80 81       	ld	r24, Z
     646:	88 61       	ori	r24, 0x18	; 24
     648:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     64a:	eb e0       	ldi	r30, 0x0B	; 11
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	80 81       	ld	r24, Z
     650:	88 61       	ori	r24, 0x18	; 24
     652:	80 83       	st	Z, r24
 PORTK = 0x00;
}

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     654:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     656:	43 98       	cbi	0x08, 3	; 8


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     658:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     65a:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     65c:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     65e:	75 9a       	sbi	0x0e, 5	; 14


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     660:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     662:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     664:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     666:	2e 9a       	sbi	0x05, 6	; 5
}

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     668:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     66a:	2f 9a       	sbi	0x05, 7	; 5


 	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}
     66c:	08 95       	ret

0000066e <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     66e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     670:	ea e6       	ldi	r30, 0x6A	; 106
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	82 60       	ori	r24, 0x02	; 2
     678:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     67a:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     67c:	78 94       	sei
}
     67e:	08 95       	ret

00000680 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     680:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     682:	ea e6       	ldi	r30, 0x6A	; 106
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	88 60       	ori	r24, 0x08	; 8
     68a:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     68c:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     68e:	78 94       	sei
}
     690:	08 95       	ret

00000692 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     6a4:	80 91 22 03 	lds	r24, 0x0322
     6a8:	90 91 23 03 	lds	r25, 0x0323
     6ac:	a0 91 24 03 	lds	r26, 0x0324
     6b0:	b0 91 25 03 	lds	r27, 0x0325
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	a1 1d       	adc	r26, r1
     6b8:	b1 1d       	adc	r27, r1
     6ba:	80 93 22 03 	sts	0x0322, r24
     6be:	90 93 23 03 	sts	0x0323, r25
     6c2:	a0 93 24 03 	sts	0x0324, r26
     6c6:	b0 93 25 03 	sts	0x0325, r27
}
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_5>:


//SR for left position encoder
ISR(INT4_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     6ee:	80 91 1e 03 	lds	r24, 0x031E
     6f2:	90 91 1f 03 	lds	r25, 0x031F
     6f6:	a0 91 20 03 	lds	r26, 0x0320
     6fa:	b0 91 21 03 	lds	r27, 0x0321
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	a1 1d       	adc	r26, r1
     702:	b1 1d       	adc	r27, r1
     704:	80 93 1e 03 	sts	0x031E, r24
     708:	90 93 1f 03 	sts	0x031F, r25
     70c:	a0 93 20 03 	sts	0x0320, r26
     710:	b0 93 21 03 	sts	0x0321, r27
}
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     726:	e1 e2       	ldi	r30, 0x21	; 33
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     72c:	9f ef       	ldi	r25, 0xFF	; 255
     72e:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	20 93 24 01 	sts	0x0124, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     738:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     73c:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     740:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     744:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     748:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     74c:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     750:	89 ea       	ldi	r24, 0xA9	; 169
     752:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     756:	8b e0       	ldi	r24, 0x0B	; 11
     758:	80 83       	st	Z, r24

 TCCR1B = 0x00; //stop
     75a:	e1 e8       	ldi	r30, 0x81	; 129
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     760:	8c ef       	ldi	r24, 0xFC	; 252
     762:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     766:	20 93 84 00 	sts	0x0084, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     770:	90 93 88 00 	sts	0x0088, r25
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     774:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     778:	90 93 8a 00 	sts	0x008A, r25
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     77c:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     780:	90 93 8c 00 	sts	0x008C, r25
 ICR1H  = 0x03;	
     784:	80 93 87 00 	sts	0x0087, r24
 ICR1L  = 0xFF;
     788:	90 93 86 00 	sts	0x0086, r25
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     78c:	8b ea       	ldi	r24, 0xAB	; 171
     78e:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     792:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	80 83       	st	Z, r24
}
     79a:	08 95       	ret

0000079c <adc_init>:


void adc_init()
{
	ADCSRA = 0x00;
     79c:	ea e7       	ldi	r30, 0x7A	; 122
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     7a2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     7a6:	80 e2       	ldi	r24, 0x20	; 32
     7a8:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     7ac:	80 e8       	ldi	r24, 0x80	; 128
     7ae:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     7b0:	86 e8       	ldi	r24, 0x86	; 134
     7b2:	80 83       	st	Z, r24
}
     7b4:	08 95       	ret

000007b6 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     7b6:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     7b8:	88 30       	cpi	r24, 0x08	; 8
     7ba:	18 f0       	brcs	.+6      	; 0x7c2 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     7c2:	97 70       	andi	r25, 0x07	; 7
     7c4:	90 62       	ori	r25, 0x20	; 32
     7c6:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     7ca:	80 91 7a 00 	lds	r24, 0x007A
     7ce:	80 64       	ori	r24, 0x40	; 64
     7d0:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     7d4:	80 91 7a 00 	lds	r24, 0x007A
     7d8:	84 ff       	sbrs	r24, 4
     7da:	fc cf       	rjmp	.-8      	; 0x7d4 <ADC_Conversion+0x1e>
	a=ADCH;
     7dc:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     7e0:	90 91 7a 00 	lds	r25, 0x007A
     7e4:	90 61       	ori	r25, 0x10	; 16
     7e6:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     7ea:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     7ee:	08 95       	ret

000007f0 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	18 2f       	mov	r17, r24
     7f6:	06 2f       	mov	r16, r22
     7f8:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     7fa:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ADC_Conversion>
     7fe:	48 2f       	mov	r20, r24
     800:	80 93 36 03 	sts	0x0336, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     804:	81 2f       	mov	r24, r17
     806:	60 2f       	mov	r22, r16
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	23 e0       	ldi	r18, 0x03	; 3
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
}
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     818:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     81c:	60 93 2a 01 	sts	0x012A, r22
}
     820:	08 95       	ret

00000822 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     822:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     824:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     82a:	82 b9       	out	0x02, r24	; 2
}
     82c:	08 95       	ret

0000082e <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     82e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     830:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     832:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     834:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     836:	08 95       	ret

00000838 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     838:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     83a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     83c:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     83e:	08 95       	ret

00000840 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     840:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     842:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     844:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     846:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     848:	08 95       	ret

0000084a <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     84a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     84c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     84e:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     850:	82 b9       	out	0x02, r24	; 2
  motion_set(0x09);
}
void right(void)
{
  motion_set(0x0A);
}
     852:	08 95       	ret

00000854 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     854:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     856:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     858:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     85a:	82 b9       	out	0x02, r24	; 2
  motion_set(0x0A);
}
void left(void)
{
  motion_set(0x05);
}
     85c:	08 95       	ret

0000085e <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     85e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     860:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     862:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     864:	82 b9       	out	0x02, r24	; 2
  motion_set(0x05);
}
void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     866:	08 95       	ret

00000868 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     868:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     86a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     86c:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     86e:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     870:	08 95       	ret

00000872 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     872:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     874:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     876:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     878:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     87a:	08 95       	ret

0000087c <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     87c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     87e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     880:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     882:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     884:	08 95       	ret

00000886 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	bc 01       	movw	r22, r24
     894:	cd 01       	movw	r24, r26
     896:	0e 94 84 0c 	call	0x1908	; 0x1908 <__floatunsisf>
     89a:	28 e4       	ldi	r18, 0x48	; 72
     89c:	31 ee       	ldi	r19, 0xE1	; 225
     89e:	42 e8       	ldi	r20, 0x82	; 130
     8a0:	50 e4       	ldi	r21, 0x40	; 64
     8a2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__divsf3>
     8a6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__fixunssfsi>
     8aa:	7b 01       	movw	r14, r22
     8ac:	00 e0       	ldi	r16, 0x00	; 0
     8ae:	10 e0       	ldi	r17, 0x00	; 0
 ShaftCountRight = 0; 
     8b0:	10 92 22 03 	sts	0x0322, r1
     8b4:	10 92 23 03 	sts	0x0323, r1
     8b8:	10 92 24 03 	sts	0x0324, r1
     8bc:	10 92 25 03 	sts	0x0325, r1
 ShaftCountLeft = 0; 
     8c0:	10 92 1e 03 	sts	0x031E, r1
     8c4:	10 92 1f 03 	sts	0x031F, r1
     8c8:	10 92 20 03 	sts	0x0320, r1
     8cc:	10 92 21 03 	sts	0x0321, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     8d0:	80 91 22 03 	lds	r24, 0x0322
     8d4:	90 91 23 03 	lds	r25, 0x0323
     8d8:	a0 91 24 03 	lds	r26, 0x0324
     8dc:	b0 91 25 03 	lds	r27, 0x0325
     8e0:	20 91 1e 03 	lds	r18, 0x031E
     8e4:	30 91 1f 03 	lds	r19, 0x031F
     8e8:	40 91 20 03 	lds	r20, 0x0320
     8ec:	50 91 21 03 	lds	r21, 0x0321
     8f0:	8e 15       	cp	r24, r14
     8f2:	9f 05       	cpc	r25, r15
     8f4:	a0 07       	cpc	r26, r16
     8f6:	b1 07       	cpc	r27, r17
     8f8:	28 f4       	brcc	.+10     	; 0x904 <angle_rotate+0x7e>
     8fa:	2e 15       	cp	r18, r14
     8fc:	3f 05       	cpc	r19, r15
     8fe:	40 07       	cpc	r20, r16
     900:	51 07       	cpc	r21, r17
     902:	30 f3       	brcs	.-52     	; 0x8d0 <angle_rotate+0x4a>
  break;
 }
 //stop(); //Stop action
}
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <linear_distance_mm>:
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	bc 01       	movw	r22, r24
     914:	cd 01       	movw	r24, r26
     916:	0e 94 84 0c 	call	0x1908	; 0x1908 <__floatunsisf>
     91a:	25 ee       	ldi	r18, 0xE5	; 229
     91c:	30 ed       	ldi	r19, 0xD0	; 208
     91e:	4a ea       	ldi	r20, 0xAA	; 170
     920:	50 e4       	ldi	r21, 0x40	; 64
     922:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__divsf3>
     926:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__fixunssfsi>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
  
 ShaftCountRight = 0;
     92e:	10 92 22 03 	sts	0x0322, r1
     932:	10 92 23 03 	sts	0x0323, r1
     936:	10 92 24 03 	sts	0x0324, r1
     93a:	10 92 25 03 	sts	0x0325, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
     93e:	80 91 22 03 	lds	r24, 0x0322
     942:	90 91 23 03 	lds	r25, 0x0323
     946:	a0 91 24 03 	lds	r26, 0x0324
     94a:	b0 91 25 03 	lds	r27, 0x0325
     94e:	28 17       	cp	r18, r24
     950:	39 07       	cpc	r19, r25
     952:	4a 07       	cpc	r20, r26
     954:	5b 07       	cpc	r21, r27
     956:	98 f7       	brcc	.-26     	; 0x93e <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     958:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     95a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     95c:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop action
}
     95e:	08 95       	ret

00000960 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     960:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     962:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     964:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     966:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     968:	0e 94 87 04 	call	0x90e	; 0x90e <linear_distance_mm>
}
     96c:	08 95       	ret

0000096e <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     96e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     970:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     972:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     974:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     976:	0e 94 87 04 	call	0x90e	; 0x90e <linear_distance_mm>
}
     97a:	08 95       	ret

0000097c <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     97c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     97e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     980:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     982:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     984:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     988:	08 95       	ret

0000098a <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     98a:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     98c:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     98e:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     990:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     992:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     996:	08 95       	ret

00000998 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     998:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     99a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     99c:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     99e:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     9a8:	08 95       	ret

000009aa <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9aa:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ac:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ae:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     9b0:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     9ba:	08 95       	ret

000009bc <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9bc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9be:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9c0:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     9c2:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     9cc:	08 95       	ret

000009ce <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9ce:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9d0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9d2:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     9d4:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	0e 94 43 04 	call	0x886	; 0x886 <angle_rotate>
}
     9de:	08 95       	ret

000009e0 <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     9e0:	f8 94       	cli
	port_init();
     9e2:	0e 94 09 03 	call	0x612	; 0x612 <port_init>
}


void adc_init()
{
	ADCSRA = 0x00;
     9e6:	ea e7       	ldi	r30, 0x7A	; 122
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     9ec:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     9f0:	80 e2       	ldi	r24, 0x20	; 32
     9f2:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     9fa:	86 e8       	ldi	r24, 0x86	; 134
     9fc:	80 83       	st	Z, r24
void init_devices (void)
{
 	cli(); //Clears the global interrupts
	port_init();
	adc_init();
	timer5_init();
     9fe:	0e 94 93 03 	call	0x726	; 0x726 <timer5_init>
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     a02:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     a04:	ea e6       	ldi	r30, 0x6A	; 106
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	82 60       	ori	r24, 0x02	; 2
     a0c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     a0e:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     a10:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     a12:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     a14:	ea e6       	ldi	r30, 0x6A	; 106
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	88 60       	ori	r24, 0x08	; 8
     a1c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     a1e:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     a20:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     a22:	78 94       	sei
}
     a24:	08 95       	ret

00000a26 <read_sensor>:
void read_sensor()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ADC_Conversion>
     a2c:	80 93 19 03 	sts	0x0319, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ADC_Conversion>
     a36:	80 93 1a 03 	sts	0x031A, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ADC_Conversion>
     a40:	80 93 1b 03 	sts	0x031B, r24
	
/*	print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		*/
	lcd_print(1,1,Left_white_line,3);
     a44:	40 91 19 03 	lds	r20, 0x0319
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	23 e0       	ldi	r18, 0x03	; 3
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	lcd_print(1,5,Center_white_line,3);
     a56:	40 91 1a 03 	lds	r20, 0x031A
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	65 e0       	ldi	r22, 0x05	; 5
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	23 e0       	ldi	r18, 0x03	; 3
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	lcd_print(1,9,Right_white_line,3);
     a68:	40 91 1b 03 	lds	r20, 0x031B
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	69 e0       	ldi	r22, 0x09	; 9
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	23 e0       	ldi	r18, 0x03	; 3
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	
}
     a7a:	08 95       	ret

00000a7c <init_encoders>:

//Function to initialize all the devices
void init_encoders()
{
 cli(); //Clears the global interrupt
     a7c:	f8 94       	cli


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     a7e:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     a80:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     a82:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     a84:	75 9a       	sbi	0x0e, 5	; 14
}


void c2_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xBF;  //Set the direction of the PORTE 4 pin as input
     a86:	6e 98       	cbi	0x0d, 6	; 13
 PORTE = PORTE | 0x40; //Enable internal pull-up for PORTE 4 pin
     a88:	76 9a       	sbi	0x0e, 6	; 14
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     a8a:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     a8c:	ea e6       	ldi	r30, 0x6A	; 106
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	82 60       	ori	r24, 0x02	; 2
     a94:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     a96:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     a98:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     a9a:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     a9c:	ea e6       	ldi	r30, 0x6A	; 106
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	88 60       	ori	r24, 0x08	; 8
     aa4:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     aa6:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     aa8:	78 94       	sei
}


void c2_position_encoder_interrupt_init (void) //Interrupt 6 enable
{
 cli(); //Clears the global interrupt
     aaa:	f8 94       	cli
 EICRB = EICRB | 0x20; // INT6 is set to trigger with falling edge
     aac:	ea e6       	ldi	r30, 0x6A	; 106
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x40; // Enable Interrupt INT6 for right position encoder
     ab6:	ee 9a       	sbi	0x1d, 6	; 29
 sei();   // Enables the global interrupt 
     ab8:	78 94       	sei

 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 c2_position_encoder_interrupt_init();

 sei();   // Enables the global interrupt 
     aba:	78 94       	sei
}
     abc:	08 95       	ret

00000abe <follow>:

void follow()
{
	//flag=0;
	if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20)
     abe:	90 91 1a 03 	lds	r25, 0x031A
     ac2:	91 32       	cpi	r25, 0x21	; 33
     ac4:	90 f0       	brcs	.+36     	; 0xaea <follow+0x2c>
     ac6:	80 91 19 03 	lds	r24, 0x0319
     aca:	80 32       	cpi	r24, 0x20	; 32
     acc:	70 f4       	brcc	.+28     	; 0xaea <follow+0x2c>
     ace:	80 91 1b 03 	lds	r24, 0x031B
     ad2:	80 32       	cpi	r24, 0x20	; 32
     ad4:	50 f4       	brcc	.+20     	; 0xaea <follow+0x2c>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ad6:	82 e8       	ldi	r24, 0x82	; 130
     ad8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     adc:	80 93 2a 01 	sts	0x012A, r24
	if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20)
		{
			//flag=1;
			//forward();
			velocity(130,130);
			lcd_print(2,1,130,3);
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	42 e8       	ldi	r20, 0x82	; 130
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	10 c0       	rjmp	.+32     	; 0xb0a <follow+0x4c>
			lcd_print(2,5,130,3);	
		}

		else if((Left_white_line>0x20 && Center_white_line<0x20) )
     aea:	80 91 19 03 	lds	r24, 0x0319
     aee:	81 32       	cpi	r24, 0x21	; 33
     af0:	c8 f0       	brcs	.+50     	; 0xb24 <follow+0x66>
     af2:	90 32       	cpi	r25, 0x20	; 32
     af4:	b8 f4       	brcc	.+46     	; 0xb24 <follow+0x66>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     af6:	89 e6       	ldi	r24, 0x69	; 105
     af8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     afc:	82 e8       	ldi	r24, 0x82	; 130
     afe:	80 93 2a 01 	sts	0x012A, r24
		else if((Left_white_line>0x20 && Center_white_line<0x20) )
		{
			//flag=1;
		//	forward();
			velocity(105,130);
			lcd_print(2,1,105,3);
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	49 e6       	ldi	r20, 0x69	; 105
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	23 e0       	ldi	r18, 0x03	; 3
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
			lcd_print(2,5,130,3);
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	65 e0       	ldi	r22, 0x05	; 5
     b16:	42 e8       	ldi	r20, 0x82	; 130
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	23 e0       	ldi	r18, 0x03	; 3
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
     b22:	08 95       	ret
		}

		else if((Right_white_line>0x20 && Center_white_line<0x20))
     b24:	80 91 1b 03 	lds	r24, 0x031B
     b28:	81 32       	cpi	r24, 0x21	; 33
     b2a:	c0 f0       	brcs	.+48     	; 0xb5c <follow+0x9e>
     b2c:	90 32       	cpi	r25, 0x20	; 32
     b2e:	b0 f4       	brcc	.+44     	; 0xb5c <follow+0x9e>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     b36:	89 e6       	ldi	r24, 0x69	; 105
     b38:	80 93 2a 01 	sts	0x012A, r24
		else if((Right_white_line>0x20 && Center_white_line<0x20))
		{
			//flag=1;
			//forward();
			velocity(130,105);
			lcd_print(2,1,130,3);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	42 e8       	ldi	r20, 0x82	; 130
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	23 e0       	ldi	r18, 0x03	; 3
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
			lcd_print(2,5,105,3);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	49 e6       	ldi	r20, 0x69	; 105
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
     b5c:	08 95       	ret

00000b5e <isPlus>:
}

int isPlus()
{

	if((Left_white_line >0x20 && Center_white_line>0x20) || (Right_white_line >0x20 && Center_white_line>0x20))
     b5e:	80 91 19 03 	lds	r24, 0x0319
     b62:	81 32       	cpi	r24, 0x21	; 33
     b64:	38 f4       	brcc	.+14     	; 0xb74 <isPlus+0x16>
     b66:	80 91 1b 03 	lds	r24, 0x031B
     b6a:	81 32       	cpi	r24, 0x21	; 33
     b6c:	18 f4       	brcc	.+6      	; 0xb74 <isPlus+0x16>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	0a c0       	rjmp	.+20     	; 0xb88 <isPlus+0x2a>
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	80 91 1a 03 	lds	r24, 0x031A
     b7a:	81 32       	cpi	r24, 0x21	; 33
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <isPlus+0x22>
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	98 27       	eor	r25, r24
     b84:	29 2f       	mov	r18, r25
     b86:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
	return 0;
	}
}
     b88:	c9 01       	movw	r24, r18
     b8a:	08 95       	ret

00000b8c <turnLeft>:
	
	void turnLeft()
	{
	forward_mm(50);
     b8c:	82 e3       	ldi	r24, 0x32	; 50
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 b0 04 	call	0x960	; 0x960 <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b94:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b96:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     b98:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b9a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b9c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b9e:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     ba0:	82 b9       	out	0x02, r24	; 2
     ba2:	80 ed       	ldi	r24, 0xD0	; 208
     ba4:	97 e0       	ldi	r25, 0x07	; 7
     ba6:	20 e7       	ldi	r18, 0x70	; 112
     ba8:	31 e0       	ldi	r19, 0x01	; 1
     baa:	f9 01       	movw	r30, r18
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <turnLeft+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb2:	d9 f7       	brne	.-10     	; 0xbaa <turnLeft+0x1e>
	{
	forward_mm(50);
	stop();
	left();
	_delay_ms(200);
	read_sensor();
     bb4:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <turnLeft+0x3a>
	 while(Left_white_line <0x40)
	 {
	 read_sensor();
     bba:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bbe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bc0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bc2:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     bc4:	82 b9       	out	0x02, r24	; 2
	forward_mm(50);
	stop();
	left();
	_delay_ms(200);
	read_sensor();
	 while(Left_white_line <0x40)
     bc6:	80 91 19 03 	lds	r24, 0x0319
     bca:	80 34       	cpi	r24, 0x40	; 64
     bcc:	b0 f3       	brcs	.-20     	; 0xbba <turnLeft+0x2e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bce:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bd0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     bd2:	82 b9       	out	0x02, r24	; 2
     bd4:	80 ed       	ldi	r24, 0xD0	; 208
     bd6:	97 e0       	ldi	r25, 0x07	; 7
     bd8:	20 e7       	ldi	r18, 0x70	; 112
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	f9 01       	movw	r30, r18
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <turnLeft+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be4:	d9 f7       	brne	.-10     	; 0xbdc <turnLeft+0x50>
	 read_sensor();
	   left();
	}
	stop();
	_delay_ms(200);
	read_sensor();
     be6:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bea:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bec:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bee:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     bf0:	82 b9       	out	0x02, r24	; 2
	stop();
	_delay_ms(200);
	read_sensor();
	forward();

	}
     bf2:	08 95       	ret

00000bf4 <turnRight>:
	void turnRight()
	{
	forward_mm(50);
     bf4:	82 e3       	ldi	r24, 0x32	; 50
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 b0 04 	call	0x960	; 0x960 <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bfc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bfe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c00:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c02:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c04:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c06:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     c08:	82 b9       	out	0x02, r24	; 2
     c0a:	80 ed       	ldi	r24, 0xD0	; 208
     c0c:	97 e0       	ldi	r25, 0x07	; 7
     c0e:	20 e7       	ldi	r18, 0x70	; 112
     c10:	31 e0       	ldi	r19, 0x01	; 1
     c12:	f9 01       	movw	r30, r18
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <turnRight+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	d9 f7       	brne	.-10     	; 0xc12 <turnRight+0x1e>
	{
	forward_mm(50);
	stop();
	right();
	_delay_ms(200);
	read_sensor();
     c1c:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <turnRight+0x3a>
	 while(Right_white_line <0x40 )
	 {
	 read_sensor();
     c22:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c26:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c28:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c2a:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     c2c:	82 b9       	out	0x02, r24	; 2
	forward_mm(50);
	stop();
	right();
	_delay_ms(200);
	read_sensor();
	 while(Right_white_line <0x40 )
     c2e:	80 91 1b 03 	lds	r24, 0x031B
     c32:	80 34       	cpi	r24, 0x40	; 64
     c34:	b0 f3       	brcs	.-20     	; 0xc22 <turnRight+0x2e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c36:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c38:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c3a:	82 b9       	out	0x02, r24	; 2
     c3c:	80 ed       	ldi	r24, 0xD0	; 208
     c3e:	97 e0       	ldi	r25, 0x07	; 7
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	f9 01       	movw	r30, r18
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <turnRight+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	d9 f7       	brne	.-10     	; 0xc44 <turnRight+0x50>
	 read_sensor();
	 right();
	 }
	 stop();
	_delay_ms(200);
	read_sensor();
     c4e:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c52:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c54:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c56:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c58:	82 b9       	out	0x02, r24	; 2
	 }
	 stop();
	_delay_ms(200);
	read_sensor();
	forward();
	}
     c5a:	08 95       	ret

00000c5c <orient>:
void orient(int value)
{
	switch(value)
     c5c:	83 31       	cpi	r24, 0x13	; 19
     c5e:	91 05       	cpc	r25, r1
     c60:	b9 f1       	breq	.+110    	; 0xcd0 <orient+0x74>
     c62:	84 31       	cpi	r24, 0x14	; 20
     c64:	91 05       	cpc	r25, r1
     c66:	24 f4       	brge	.+8      	; 0xc70 <orient+0x14>
     c68:	41 97       	sbiw	r24, 0x11	; 17
     c6a:	09 f0       	breq	.+2      	; 0xc6e <orient+0x12>
     c6c:	59 c0       	rjmp	.+178    	; 0xd20 <orient+0xc4>
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <orient+0x22>
     c70:	84 31       	cpi	r24, 0x14	; 20
     c72:	91 05       	cpc	r25, r1
     c74:	b9 f0       	breq	.+46     	; 0xca4 <orient+0x48>
     c76:	49 97       	sbiw	r24, 0x19	; 25
     c78:	09 f0       	breq	.+2      	; 0xc7c <orient+0x20>
     c7a:	52 c0       	rjmp	.+164    	; 0xd20 <orient+0xc4>
     c7c:	4e c0       	rjmp	.+156    	; 0xd1a <orient+0xbe>
}

int isPlus()
{

	if((Left_white_line >0x20 && Center_white_line>0x20) || (Right_white_line >0x20 && Center_white_line>0x20))
     c7e:	80 91 19 03 	lds	r24, 0x0319
     c82:	81 32       	cpi	r24, 0x21	; 33
     c84:	28 f4       	brcc	.+10     	; 0xc90 <orient+0x34>
     c86:	80 91 1b 03 	lds	r24, 0x031B
     c8a:	81 32       	cpi	r24, 0x21	; 33
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <orient+0x34>
     c8e:	48 c0       	rjmp	.+144    	; 0xd20 <orient+0xc4>
     c90:	80 91 1a 03 	lds	r24, 0x031A
     c94:	81 32       	cpi	r24, 0x21	; 33
     c96:	08 f4       	brcc	.+2      	; 0xc9a <orient+0x3e>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <orient+0xc4>
		case F:
			
		
			while(isPlus())
			{
				read_sensor();
     c9a:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
				follow();
     c9e:	0e 94 5f 05 	call	0xabe	; 0xabe <follow>
     ca2:	ed cf       	rjmp	.-38     	; 0xc7e <orient+0x22>

				break;

		case L:
				//turnLeft();
					turnL =1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 27 03 	sts	0x0327, r25
     cac:	80 93 26 03 	sts	0x0326, r24
			if(dirn == N)
     cb0:	80 91 0e 02 	lds	r24, 0x020E
     cb4:	90 91 0f 02 	lds	r25, 0x020F
     cb8:	85 31       	cpi	r24, 0x15	; 21
     cba:	91 05       	cpc	r25, r1
     cbc:	39 f1       	breq	.+78     	; 0xd0c <orient+0xb0>
			{
			//	turnLeft();
				dirn = W;
			}
			else if (dirn == E)
     cbe:	87 31       	cpi	r24, 0x17	; 23
     cc0:	91 05       	cpc	r25, r1
     cc2:	f9 f0       	breq	.+62     	; 0xd02 <orient+0xa6>
			{
			//	turnBack();
				dirn = N;
			}
			else if (dirn == W)
     cc4:	88 31       	cpi	r24, 0x18	; 24
     cc6:	91 05       	cpc	r25, r1
     cc8:	b1 f0       	breq	.+44     	; 0xcf6 <orient+0x9a>
			{
				dirn=S;
			}
			else if (dirn == S)
     cca:	46 97       	sbiw	r24, 0x16	; 22
     ccc:	49 f5       	brne	.+82     	; 0xd20 <orient+0xc4>
     cce:	0d c0       	rjmp	.+26     	; 0xcea <orient+0x8e>
				dirn = E;
			}
				break;
		case R:
		//turnRight();
		turnR =1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	90 93 29 03 	sts	0x0329, r25
     cd8:	80 93 28 03 	sts	0x0328, r24
		if(dirn == N)
     cdc:	80 91 0e 02 	lds	r24, 0x020E
     ce0:	90 91 0f 02 	lds	r25, 0x020F
     ce4:	85 31       	cpi	r24, 0x15	; 21
     ce6:	91 05       	cpc	r25, r1
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <orient+0x94>
			{
				//turnRight();
				dirn = E;
     cea:	87 e1       	ldi	r24, 0x17	; 23
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	10 c0       	rjmp	.+32     	; 0xd10 <orient+0xb4>
			}
			else if (dirn == E)
     cf0:	87 31       	cpi	r24, 0x17	; 23
     cf2:	91 05       	cpc	r25, r1
     cf4:	19 f4       	brne	.+6      	; 0xcfc <orient+0xa0>
			{
				dirn =S;
     cf6:	86 e1       	ldi	r24, 0x16	; 22
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <orient+0xb4>
			}
			else if (dirn == W)
     cfc:	88 31       	cpi	r24, 0x18	; 24
     cfe:	91 05       	cpc	r25, r1
     d00:	19 f4       	brne	.+6      	; 0xd08 <orient+0xac>
			{
				//turnBack();
				dirn = N;
     d02:	85 e1       	ldi	r24, 0x15	; 21
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <orient+0xb4>
			}
			else if (dirn == S)
     d08:	46 97       	sbiw	r24, 0x16	; 22
     d0a:	51 f4       	brne	.+20     	; 0xd20 <orient+0xc4>
			{
				//turnLeft();
				dirn = W;
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 0f 02 	sts	0x020F, r25
     d14:	80 93 0e 02 	sts	0x020E, r24
     d18:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d1a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d1c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d1e:	82 b9       	out	0x02, r24	; 2
     d20:	08 95       	ret

00000d22 <map>:
	

}

int map(int pindex)
{
     d22:	9c 01       	movw	r18, r24
	switch(pindex)
     d24:	fc 01       	movw	r30, r24
     d26:	81 33       	cpi	r24, 0x31	; 49
     d28:	91 05       	cpc	r25, r1
     d2a:	f0 f5       	brcc	.+124    	; 0xda8 <map+0x86>
     d2c:	ee 58       	subi	r30, 0x8E	; 142
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	05 90       	lpm	r0, Z+
     d36:	f4 91       	lpm	r31, Z+
     d38:	e0 2d       	mov	r30, r0
     d3a:	19 94       	eijmp
     d3c:	2d e0       	ldi	r18, 0x0D	; 13
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	35 c0       	rjmp	.+106    	; 0xdac <map+0x8a>
     d42:	2c e0       	ldi	r18, 0x0C	; 12
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	32 c0       	rjmp	.+100    	; 0xdac <map+0x8a>
		case 45:
		case 46:
		case 47:
		case 48:return pindex;
		case 7: return 13;
		case 8: return 12;
     d48:	2b e0       	ldi	r18, 0x0B	; 11
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	2f c0       	rjmp	.+94     	; 0xdac <map+0x8a>
		case 9: return 11;
     d4e:	29 e0       	ldi	r18, 0x09	; 9
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	2c c0       	rjmp	.+88     	; 0xdac <map+0x8a>
		case 10:return 10;
		case 11:return 9;
     d54:	28 e0       	ldi	r18, 0x08	; 8
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	29 c0       	rjmp	.+82     	; 0xdac <map+0x8a>
		case 12:return 8;
     d5a:	27 e0       	ldi	r18, 0x07	; 7
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	26 c0       	rjmp	.+76     	; 0xdac <map+0x8a>
		case 13:return 7;
     d60:	2b e1       	ldi	r18, 0x1B	; 27
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	23 c0       	rjmp	.+70     	; 0xdac <map+0x8a>
		case 21:return 27;
     d66:	2a e1       	ldi	r18, 0x1A	; 26
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	20 c0       	rjmp	.+64     	; 0xdac <map+0x8a>
		case 22:return 26;
     d6c:	29 e1       	ldi	r18, 0x19	; 25
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	1d c0       	rjmp	.+58     	; 0xdac <map+0x8a>
		case 23:return 25;
     d72:	27 e1       	ldi	r18, 0x17	; 23
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	1a c0       	rjmp	.+52     	; 0xdac <map+0x8a>
		case 24:return 24;
		case 25:return 23;
     d78:	26 e1       	ldi	r18, 0x16	; 22
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	17 c0       	rjmp	.+46     	; 0xdac <map+0x8a>
		case 26:return 22;
     d7e:	25 e1       	ldi	r18, 0x15	; 21
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	14 c0       	rjmp	.+40     	; 0xdac <map+0x8a>
		case 27:return 21;
     d84:	29 e2       	ldi	r18, 0x29	; 41
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	11 c0       	rjmp	.+34     	; 0xdac <map+0x8a>
		case 35:return 41;
     d8a:	28 e2       	ldi	r18, 0x28	; 40
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	0e c0       	rjmp	.+28     	; 0xdac <map+0x8a>
		case 36:return 40;
     d90:	27 e2       	ldi	r18, 0x27	; 39
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	0b c0       	rjmp	.+22     	; 0xdac <map+0x8a>
		case 37:return 39;
     d96:	25 e2       	ldi	r18, 0x25	; 37
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <map+0x8a>
		case 38:return 38;
		case 39:return 37;
     d9c:	24 e2       	ldi	r18, 0x24	; 36
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	05 c0       	rjmp	.+10     	; 0xdac <map+0x8a>
		case 40:return 36;
     da2:	23 e2       	ldi	r18, 0x23	; 35
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <map+0x8a>
		case 41:return 35;
     da8:	2f ef       	ldi	r18, 0xFF	; 255
     daa:	3f ef       	ldi	r19, 0xFF	; 255
	
	}
	return -1;
}
     dac:	c9 01       	movw	r24, r18
     dae:	08 95       	ret

00000db0 <rotate_left_slowly>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     db0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     db2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     db4:	82 b9       	out	0x02, r24	; 2
	//velocity(150,150);

	while(1)
	{
		stop();
		read_sensor();
     db6:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>

		// For center black line
		if(Center_white_line>0x20)
     dba:	80 91 1a 03 	lds	r24, 0x031A
     dbe:	81 32       	cpi	r24, 0x21	; 33
     dc0:	28 f4       	brcc	.+10     	; 0xdcc <rotate_left_slowly+0x1c>
			break;	
		}

		else
		{			
			left_degrees(10);
     dc2:	8a e0       	ldi	r24, 0x0A	; 10
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 be 04 	call	0x97c	; 0x97c <left_degrees>
     dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <rotate_left_slowly>
     dcc:	08 95       	ret

00000dce <rotate_right_slowly>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dce:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dd0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     dd2:	82 b9       	out	0x02, r24	; 2
	//velocity(150,150);

	while(1)
	{
		stop();
		read_sensor();
     dd4:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>

		// For center black line
		if(Center_white_line>0x20)
     dd8:	80 91 1a 03 	lds	r24, 0x031A
     ddc:	81 32       	cpi	r24, 0x21	; 33
     dde:	28 f4       	brcc	.+10     	; 0xdea <rotate_right_slowly+0x1c>
			break;	
		}

		else
		{
			right_degrees(10);			
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 c5 04 	call	0x98a	; 0x98a <right_degrees>
     de8:	f2 cf       	rjmp	.-28     	; 0xdce <rotate_right_slowly>
     dea:	08 95       	ret

00000dec <initialize_servo_motors>:


/////////////////////////////////////////////////////

void initialize_servo_motors()
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
	// Some tuning for Servo_Motor_1
	for (i = 0; i <50; i += 5)
     df0:	10 92 38 03 	sts	0x0338, r1
     df4:	10 92 37 03 	sts	0x0337, r1
     df8:	c0 e7       	ldi	r28, 0x70	; 112
     dfa:	d1 e0       	ldi	r29, 0x01	; 1
     dfc:	12 c0       	rjmp	.+36     	; 0xe22 <initialize_servo_motors+0x36>
	{
		servo_1(i);
     dfe:	0e 94 14 02 	call	0x428	; 0x428 <servo_1>
     e02:	84 ef       	ldi	r24, 0xF4	; 244
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	fe 01       	movw	r30, r28
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <initialize_servo_motors+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	d9 f7       	brne	.-10     	; 0xe06 <initialize_servo_motors+0x1a>
/////////////////////////////////////////////////////

void initialize_servo_motors()
{
	// Some tuning for Servo_Motor_1
	for (i = 0; i <50; i += 5)
     e10:	80 91 37 03 	lds	r24, 0x0337
     e14:	90 91 38 03 	lds	r25, 0x0338
     e18:	05 96       	adiw	r24, 0x05	; 5
     e1a:	90 93 38 03 	sts	0x0338, r25
     e1e:	80 93 37 03 	sts	0x0337, r24
     e22:	80 91 37 03 	lds	r24, 0x0337
     e26:	90 91 38 03 	lds	r25, 0x0338
     e2a:	82 33       	cpi	r24, 0x32	; 50
     e2c:	91 05       	cpc	r25, r1
     e2e:	3c f3       	brlt	.-50     	; 0xdfe <initialize_servo_motors+0x12>
		servo_1(i);
		_delay_ms(50);
	}

	// Some tuning for Servo_Motor_2
	servo_2(0);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 2e 02 	call	0x45c	; 0x45c <servo_2>

}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <sweeper_job>:


void sweeper_job()
{
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
	// dumpCount is for the dumping status
	dumpCount += 1;
     e40:	80 91 2e 03 	lds	r24, 0x032E
     e44:	90 91 2f 03 	lds	r25, 0x032F
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	90 93 2f 03 	sts	0x032F, r25
     e4e:	80 93 2e 03 	sts	0x032E, r24
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e52:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     e54:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     e56:	80 64       	ori	r24, 0x40	; 64
 PORTA = PortARestore; 		// executing the command
     e58:	82 b9       	out	0x02, r24	; 2
     e5a:	88 ec       	ldi	r24, 0xC8	; 200
     e5c:	92 e3       	ldi	r25, 0x32	; 50
     e5e:	20 e7       	ldi	r18, 0x70	; 112
     e60:	31 e0       	ldi	r19, 0x01	; 1
     e62:	f9 01       	movw	r30, r18
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <sweeper_job+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	d9 f7       	brne	.-10     	; 0xe62 <sweeper_job+0x26>
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e6c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     e6e:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     e70:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e72:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     e74:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     e76:	88 b9       	out	0x08, r24	; 8
     e78:	88 ee       	ldi	r24, 0xE8	; 232
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	20 e7       	ldi	r18, 0x70	; 112
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	f9 01       	movw	r30, r18
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <sweeper_job+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	d9 f7       	brne	.-10     	; 0xe80 <sweeper_job+0x44>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e8a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     e8c:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     e8e:	88 b9       	out	0x08, r24	; 8
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	95 e7       	ldi	r25, 0x75	; 117
     e94:	20 e7       	ldi	r18, 0x70	; 112
     e96:	31 e0       	ldi	r19, 0x01	; 1
     e98:	f9 01       	movw	r30, r18
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <sweeper_job+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	d9 f7       	brne	.-10     	; 0xe98 <sweeper_job+0x5c>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Release the Arm , Servo1
		for (i = 50; i > 0; i -= 5)
     ea2:	82 e3       	ldi	r24, 0x32	; 50
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 38 03 	sts	0x0338, r25
     eaa:	80 93 37 03 	sts	0x0337, r24
     eae:	c0 e7       	ldi	r28, 0x70	; 112
     eb0:	d1 e0       	ldi	r29, 0x01	; 1
     eb2:	12 c0       	rjmp	.+36     	; 0xed8 <sweeper_job+0x9c>
 		{
  			servo_1(i);
     eb4:	0e 94 14 02 	call	0x428	; 0x428 <servo_1>
     eb8:	8c e2       	ldi	r24, 0x2C	; 44
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	fe 01       	movw	r30, r28
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <sweeper_job+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec4:	d9 f7       	brne	.-10     	; 0xebc <sweeper_job+0x80>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Release the Arm , Servo1
		for (i = 50; i > 0; i -= 5)
     ec6:	80 91 37 03 	lds	r24, 0x0337
     eca:	90 91 38 03 	lds	r25, 0x0338
     ece:	05 97       	sbiw	r24, 0x05	; 5
     ed0:	90 93 38 03 	sts	0x0338, r25
     ed4:	80 93 37 03 	sts	0x0337, r24
     ed8:	80 91 37 03 	lds	r24, 0x0337
     edc:	90 91 38 03 	lds	r25, 0x0338
     ee0:	18 16       	cp	r1, r24
     ee2:	19 06       	cpc	r1, r25
     ee4:	3c f3       	brlt	.-50     	; 0xeb4 <sweeper_job+0x78>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     ee6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     ee8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     eea:	88 b9       	out	0x08, r24	; 8
     eec:	88 ee       	ldi	r24, 0xE8	; 232
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	20 e7       	ldi	r18, 0x70	; 112
     ef2:	31 e0       	ldi	r19, 0x01	; 1
     ef4:	f9 01       	movw	r30, r18
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <sweeper_job+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	d9 f7       	brne	.-10     	; 0xef4 <sweeper_job+0xb8>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     efe:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     f00:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     f02:	88 b9       	out	0x08, r24	; 8
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	95 e7       	ldi	r25, 0x75	; 117
     f08:	20 e7       	ldi	r18, 0x70	; 112
     f0a:	31 e0       	ldi	r19, 0x01	; 1
     f0c:	f9 01       	movw	r30, r18
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <sweeper_job+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f14:	d9 f7       	brne	.-10     	; 0xf0c <sweeper_job+0xd0>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Release the Container , Servo2
		for (i = 0; i < 30; i += 5)
     f16:	10 92 38 03 	sts	0x0338, r1
     f1a:	10 92 37 03 	sts	0x0337, r1
     f1e:	c0 e7       	ldi	r28, 0x70	; 112
     f20:	d1 e0       	ldi	r29, 0x01	; 1
     f22:	12 c0       	rjmp	.+36     	; 0xf48 <sweeper_job+0x10c>
 		{
  			servo_2(i);
     f24:	0e 94 2e 02 	call	0x45c	; 0x45c <servo_2>
     f28:	8c e2       	ldi	r24, 0x2C	; 44
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	fe 01       	movw	r30, r28
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <sweeper_job+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	d9 f7       	brne	.-10     	; 0xf2c <sweeper_job+0xf0>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Release the Container , Servo2
		for (i = 0; i < 30; i += 5)
     f36:	80 91 37 03 	lds	r24, 0x0337
     f3a:	90 91 38 03 	lds	r25, 0x0338
     f3e:	05 96       	adiw	r24, 0x05	; 5
     f40:	90 93 38 03 	sts	0x0338, r25
     f44:	80 93 37 03 	sts	0x0337, r24
     f48:	80 91 37 03 	lds	r24, 0x0337
     f4c:	90 91 38 03 	lds	r25, 0x0338
     f50:	8e 31       	cpi	r24, 0x1E	; 30
     f52:	91 05       	cpc	r25, r1
     f54:	3c f3       	brlt	.-50     	; 0xf24 <sweeper_job+0xe8>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     f56:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     f58:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     f5a:	88 b9       	out	0x08, r24	; 8
     f5c:	88 ee       	ldi	r24, 0xE8	; 232
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	20 e7       	ldi	r18, 0x70	; 112
     f62:	31 e0       	ldi	r19, 0x01	; 1
     f64:	f9 01       	movw	r30, r18
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <sweeper_job+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	d9 f7       	brne	.-10     	; 0xf64 <sweeper_job+0x128>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     f6e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     f70:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     f72:	88 b9       	out	0x08, r24	; 8
     f74:	80 e3       	ldi	r24, 0x30	; 48
     f76:	95 e7       	ldi	r25, 0x75	; 117
     f78:	20 e7       	ldi	r18, 0x70	; 112
     f7a:	31 e0       	ldi	r19, 0x01	; 1
     f7c:	f9 01       	movw	r30, r18
     f7e:	31 97       	sbiw	r30, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <sweeper_job+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	d9 f7       	brne	.-10     	; 0xf7c <sweeper_job+0x140>
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f86:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     f88:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     f8a:	80 68       	ori	r24, 0x80	; 128
 PORTA = PortARestore; 		// executing the command
     f8c:	82 b9       	out	0x02, r24	; 2
     f8e:	88 e6       	ldi	r24, 0x68	; 104
     f90:	92 e4       	ldi	r25, 0x42	; 66
     f92:	20 e7       	ldi	r18, 0x70	; 112
     f94:	31 e0       	ldi	r19, 0x01	; 1
     f96:	f9 01       	movw	r30, r18
     f98:	31 97       	sbiw	r30, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <sweeper_job+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	d9 f7       	brne	.-10     	; 0xf96 <sweeper_job+0x15a>
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fa0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     fa2:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fa4:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     fa6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     fa8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     faa:	88 b9       	out	0x08, r24	; 8
     fac:	88 ee       	ldi	r24, 0xE8	; 232
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	20 e7       	ldi	r18, 0x70	; 112
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	f9 01       	movw	r30, r18
     fb6:	31 97       	sbiw	r30, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <sweeper_job+0x17a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbc:	d9 f7       	brne	.-10     	; 0xfb4 <sweeper_job+0x178>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     fbe:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     fc0:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     fc2:	88 b9       	out	0x08, r24	; 8
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	95 e7       	ldi	r25, 0x75	; 117
     fc8:	20 e7       	ldi	r18, 0x70	; 112
     fca:	31 e0       	ldi	r19, 0x01	; 1
     fcc:	f9 01       	movw	r30, r18
     fce:	31 97       	sbiw	r30, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <sweeper_job+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <sweeper_job+0x190>
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fd6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     fd8:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
     fda:	80 64       	ori	r24, 0x40	; 64
 PORTA = PortARestore; 		// executing the command
     fdc:	82 b9       	out	0x02, r24	; 2
     fde:	80 ea       	ldi	r24, 0xA0	; 160
     fe0:	9f e0       	ldi	r25, 0x0F	; 15
     fe2:	20 e7       	ldi	r18, 0x70	; 112
     fe4:	31 e0       	ldi	r19, 0x01	; 1
     fe6:	f9 01       	movw	r30, r18
     fe8:	31 97       	sbiw	r30, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <sweeper_job+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	d9 f7       	brne	.-10     	; 0xfe6 <sweeper_job+0x1aa>
{

unsigned char PortARestore = 0;

 Direction &= 0xC0; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ff0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0x3F; 		// making lower direction nibbel to 0
     ff2:	8f 73       	andi	r24, 0x3F	; 63
 PortARestore |= Direction; // adding lower nibbel for command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     ff4:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     ff6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     ff8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     ffa:	88 b9       	out	0x08, r24	; 8
     ffc:	88 ee       	ldi	r24, 0xE8	; 232
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	20 e7       	ldi	r18, 0x70	; 112
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	f9 01       	movw	r30, r18
    1006:	31 97       	sbiw	r30, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <sweeper_job+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	d9 f7       	brne	.-10     	; 0x1004 <sweeper_job+0x1c8>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    100e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1010:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1012:	88 b9       	out	0x08, r24	; 8
    1014:	80 e3       	ldi	r24, 0x30	; 48
    1016:	95 e7       	ldi	r25, 0x75	; 117
    1018:	20 e7       	ldi	r18, 0x70	; 112
    101a:	31 e0       	ldi	r19, 0x01	; 1
    101c:	f9 01       	movw	r30, r18
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <sweeper_job+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	d9 f7       	brne	.-10     	; 0x101c <sweeper_job+0x1e0>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Take back the Conatainer , Servo2
	for (i = 30; i > 0; i -= 5)
    1026:	8e e1       	ldi	r24, 0x1E	; 30
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 38 03 	sts	0x0338, r25
    102e:	80 93 37 03 	sts	0x0337, r24
    1032:	c0 e7       	ldi	r28, 0x70	; 112
    1034:	d1 e0       	ldi	r29, 0x01	; 1
    1036:	12 c0       	rjmp	.+36     	; 0x105c <sweeper_job+0x220>
 	{
  		servo_2(i);
    1038:	0e 94 2e 02 	call	0x45c	; 0x45c <servo_2>
    103c:	8c e2       	ldi	r24, 0x2C	; 44
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	fe 01       	movw	r30, r28
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <sweeper_job+0x206>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	d9 f7       	brne	.-10     	; 0x1040 <sweeper_job+0x204>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Take back the Conatainer , Servo2
	for (i = 30; i > 0; i -= 5)
    104a:	80 91 37 03 	lds	r24, 0x0337
    104e:	90 91 38 03 	lds	r25, 0x0338
    1052:	05 97       	sbiw	r24, 0x05	; 5
    1054:	90 93 38 03 	sts	0x0338, r25
    1058:	80 93 37 03 	sts	0x0337, r24
    105c:	80 91 37 03 	lds	r24, 0x0337
    1060:	90 91 38 03 	lds	r25, 0x0338
    1064:	18 16       	cp	r1, r24
    1066:	19 06       	cpc	r1, r25
    1068:	3c f3       	brlt	.-50     	; 0x1038 <sweeper_job+0x1fc>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    106a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    106c:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    106e:	88 b9       	out	0x08, r24	; 8
    1070:	88 ee       	ldi	r24, 0xE8	; 232
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	20 e7       	ldi	r18, 0x70	; 112
    1076:	31 e0       	ldi	r19, 0x01	; 1
    1078:	f9 01       	movw	r30, r18
    107a:	31 97       	sbiw	r30, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <sweeper_job+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	d9 f7       	brne	.-10     	; 0x1078 <sweeper_job+0x23c>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1082:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1084:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1086:	88 b9       	out	0x08, r24	; 8
    1088:	80 e3       	ldi	r24, 0x30	; 48
    108a:	95 e7       	ldi	r25, 0x75	; 117
    108c:	20 e7       	ldi	r18, 0x70	; 112
    108e:	31 e0       	ldi	r19, 0x01	; 1
    1090:	f9 01       	movw	r30, r18
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <sweeper_job+0x256>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	d9 f7       	brne	.-10     	; 0x1090 <sweeper_job+0x254>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Pull the Arm , Servo1
	for (i = 0; i < 50; i += 5)
    109a:	10 92 38 03 	sts	0x0338, r1
    109e:	10 92 37 03 	sts	0x0337, r1
    10a2:	c0 e7       	ldi	r28, 0x70	; 112
    10a4:	d1 e0       	ldi	r29, 0x01	; 1
    10a6:	12 c0       	rjmp	.+36     	; 0x10cc <sweeper_job+0x290>
 		{
  			servo_1(i);
    10a8:	0e 94 14 02 	call	0x428	; 0x428 <servo_1>
    10ac:	8c e2       	ldi	r24, 0x2C	; 44
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	fe 01       	movw	r30, r28
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <sweeper_job+0x276>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	d9 f7       	brne	.-10     	; 0x10b0 <sweeper_job+0x274>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(3000);

	// Pull the Arm , Servo1
	for (i = 0; i < 50; i += 5)
    10ba:	80 91 37 03 	lds	r24, 0x0337
    10be:	90 91 38 03 	lds	r25, 0x0338
    10c2:	05 96       	adiw	r24, 0x05	; 5
    10c4:	90 93 38 03 	sts	0x0338, r25
    10c8:	80 93 37 03 	sts	0x0337, r24
    10cc:	80 91 37 03 	lds	r24, 0x0337
    10d0:	90 91 38 03 	lds	r25, 0x0338
    10d4:	82 33       	cpi	r24, 0x32	; 50
    10d6:	91 05       	cpc	r25, r1
    10d8:	3c f3       	brlt	.-50     	; 0x10a8 <sweeper_job+0x26c>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10da:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    10dc:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    10de:	88 b9       	out	0x08, r24	; 8
    10e0:	80 e1       	ldi	r24, 0x10	; 16
    10e2:	97 e2       	ldi	r25, 0x27	; 39
    10e4:	20 e7       	ldi	r18, 0x70	; 112
    10e6:	31 e0       	ldi	r19, 0x01	; 1
    10e8:	f9 01       	movw	r30, r18
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <sweeper_job+0x2ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	d9 f7       	brne	.-10     	; 0x10e8 <sweeper_job+0x2ac>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10f2:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    10f4:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    10f6:	88 b9       	out	0x08, r24	; 8
    10f8:	80 e3       	ldi	r24, 0x30	; 48
    10fa:	95 e7       	ldi	r25, 0x75	; 117
    10fc:	20 e7       	ldi	r18, 0x70	; 112
    10fe:	31 e0       	ldi	r19, 0x01	; 1
    1100:	f9 01       	movw	r30, r18
    1102:	31 97       	sbiw	r30, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <sweeper_job+0x2c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	d9 f7       	brne	.-10     	; 0x1100 <sweeper_job+0x2c4>
	buzzer_on();
	_delay_ms(1000);
	buzzer_off();
	_delay_ms(3000);

}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <main>:



//Main Function
int main()
{
    1110:	1f 93       	push	r17
	init_devices();
    1112:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <init_devices>
	init_encoders();
    1116:	0e 94 3e 05 	call	0xa7c	; 0xa7c <init_encoders>
	initialize_servo_motors();
    111a:	0e 94 f6 06 	call	0xdec	; 0xdec <initialize_servo_motors>

	lcd_set_4bit();
    111e:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_set_4bit>
	lcd_init();
    1122:	0e 94 19 01 	call	0x232	; 0x232 <lcd_init>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1126:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1128:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    112a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    112c:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    112e:	88 ec       	ldi	r24, 0xC8	; 200
    1130:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1134:	80 93 2a 01 	sts	0x012A, r24
	lcd_set_4bit();
	lcd_init();
	int value=0;
	forward();
	velocity(200,200);
	lcd_print(2,1,150,3);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	46 e9       	ldi	r20, 0x96	; 150
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	23 e0       	ldi	r18, 0x03	; 3
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	lcd_print(2,5,150,3);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	65 e0       	ldi	r22, 0x05	; 5
    114c:	46 e9       	ldi	r20, 0x96	; 150
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	23 e0       	ldi	r18, 0x03	; 3
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	lcd_print(2,9,pathindex,2);
    1158:	40 91 1c 03 	lds	r20, 0x031C
    115c:	50 91 1d 03 	lds	r21, 0x031D
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	69 e0       	ldi	r22, 0x09	; 9
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
	lcd_print(2,13,dirn,3);
    116c:	40 91 0e 02 	lds	r20, 0x020E
    1170:	50 91 0f 02 	lds	r21, 0x020F
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	6d e0       	ldi	r22, 0x0D	; 13
    1178:	23 e0       	ldi	r18, 0x03	; 3
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1180:	12 e8       	ldi	r17, 0x82	; 130
	}
	*/
		
	while(1)
	{	
		read_sensor();
    1182:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
		follow();
    1186:	0e 94 5f 05 	call	0xabe	; 0xabe <follow>
}

int isPlus()
{

	if((Left_white_line >0x20 && Center_white_line>0x20) || (Right_white_line >0x20 && Center_white_line>0x20))
    118a:	80 91 19 03 	lds	r24, 0x0319
    118e:	81 32       	cpi	r24, 0x21	; 33
    1190:	28 f4       	brcc	.+10     	; 0x119c <main+0x8c>
    1192:	80 91 1b 03 	lds	r24, 0x031B
    1196:	81 32       	cpi	r24, 0x21	; 33
    1198:	08 f4       	brcc	.+2      	; 0x119c <main+0x8c>
    119a:	5e c0       	rjmp	.+188    	; 0x1258 <main+0x148>
    119c:	80 91 1a 03 	lds	r24, 0x031A
    11a0:	81 32       	cpi	r24, 0x21	; 33
    11a2:	08 f4       	brcc	.+2      	; 0x11a6 <main+0x96>
    11a4:	59 c0       	rjmp	.+178    	; 0x1258 <main+0x148>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11a6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11a8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11aa:	82 b9       	out	0x02, r24	; 2
		if(isPlus())
		{
			// Added by Ravi
			stop();

			read_sensor();
    11ac:	0e 94 13 05 	call	0xa26	; 0xa26 <read_sensor>
			value = path[pathindex++];		
    11b0:	20 91 1c 03 	lds	r18, 0x031C
    11b4:	30 91 1d 03 	lds	r19, 0x031D
    11b8:	f9 01       	movw	r30, r18
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	e0 50       	subi	r30, 0x00	; 0
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	30 93 1d 03 	sts	0x031D, r19
    11ce:	20 93 1c 03 	sts	0x031C, r18
			orient(value);
    11d2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <orient>
			lcd_print(2,9,pathindex,2);
    11d6:	40 91 1c 03 	lds	r20, 0x031C
    11da:	50 91 1d 03 	lds	r21, 0x031D
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	69 e0       	ldi	r22, 0x09	; 9
    11e2:	22 e0       	ldi	r18, 0x02	; 2
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
			lcd_print(2,13,dirn,3);
    11ea:	40 91 0e 02 	lds	r20, 0x020E
    11ee:	50 91 0f 02 	lds	r21, 0x020F
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	6d e0       	ldi	r22, 0x0D	; 13
    11f6:	23 e0       	ldi	r18, 0x03	; 3
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
			lcd_print(1,13,turnL,1);
    11fe:	40 91 26 03 	lds	r20, 0x0326
    1202:	50 91 27 03 	lds	r21, 0x0327
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	6d e0       	ldi	r22, 0x0D	; 13
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
			lcd_print(1,15,turnR,1);
    1212:	40 91 28 03 	lds	r20, 0x0328
    1216:	50 91 29 03 	lds	r21, 0x0329
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	6f e0       	ldi	r22, 0x0F	; 15
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_print>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1226:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    122a:	10 93 2a 01 	sts	0x012A, r17
			lcd_print(1,13,turnL,1);
			lcd_print(1,15,turnR,1);
			velocity(130,130);

			//All code to do swipping stuff
			if (turnL != 1 && turnR != 1)
    122e:	80 91 26 03 	lds	r24, 0x0326
    1232:	90 91 27 03 	lds	r25, 0x0327
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	79 f0       	breq	.+30     	; 0x1258 <main+0x148>
    123a:	80 91 28 03 	lds	r24, 0x0328
    123e:	90 91 29 03 	lds	r25, 0x0329
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	49 f0       	breq	.+18     	; 0x1258 <main+0x148>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1246:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1248:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    124a:	82 b9       	out	0x02, r24	; 2

			//All code to do swipping stuff
			if (turnL != 1 && turnR != 1)
			{
				stop();
				sweeper_job();
    124c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sweeper_job>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1250:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1252:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1254:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1256:	82 b9       	out	0x02, r24	; 2
			}

			
		}
		
		if(turnL == 1)
    1258:	80 91 26 03 	lds	r24, 0x0326
    125c:	90 91 27 03 	lds	r25, 0x0327
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	11 f5       	brne	.+68     	; 0x12a8 <main+0x198>
	 	 forward();
		velocity(100,100);
		 turnL = 0;
		 */

		back_mm(50);
    1264:	82 e3       	ldi	r24, 0x32	; 50
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 b7 04 	call	0x96e	; 0x96e <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    126c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    126e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1270:	82 b9       	out	0x02, r24	; 2

		back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		left_degrees(50);
    1272:	82 e3       	ldi	r24, 0x32	; 50
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 be 04 	call	0x97c	; 0x97c <left_degrees>
		rotate_left_slowly();
    127a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <rotate_left_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    127e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1280:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1282:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1284:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1286:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    128a:	10 93 2a 01 	sts	0x012A, r17
		stop();
		left_degrees(50);
		rotate_left_slowly();
	 	forward();
		velocity(130,130);
		turnL = 0;
    128e:	10 92 27 03 	sts	0x0327, r1
    1292:	10 92 26 03 	sts	0x0326, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1296:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1298:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    129a:	82 b9       	out	0x02, r24	; 2
		turnL = 0;
		

		// Added by Ravi
		stop();
		sweeper_job();
    129c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sweeper_job>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12a4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12a6:	82 b9       	out	0x02, r24	; 2
		sweeper_job();
		forward();
		
		}
		
		if(turnR == 1)
    12a8:	80 91 28 03 	lds	r24, 0x0328
    12ac:	90 91 29 03 	lds	r25, 0x0329
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <main+0x1a6>
    12b4:	66 cf       	rjmp	.-308    	; 0x1182 <main+0x72>
		//follow();
		velocity(130,130);
		 turnR = 0;
		 */

		 back_mm(50);
    12b6:	82 e3       	ldi	r24, 0x32	; 50
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 b7 04 	call	0x96e	; 0x96e <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12c2:	82 b9       	out	0x02, r24	; 2

		 back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		right_degrees(50);
    12c4:	82 e3       	ldi	r24, 0x32	; 50
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 c5 04 	call	0x98a	; 0x98a <right_degrees>
		rotate_right_slowly();
    12cc:	0e 94 e7 06 	call	0xdce	; 0xdce <rotate_right_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12d0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12d2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12d4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12d6:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12d8:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    12dc:	10 93 2a 01 	sts	0x012A, r17
		stop();
		right_degrees(50);
		rotate_right_slowly();
	 	forward();
		velocity(130,130);
		turnR = 0;
    12e0:	10 92 29 03 	sts	0x0329, r1
    12e4:	10 92 28 03 	sts	0x0328, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12e8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12ea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12ec:	82 b9       	out	0x02, r24	; 2
		velocity(130,130);
		turnR = 0;

		// Added by Ravi
		stop();
		sweeper_job();
    12ee:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sweeper_job>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12f2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12f4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12f6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12f8:	82 b9       	out	0x02, r24	; 2
    12fa:	43 cf       	rjmp	.-378    	; 0x1182 <main+0x72>

000012fc <__fixunssfsi>:
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	5f e4       	ldi	r21, 0x4F	; 79
    1310:	0e 94 00 0c 	call	0x1800	; 0x1800 <__gesf2>
    1314:	88 23       	and	r24, r24
    1316:	8c f0       	brlt	.+34     	; 0x133a <__fixunssfsi+0x3e>
    1318:	c8 01       	movw	r24, r16
    131a:	b7 01       	movw	r22, r14
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	5f e4       	ldi	r21, 0x4F	; 79
    1324:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__subsf3>
    1328:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fixsfsi>
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	20 50       	subi	r18, 0x00	; 0
    1332:	30 40       	sbci	r19, 0x00	; 0
    1334:	40 40       	sbci	r20, 0x00	; 0
    1336:	50 48       	sbci	r21, 0x80	; 128
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <__fixunssfsi+0x4a>
    133a:	c8 01       	movw	r24, r16
    133c:	b7 01       	movw	r22, r14
    133e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fixsfsi>
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	b9 01       	movw	r22, r18
    1348:	ca 01       	movw	r24, r20
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	08 95       	ret

00001354 <_fpadd_parts>:
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e0 eb       	ldi	r30, 0xB0	; 176
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__prologue_saves__>
    1360:	dc 01       	movw	r26, r24
    1362:	2b 01       	movw	r4, r22
    1364:	fa 01       	movw	r30, r20
    1366:	9c 91       	ld	r25, X
    1368:	92 30       	cpi	r25, 0x02	; 2
    136a:	08 f4       	brcc	.+2      	; 0x136e <_fpadd_parts+0x1a>
    136c:	39 c1       	rjmp	.+626    	; 0x15e0 <_fpadd_parts+0x28c>
    136e:	eb 01       	movw	r28, r22
    1370:	88 81       	ld	r24, Y
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	08 f4       	brcc	.+2      	; 0x1378 <_fpadd_parts+0x24>
    1376:	33 c1       	rjmp	.+614    	; 0x15de <_fpadd_parts+0x28a>
    1378:	94 30       	cpi	r25, 0x04	; 4
    137a:	69 f4       	brne	.+26     	; 0x1396 <_fpadd_parts+0x42>
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	09 f0       	breq	.+2      	; 0x1382 <_fpadd_parts+0x2e>
    1380:	2f c1       	rjmp	.+606    	; 0x15e0 <_fpadd_parts+0x28c>
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	9c 91       	ld	r25, X
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	98 17       	cp	r25, r24
    138c:	09 f4       	brne	.+2      	; 0x1390 <_fpadd_parts+0x3c>
    138e:	28 c1       	rjmp	.+592    	; 0x15e0 <_fpadd_parts+0x28c>
    1390:	a0 e1       	ldi	r26, 0x10	; 16
    1392:	b2 e0       	ldi	r27, 0x02	; 2
    1394:	25 c1       	rjmp	.+586    	; 0x15e0 <_fpadd_parts+0x28c>
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	09 f4       	brne	.+2      	; 0x139c <_fpadd_parts+0x48>
    139a:	21 c1       	rjmp	.+578    	; 0x15de <_fpadd_parts+0x28a>
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	a9 f4       	brne	.+42     	; 0x13ca <_fpadd_parts+0x76>
    13a0:	92 30       	cpi	r25, 0x02	; 2
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <_fpadd_parts+0x52>
    13a4:	1d c1       	rjmp	.+570    	; 0x15e0 <_fpadd_parts+0x28c>
    13a6:	9a 01       	movw	r18, r20
    13a8:	ad 01       	movw	r20, r26
    13aa:	88 e0       	ldi	r24, 0x08	; 8
    13ac:	ea 01       	movw	r28, r20
    13ae:	09 90       	ld	r0, Y+
    13b0:	ae 01       	movw	r20, r28
    13b2:	e9 01       	movw	r28, r18
    13b4:	09 92       	st	Y+, r0
    13b6:	9e 01       	movw	r18, r28
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	c1 f7       	brne	.-16     	; 0x13ac <_fpadd_parts+0x58>
    13bc:	e2 01       	movw	r28, r4
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	9c 91       	ld	r25, X
    13c4:	89 23       	and	r24, r25
    13c6:	81 83       	std	Z+1, r24	; 0x01
    13c8:	08 c1       	rjmp	.+528    	; 0x15da <_fpadd_parts+0x286>
    13ca:	92 30       	cpi	r25, 0x02	; 2
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <_fpadd_parts+0x7c>
    13ce:	07 c1       	rjmp	.+526    	; 0x15de <_fpadd_parts+0x28a>
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	2d 90       	ld	r2, X+
    13d4:	3c 90       	ld	r3, X
    13d6:	13 97       	sbiw	r26, 0x03	; 3
    13d8:	eb 01       	movw	r28, r22
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	14 96       	adiw	r26, 0x04	; 4
    13e0:	ad 90       	ld	r10, X+
    13e2:	bd 90       	ld	r11, X+
    13e4:	cd 90       	ld	r12, X+
    13e6:	dc 90       	ld	r13, X
    13e8:	17 97       	sbiw	r26, 0x07	; 7
    13ea:	ec 80       	ldd	r14, Y+4	; 0x04
    13ec:	fd 80       	ldd	r15, Y+5	; 0x05
    13ee:	0e 81       	ldd	r16, Y+6	; 0x06
    13f0:	1f 81       	ldd	r17, Y+7	; 0x07
    13f2:	91 01       	movw	r18, r2
    13f4:	28 1b       	sub	r18, r24
    13f6:	39 0b       	sbc	r19, r25
    13f8:	b9 01       	movw	r22, r18
    13fa:	37 ff       	sbrs	r19, 7
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <_fpadd_parts+0xb2>
    13fe:	66 27       	eor	r22, r22
    1400:	77 27       	eor	r23, r23
    1402:	62 1b       	sub	r22, r18
    1404:	73 0b       	sbc	r23, r19
    1406:	60 32       	cpi	r22, 0x20	; 32
    1408:	71 05       	cpc	r23, r1
    140a:	0c f0       	brlt	.+2      	; 0x140e <_fpadd_parts+0xba>
    140c:	61 c0       	rjmp	.+194    	; 0x14d0 <_fpadd_parts+0x17c>
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	6c f5       	brge	.+90     	; 0x146e <_fpadd_parts+0x11a>
    1414:	37 01       	movw	r6, r14
    1416:	48 01       	movw	r8, r16
    1418:	06 2e       	mov	r0, r22
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <_fpadd_parts+0xd0>
    141c:	96 94       	lsr	r9
    141e:	87 94       	ror	r8
    1420:	77 94       	ror	r7
    1422:	67 94       	ror	r6
    1424:	0a 94       	dec	r0
    1426:	d2 f7       	brpl	.-12     	; 0x141c <_fpadd_parts+0xc8>
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	04 c0       	rjmp	.+8      	; 0x143a <_fpadd_parts+0xe6>
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	44 1f       	adc	r20, r20
    1438:	55 1f       	adc	r21, r21
    143a:	6a 95       	dec	r22
    143c:	d2 f7       	brpl	.-12     	; 0x1432 <_fpadd_parts+0xde>
    143e:	21 50       	subi	r18, 0x01	; 1
    1440:	30 40       	sbci	r19, 0x00	; 0
    1442:	40 40       	sbci	r20, 0x00	; 0
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	2e 21       	and	r18, r14
    1448:	3f 21       	and	r19, r15
    144a:	40 23       	and	r20, r16
    144c:	51 23       	and	r21, r17
    144e:	21 15       	cp	r18, r1
    1450:	31 05       	cpc	r19, r1
    1452:	41 05       	cpc	r20, r1
    1454:	51 05       	cpc	r21, r1
    1456:	21 f0       	breq	.+8      	; 0x1460 <_fpadd_parts+0x10c>
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	79 01       	movw	r14, r18
    1462:	8a 01       	movw	r16, r20
    1464:	e6 28       	or	r14, r6
    1466:	f7 28       	or	r15, r7
    1468:	08 29       	or	r16, r8
    146a:	19 29       	or	r17, r9
    146c:	3c c0       	rjmp	.+120    	; 0x14e6 <_fpadd_parts+0x192>
    146e:	23 2b       	or	r18, r19
    1470:	d1 f1       	breq	.+116    	; 0x14e6 <_fpadd_parts+0x192>
    1472:	26 0e       	add	r2, r22
    1474:	37 1e       	adc	r3, r23
    1476:	35 01       	movw	r6, r10
    1478:	46 01       	movw	r8, r12
    147a:	06 2e       	mov	r0, r22
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <_fpadd_parts+0x132>
    147e:	96 94       	lsr	r9
    1480:	87 94       	ror	r8
    1482:	77 94       	ror	r7
    1484:	67 94       	ror	r6
    1486:	0a 94       	dec	r0
    1488:	d2 f7       	brpl	.-12     	; 0x147e <_fpadd_parts+0x12a>
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_fpadd_parts+0x148>
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	44 1f       	adc	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	6a 95       	dec	r22
    149e:	d2 f7       	brpl	.-12     	; 0x1494 <_fpadd_parts+0x140>
    14a0:	21 50       	subi	r18, 0x01	; 1
    14a2:	30 40       	sbci	r19, 0x00	; 0
    14a4:	40 40       	sbci	r20, 0x00	; 0
    14a6:	50 40       	sbci	r21, 0x00	; 0
    14a8:	2a 21       	and	r18, r10
    14aa:	3b 21       	and	r19, r11
    14ac:	4c 21       	and	r20, r12
    14ae:	5d 21       	and	r21, r13
    14b0:	21 15       	cp	r18, r1
    14b2:	31 05       	cpc	r19, r1
    14b4:	41 05       	cpc	r20, r1
    14b6:	51 05       	cpc	r21, r1
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <_fpadd_parts+0x16e>
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	59 01       	movw	r10, r18
    14c4:	6a 01       	movw	r12, r20
    14c6:	a6 28       	or	r10, r6
    14c8:	b7 28       	or	r11, r7
    14ca:	c8 28       	or	r12, r8
    14cc:	d9 28       	or	r13, r9
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <_fpadd_parts+0x192>
    14d0:	82 15       	cp	r24, r2
    14d2:	93 05       	cpc	r25, r3
    14d4:	2c f0       	brlt	.+10     	; 0x14e0 <_fpadd_parts+0x18c>
    14d6:	1c 01       	movw	r2, r24
    14d8:	aa 24       	eor	r10, r10
    14da:	bb 24       	eor	r11, r11
    14dc:	65 01       	movw	r12, r10
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <_fpadd_parts+0x192>
    14e0:	ee 24       	eor	r14, r14
    14e2:	ff 24       	eor	r15, r15
    14e4:	87 01       	movw	r16, r14
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	9c 91       	ld	r25, X
    14ea:	d2 01       	movw	r26, r4
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	8c 91       	ld	r24, X
    14f0:	98 17       	cp	r25, r24
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <_fpadd_parts+0x1a2>
    14f4:	45 c0       	rjmp	.+138    	; 0x1580 <_fpadd_parts+0x22c>
    14f6:	99 23       	and	r25, r25
    14f8:	39 f0       	breq	.+14     	; 0x1508 <_fpadd_parts+0x1b4>
    14fa:	a8 01       	movw	r20, r16
    14fc:	97 01       	movw	r18, r14
    14fe:	2a 19       	sub	r18, r10
    1500:	3b 09       	sbc	r19, r11
    1502:	4c 09       	sbc	r20, r12
    1504:	5d 09       	sbc	r21, r13
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <_fpadd_parts+0x1c0>
    1508:	a6 01       	movw	r20, r12
    150a:	95 01       	movw	r18, r10
    150c:	2e 19       	sub	r18, r14
    150e:	3f 09       	sbc	r19, r15
    1510:	40 0b       	sbc	r20, r16
    1512:	51 0b       	sbc	r21, r17
    1514:	57 fd       	sbrc	r21, 7
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <_fpadd_parts+0x1d4>
    1518:	11 82       	std	Z+1, r1	; 0x01
    151a:	33 82       	std	Z+3, r3	; 0x03
    151c:	22 82       	std	Z+2, r2	; 0x02
    151e:	24 83       	std	Z+4, r18	; 0x04
    1520:	35 83       	std	Z+5, r19	; 0x05
    1522:	46 83       	std	Z+6, r20	; 0x06
    1524:	57 83       	std	Z+7, r21	; 0x07
    1526:	1d c0       	rjmp	.+58     	; 0x1562 <_fpadd_parts+0x20e>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	81 83       	std	Z+1, r24	; 0x01
    152c:	33 82       	std	Z+3, r3	; 0x03
    152e:	22 82       	std	Z+2, r2	; 0x02
    1530:	88 27       	eor	r24, r24
    1532:	99 27       	eor	r25, r25
    1534:	dc 01       	movw	r26, r24
    1536:	82 1b       	sub	r24, r18
    1538:	93 0b       	sbc	r25, r19
    153a:	a4 0b       	sbc	r26, r20
    153c:	b5 0b       	sbc	r27, r21
    153e:	84 83       	std	Z+4, r24	; 0x04
    1540:	95 83       	std	Z+5, r25	; 0x05
    1542:	a6 83       	std	Z+6, r26	; 0x06
    1544:	b7 83       	std	Z+7, r27	; 0x07
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <_fpadd_parts+0x20e>
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	44 1f       	adc	r20, r20
    154e:	55 1f       	adc	r21, r21
    1550:	24 83       	std	Z+4, r18	; 0x04
    1552:	35 83       	std	Z+5, r19	; 0x05
    1554:	46 83       	std	Z+6, r20	; 0x06
    1556:	57 83       	std	Z+7, r21	; 0x07
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	93 83       	std	Z+3, r25	; 0x03
    1560:	82 83       	std	Z+2, r24	; 0x02
    1562:	24 81       	ldd	r18, Z+4	; 0x04
    1564:	35 81       	ldd	r19, Z+5	; 0x05
    1566:	46 81       	ldd	r20, Z+6	; 0x06
    1568:	57 81       	ldd	r21, Z+7	; 0x07
    156a:	da 01       	movw	r26, r20
    156c:	c9 01       	movw	r24, r18
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	a1 09       	sbc	r26, r1
    1572:	b1 09       	sbc	r27, r1
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	af 4f       	sbci	r26, 0xFF	; 255
    157a:	bf 43       	sbci	r27, 0x3F	; 63
    157c:	28 f3       	brcs	.-54     	; 0x1548 <_fpadd_parts+0x1f4>
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <_fpadd_parts+0x242>
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	33 82       	std	Z+3, r3	; 0x03
    1584:	22 82       	std	Z+2, r2	; 0x02
    1586:	ea 0c       	add	r14, r10
    1588:	fb 1c       	adc	r15, r11
    158a:	0c 1d       	adc	r16, r12
    158c:	1d 1d       	adc	r17, r13
    158e:	e4 82       	std	Z+4, r14	; 0x04
    1590:	f5 82       	std	Z+5, r15	; 0x05
    1592:	06 83       	std	Z+6, r16	; 0x06
    1594:	17 83       	std	Z+7, r17	; 0x07
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	80 83       	st	Z, r24
    159a:	24 81       	ldd	r18, Z+4	; 0x04
    159c:	35 81       	ldd	r19, Z+5	; 0x05
    159e:	46 81       	ldd	r20, Z+6	; 0x06
    15a0:	57 81       	ldd	r21, Z+7	; 0x07
    15a2:	57 ff       	sbrs	r21, 7
    15a4:	1a c0       	rjmp	.+52     	; 0x15da <_fpadd_parts+0x286>
    15a6:	c9 01       	movw	r24, r18
    15a8:	aa 27       	eor	r26, r26
    15aa:	97 fd       	sbrc	r25, 7
    15ac:	a0 95       	com	r26
    15ae:	ba 2f       	mov	r27, r26
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	90 70       	andi	r25, 0x00	; 0
    15b4:	a0 70       	andi	r26, 0x00	; 0
    15b6:	b0 70       	andi	r27, 0x00	; 0
    15b8:	56 95       	lsr	r21
    15ba:	47 95       	ror	r20
    15bc:	37 95       	ror	r19
    15be:	27 95       	ror	r18
    15c0:	82 2b       	or	r24, r18
    15c2:	93 2b       	or	r25, r19
    15c4:	a4 2b       	or	r26, r20
    15c6:	b5 2b       	or	r27, r21
    15c8:	84 83       	std	Z+4, r24	; 0x04
    15ca:	95 83       	std	Z+5, r25	; 0x05
    15cc:	a6 83       	std	Z+6, r26	; 0x06
    15ce:	b7 83       	std	Z+7, r27	; 0x07
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	93 83       	std	Z+3, r25	; 0x03
    15d8:	82 83       	std	Z+2, r24	; 0x02
    15da:	df 01       	movw	r26, r30
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <_fpadd_parts+0x28c>
    15de:	d2 01       	movw	r26, r4
    15e0:	cd 01       	movw	r24, r26
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	e2 e1       	ldi	r30, 0x12	; 18
    15e8:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__epilogue_restores__>

000015ec <__subsf3>:
    15ec:	a0 e2       	ldi	r26, 0x20	; 32
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ec ef       	ldi	r30, 0xFC	; 252
    15f2:	fa e0       	ldi	r31, 0x0A	; 10
    15f4:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__prologue_saves__+0x18>
    15f8:	69 83       	std	Y+1, r22	; 0x01
    15fa:	7a 83       	std	Y+2, r23	; 0x02
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	2d 83       	std	Y+5, r18	; 0x05
    1602:	3e 83       	std	Y+6, r19	; 0x06
    1604:	4f 83       	std	Y+7, r20	; 0x07
    1606:	58 87       	std	Y+8, r21	; 0x08
    1608:	e9 e0       	ldi	r30, 0x09	; 9
    160a:	ee 2e       	mov	r14, r30
    160c:	f1 2c       	mov	r15, r1
    160e:	ec 0e       	add	r14, r28
    1610:	fd 1e       	adc	r15, r29
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	b7 01       	movw	r22, r14
    1618:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    161c:	8e 01       	movw	r16, r28
    161e:	0f 5e       	subi	r16, 0xEF	; 239
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	ce 01       	movw	r24, r28
    1624:	05 96       	adiw	r24, 0x05	; 5
    1626:	b8 01       	movw	r22, r16
    1628:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    162c:	8a 89       	ldd	r24, Y+18	; 0x12
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	89 27       	eor	r24, r25
    1632:	8a 8b       	std	Y+18, r24	; 0x12
    1634:	c7 01       	movw	r24, r14
    1636:	b8 01       	movw	r22, r16
    1638:	ae 01       	movw	r20, r28
    163a:	47 5e       	subi	r20, 0xE7	; 231
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	0e 94 aa 09 	call	0x1354	; 0x1354 <_fpadd_parts>
    1642:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__pack_f>
    1646:	a0 96       	adiw	r28, 0x20	; 32
    1648:	e6 e0       	ldi	r30, 0x06	; 6
    164a:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__epilogue_restores__+0x18>

0000164e <__addsf3>:
    164e:	a0 e2       	ldi	r26, 0x20	; 32
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ed e2       	ldi	r30, 0x2D	; 45
    1654:	fb e0       	ldi	r31, 0x0B	; 11
    1656:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__prologue_saves__+0x18>
    165a:	69 83       	std	Y+1, r22	; 0x01
    165c:	7a 83       	std	Y+2, r23	; 0x02
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	2d 83       	std	Y+5, r18	; 0x05
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	4f 83       	std	Y+7, r20	; 0x07
    1668:	58 87       	std	Y+8, r21	; 0x08
    166a:	f9 e0       	ldi	r31, 0x09	; 9
    166c:	ef 2e       	mov	r14, r31
    166e:	f1 2c       	mov	r15, r1
    1670:	ec 0e       	add	r14, r28
    1672:	fd 1e       	adc	r15, r29
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	b7 01       	movw	r22, r14
    167a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    167e:	8e 01       	movw	r16, r28
    1680:	0f 5e       	subi	r16, 0xEF	; 239
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	ce 01       	movw	r24, r28
    1686:	05 96       	adiw	r24, 0x05	; 5
    1688:	b8 01       	movw	r22, r16
    168a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    168e:	c7 01       	movw	r24, r14
    1690:	b8 01       	movw	r22, r16
    1692:	ae 01       	movw	r20, r28
    1694:	47 5e       	subi	r20, 0xE7	; 231
    1696:	5f 4f       	sbci	r21, 0xFF	; 255
    1698:	0e 94 aa 09 	call	0x1354	; 0x1354 <_fpadd_parts>
    169c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__pack_f>
    16a0:	a0 96       	adiw	r28, 0x20	; 32
    16a2:	e6 e0       	ldi	r30, 0x06	; 6
    16a4:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__epilogue_restores__+0x18>

000016a8 <__divsf3>:
    16a8:	a8 e1       	ldi	r26, 0x18	; 24
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ea e5       	ldi	r30, 0x5A	; 90
    16ae:	fb e0       	ldi	r31, 0x0B	; 11
    16b0:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__prologue_saves__+0x10>
    16b4:	69 83       	std	Y+1, r22	; 0x01
    16b6:	7a 83       	std	Y+2, r23	; 0x02
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	2d 83       	std	Y+5, r18	; 0x05
    16be:	3e 83       	std	Y+6, r19	; 0x06
    16c0:	4f 83       	std	Y+7, r20	; 0x07
    16c2:	58 87       	std	Y+8, r21	; 0x08
    16c4:	b9 e0       	ldi	r27, 0x09	; 9
    16c6:	eb 2e       	mov	r14, r27
    16c8:	f1 2c       	mov	r15, r1
    16ca:	ec 0e       	add	r14, r28
    16cc:	fd 1e       	adc	r15, r29
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	b7 01       	movw	r22, r14
    16d4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    16d8:	8e 01       	movw	r16, r28
    16da:	0f 5e       	subi	r16, 0xEF	; 239
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	ce 01       	movw	r24, r28
    16e0:	05 96       	adiw	r24, 0x05	; 5
    16e2:	b8 01       	movw	r22, r16
    16e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    16e8:	29 85       	ldd	r18, Y+9	; 0x09
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <__divsf3+0x48>
    16ee:	7e c0       	rjmp	.+252    	; 0x17ec <__divsf3+0x144>
    16f0:	39 89       	ldd	r19, Y+17	; 0x11
    16f2:	32 30       	cpi	r19, 0x02	; 2
    16f4:	10 f4       	brcc	.+4      	; 0x16fa <__divsf3+0x52>
    16f6:	b8 01       	movw	r22, r16
    16f8:	7c c0       	rjmp	.+248    	; 0x17f2 <__divsf3+0x14a>
    16fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fc:	9a 89       	ldd	r25, Y+18	; 0x12
    16fe:	89 27       	eor	r24, r25
    1700:	8a 87       	std	Y+10, r24	; 0x0a
    1702:	24 30       	cpi	r18, 0x04	; 4
    1704:	11 f0       	breq	.+4      	; 0x170a <__divsf3+0x62>
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 f4       	brne	.+12     	; 0x1716 <__divsf3+0x6e>
    170a:	23 17       	cp	r18, r19
    170c:	09 f0       	breq	.+2      	; 0x1710 <__divsf3+0x68>
    170e:	6e c0       	rjmp	.+220    	; 0x17ec <__divsf3+0x144>
    1710:	60 e1       	ldi	r22, 0x10	; 16
    1712:	72 e0       	ldi	r23, 0x02	; 2
    1714:	6e c0       	rjmp	.+220    	; 0x17f2 <__divsf3+0x14a>
    1716:	34 30       	cpi	r19, 0x04	; 4
    1718:	39 f4       	brne	.+14     	; 0x1728 <__divsf3+0x80>
    171a:	1d 86       	std	Y+13, r1	; 0x0d
    171c:	1e 86       	std	Y+14, r1	; 0x0e
    171e:	1f 86       	std	Y+15, r1	; 0x0f
    1720:	18 8a       	std	Y+16, r1	; 0x10
    1722:	1c 86       	std	Y+12, r1	; 0x0c
    1724:	1b 86       	std	Y+11, r1	; 0x0b
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__divsf3+0x88>
    1728:	32 30       	cpi	r19, 0x02	; 2
    172a:	21 f4       	brne	.+8      	; 0x1734 <__divsf3+0x8c>
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	89 87       	std	Y+9, r24	; 0x09
    1730:	b7 01       	movw	r22, r14
    1732:	5f c0       	rjmp	.+190    	; 0x17f2 <__divsf3+0x14a>
    1734:	2b 85       	ldd	r18, Y+11	; 0x0b
    1736:	3c 85       	ldd	r19, Y+12	; 0x0c
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	9c 89       	ldd	r25, Y+20	; 0x14
    173c:	28 1b       	sub	r18, r24
    173e:	39 0b       	sbc	r19, r25
    1740:	3c 87       	std	Y+12, r19	; 0x0c
    1742:	2b 87       	std	Y+11, r18	; 0x0b
    1744:	ed 84       	ldd	r14, Y+13	; 0x0d
    1746:	fe 84       	ldd	r15, Y+14	; 0x0e
    1748:	0f 85       	ldd	r16, Y+15	; 0x0f
    174a:	18 89       	ldd	r17, Y+16	; 0x10
    174c:	ad 88       	ldd	r10, Y+21	; 0x15
    174e:	be 88       	ldd	r11, Y+22	; 0x16
    1750:	cf 88       	ldd	r12, Y+23	; 0x17
    1752:	d8 8c       	ldd	r13, Y+24	; 0x18
    1754:	ea 14       	cp	r14, r10
    1756:	fb 04       	cpc	r15, r11
    1758:	0c 05       	cpc	r16, r12
    175a:	1d 05       	cpc	r17, r13
    175c:	40 f4       	brcc	.+16     	; 0x176e <__divsf3+0xc6>
    175e:	ee 0c       	add	r14, r14
    1760:	ff 1c       	adc	r15, r15
    1762:	00 1f       	adc	r16, r16
    1764:	11 1f       	adc	r17, r17
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	30 40       	sbci	r19, 0x00	; 0
    176a:	3c 87       	std	Y+12, r19	; 0x0c
    176c:	2b 87       	std	Y+11, r18	; 0x0b
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e4       	ldi	r27, 0x40	; 64
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	ea 14       	cp	r14, r10
    1784:	fb 04       	cpc	r15, r11
    1786:	0c 05       	cpc	r16, r12
    1788:	1d 05       	cpc	r17, r13
    178a:	40 f0       	brcs	.+16     	; 0x179c <__divsf3+0xf4>
    178c:	28 2b       	or	r18, r24
    178e:	39 2b       	or	r19, r25
    1790:	4a 2b       	or	r20, r26
    1792:	5b 2b       	or	r21, r27
    1794:	ea 18       	sub	r14, r10
    1796:	fb 08       	sbc	r15, r11
    1798:	0c 09       	sbc	r16, r12
    179a:	1d 09       	sbc	r17, r13
    179c:	b6 95       	lsr	r27
    179e:	a7 95       	ror	r26
    17a0:	97 95       	ror	r25
    17a2:	87 95       	ror	r24
    17a4:	ee 0c       	add	r14, r14
    17a6:	ff 1c       	adc	r15, r15
    17a8:	00 1f       	adc	r16, r16
    17aa:	11 1f       	adc	r17, r17
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	6f 31       	cpi	r22, 0x1F	; 31
    17b2:	71 05       	cpc	r23, r1
    17b4:	31 f7       	brne	.-52     	; 0x1782 <__divsf3+0xda>
    17b6:	da 01       	movw	r26, r20
    17b8:	c9 01       	movw	r24, r18
    17ba:	8f 77       	andi	r24, 0x7F	; 127
    17bc:	90 70       	andi	r25, 0x00	; 0
    17be:	a0 70       	andi	r26, 0x00	; 0
    17c0:	b0 70       	andi	r27, 0x00	; 0
    17c2:	80 34       	cpi	r24, 0x40	; 64
    17c4:	91 05       	cpc	r25, r1
    17c6:	a1 05       	cpc	r26, r1
    17c8:	b1 05       	cpc	r27, r1
    17ca:	61 f4       	brne	.+24     	; 0x17e4 <__divsf3+0x13c>
    17cc:	27 fd       	sbrc	r18, 7
    17ce:	0a c0       	rjmp	.+20     	; 0x17e4 <__divsf3+0x13c>
    17d0:	e1 14       	cp	r14, r1
    17d2:	f1 04       	cpc	r15, r1
    17d4:	01 05       	cpc	r16, r1
    17d6:	11 05       	cpc	r17, r1
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <__divsf3+0x13c>
    17da:	20 5c       	subi	r18, 0xC0	; 192
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	4f 4f       	sbci	r20, 0xFF	; 255
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	20 78       	andi	r18, 0x80	; 128
    17e4:	2d 87       	std	Y+13, r18	; 0x0d
    17e6:	3e 87       	std	Y+14, r19	; 0x0e
    17e8:	4f 87       	std	Y+15, r20	; 0x0f
    17ea:	58 8b       	std	Y+16, r21	; 0x10
    17ec:	be 01       	movw	r22, r28
    17ee:	67 5f       	subi	r22, 0xF7	; 247
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	cb 01       	movw	r24, r22
    17f4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__pack_f>
    17f8:	68 96       	adiw	r28, 0x18	; 24
    17fa:	ea e0       	ldi	r30, 0x0A	; 10
    17fc:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__epilogue_restores__+0x10>

00001800 <__gesf2>:
    1800:	a8 e1       	ldi	r26, 0x18	; 24
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e6 e0       	ldi	r30, 0x06	; 6
    1806:	fc e0       	ldi	r31, 0x0C	; 12
    1808:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__prologue_saves__+0x18>
    180c:	69 83       	std	Y+1, r22	; 0x01
    180e:	7a 83       	std	Y+2, r23	; 0x02
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	2d 83       	std	Y+5, r18	; 0x05
    1816:	3e 83       	std	Y+6, r19	; 0x06
    1818:	4f 83       	std	Y+7, r20	; 0x07
    181a:	58 87       	std	Y+8, r21	; 0x08
    181c:	89 e0       	ldi	r24, 0x09	; 9
    181e:	e8 2e       	mov	r14, r24
    1820:	f1 2c       	mov	r15, r1
    1822:	ec 0e       	add	r14, r28
    1824:	fd 1e       	adc	r15, r29
    1826:	ce 01       	movw	r24, r28
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	b7 01       	movw	r22, r14
    182c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    1830:	8e 01       	movw	r16, r28
    1832:	0f 5e       	subi	r16, 0xEF	; 239
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	ce 01       	movw	r24, r28
    1838:	05 96       	adiw	r24, 0x05	; 5
    183a:	b8 01       	movw	r22, r16
    183c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	40 f0       	brcs	.+16     	; 0x1856 <__gesf2+0x56>
    1846:	89 89       	ldd	r24, Y+17	; 0x11
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	28 f0       	brcs	.+10     	; 0x1856 <__gesf2+0x56>
    184c:	c7 01       	movw	r24, r14
    184e:	b8 01       	movw	r22, r16
    1850:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__fpcmp_parts_f>
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <__gesf2+0x58>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	68 96       	adiw	r28, 0x18	; 24
    185a:	e6 e0       	ldi	r30, 0x06	; 6
    185c:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__epilogue_restores__+0x18>

00001860 <__fixsfsi>:
    1860:	ac e0       	ldi	r26, 0x0C	; 12
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e6 e3       	ldi	r30, 0x36	; 54
    1866:	fc e0       	ldi	r31, 0x0C	; 12
    1868:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__prologue_saves__+0x20>
    186c:	69 83       	std	Y+1, r22	; 0x01
    186e:	7a 83       	std	Y+2, r23	; 0x02
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	ce 01       	movw	r24, r28
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	be 01       	movw	r22, r28
    187a:	6b 5f       	subi	r22, 0xFB	; 251
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__unpack_f>
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	61 f1       	breq	.+88     	; 0x18e0 <__fixsfsi+0x80>
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	50 f1       	brcs	.+84     	; 0x18e0 <__fixsfsi+0x80>
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	21 f4       	brne	.+8      	; 0x1898 <__fixsfsi+0x38>
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	88 23       	and	r24, r24
    1894:	51 f1       	breq	.+84     	; 0x18ea <__fixsfsi+0x8a>
    1896:	2e c0       	rjmp	.+92     	; 0x18f4 <__fixsfsi+0x94>
    1898:	2f 81       	ldd	r18, Y+7	; 0x07
    189a:	38 85       	ldd	r19, Y+8	; 0x08
    189c:	37 fd       	sbrc	r19, 7
    189e:	20 c0       	rjmp	.+64     	; 0x18e0 <__fixsfsi+0x80>
    18a0:	6e 81       	ldd	r22, Y+6	; 0x06
    18a2:	2f 31       	cpi	r18, 0x1F	; 31
    18a4:	31 05       	cpc	r19, r1
    18a6:	1c f0       	brlt	.+6      	; 0x18ae <__fixsfsi+0x4e>
    18a8:	66 23       	and	r22, r22
    18aa:	f9 f0       	breq	.+62     	; 0x18ea <__fixsfsi+0x8a>
    18ac:	23 c0       	rjmp	.+70     	; 0x18f4 <__fixsfsi+0x94>
    18ae:	8e e1       	ldi	r24, 0x1E	; 30
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	82 1b       	sub	r24, r18
    18b4:	93 0b       	sbc	r25, r19
    18b6:	29 85       	ldd	r18, Y+9	; 0x09
    18b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    18bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <__fixsfsi+0x68>
    18c0:	56 95       	lsr	r21
    18c2:	47 95       	ror	r20
    18c4:	37 95       	ror	r19
    18c6:	27 95       	ror	r18
    18c8:	8a 95       	dec	r24
    18ca:	d2 f7       	brpl	.-12     	; 0x18c0 <__fixsfsi+0x60>
    18cc:	66 23       	and	r22, r22
    18ce:	b1 f0       	breq	.+44     	; 0x18fc <__fixsfsi+0x9c>
    18d0:	50 95       	com	r21
    18d2:	40 95       	com	r20
    18d4:	30 95       	com	r19
    18d6:	21 95       	neg	r18
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
    18da:	4f 4f       	sbci	r20, 0xFF	; 255
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <__fixsfsi+0x9c>
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <__fixsfsi+0x9c>
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f ef       	ldi	r20, 0xFF	; 255
    18f0:	5f e7       	ldi	r21, 0x7F	; 127
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__fixsfsi+0x9c>
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e8       	ldi	r21, 0x80	; 128
    18fc:	b9 01       	movw	r22, r18
    18fe:	ca 01       	movw	r24, r20
    1900:	2c 96       	adiw	r28, 0x0c	; 12
    1902:	e2 e0       	ldi	r30, 0x02	; 2
    1904:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__epilogue_restores__+0x20>

00001908 <__floatunsisf>:
    1908:	a8 e0       	ldi	r26, 0x08	; 8
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ea e8       	ldi	r30, 0x8A	; 138
    190e:	fc e0       	ldi	r31, 0x0C	; 12
    1910:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__prologue_saves__+0x10>
    1914:	7b 01       	movw	r14, r22
    1916:	8c 01       	movw	r16, r24
    1918:	61 15       	cp	r22, r1
    191a:	71 05       	cpc	r23, r1
    191c:	81 05       	cpc	r24, r1
    191e:	91 05       	cpc	r25, r1
    1920:	19 f4       	brne	.+6      	; 0x1928 <__floatunsisf+0x20>
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	60 c0       	rjmp	.+192    	; 0x19e8 <__floatunsisf+0xe0>
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	8e e1       	ldi	r24, 0x1E	; 30
    192e:	c8 2e       	mov	r12, r24
    1930:	d1 2c       	mov	r13, r1
    1932:	dc 82       	std	Y+4, r13	; 0x04
    1934:	cb 82       	std	Y+3, r12	; 0x03
    1936:	ed 82       	std	Y+5, r14	; 0x05
    1938:	fe 82       	std	Y+6, r15	; 0x06
    193a:	0f 83       	std	Y+7, r16	; 0x07
    193c:	18 87       	std	Y+8, r17	; 0x08
    193e:	c8 01       	movw	r24, r16
    1940:	b7 01       	movw	r22, r14
    1942:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__clzsi2>
    1946:	fc 01       	movw	r30, r24
    1948:	31 97       	sbiw	r30, 0x01	; 1
    194a:	f7 ff       	sbrs	r31, 7
    194c:	3b c0       	rjmp	.+118    	; 0x19c4 <__floatunsisf+0xbc>
    194e:	22 27       	eor	r18, r18
    1950:	33 27       	eor	r19, r19
    1952:	2e 1b       	sub	r18, r30
    1954:	3f 0b       	sbc	r19, r31
    1956:	57 01       	movw	r10, r14
    1958:	68 01       	movw	r12, r16
    195a:	02 2e       	mov	r0, r18
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <__floatunsisf+0x5e>
    195e:	d6 94       	lsr	r13
    1960:	c7 94       	ror	r12
    1962:	b7 94       	ror	r11
    1964:	a7 94       	ror	r10
    1966:	0a 94       	dec	r0
    1968:	d2 f7       	brpl	.-12     	; 0x195e <__floatunsisf+0x56>
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <__floatunsisf+0x7c>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	aa 1f       	adc	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	2a 95       	dec	r18
    1986:	d2 f7       	brpl	.-12     	; 0x197c <__floatunsisf+0x74>
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	a1 09       	sbc	r26, r1
    198c:	b1 09       	sbc	r27, r1
    198e:	8e 21       	and	r24, r14
    1990:	9f 21       	and	r25, r15
    1992:	a0 23       	and	r26, r16
    1994:	b1 23       	and	r27, r17
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	a1 05       	cpc	r26, r1
    199a:	b1 05       	cpc	r27, r1
    199c:	21 f0       	breq	.+8      	; 0x19a6 <__floatunsisf+0x9e>
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	4a 29       	or	r20, r10
    19a8:	5b 29       	or	r21, r11
    19aa:	6c 29       	or	r22, r12
    19ac:	7d 29       	or	r23, r13
    19ae:	4d 83       	std	Y+5, r20	; 0x05
    19b0:	5e 83       	std	Y+6, r21	; 0x06
    19b2:	6f 83       	std	Y+7, r22	; 0x07
    19b4:	78 87       	std	Y+8, r23	; 0x08
    19b6:	8e e1       	ldi	r24, 0x1E	; 30
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	8e 1b       	sub	r24, r30
    19bc:	9f 0b       	sbc	r25, r31
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	12 c0       	rjmp	.+36     	; 0x19e8 <__floatunsisf+0xe0>
    19c4:	30 97       	sbiw	r30, 0x00	; 0
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <__floatunsisf+0xe0>
    19c8:	0e 2e       	mov	r0, r30
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <__floatunsisf+0xcc>
    19cc:	ee 0c       	add	r14, r14
    19ce:	ff 1c       	adc	r15, r15
    19d0:	00 1f       	adc	r16, r16
    19d2:	11 1f       	adc	r17, r17
    19d4:	0a 94       	dec	r0
    19d6:	d2 f7       	brpl	.-12     	; 0x19cc <__floatunsisf+0xc4>
    19d8:	ed 82       	std	Y+5, r14	; 0x05
    19da:	fe 82       	std	Y+6, r15	; 0x06
    19dc:	0f 83       	std	Y+7, r16	; 0x07
    19de:	18 87       	std	Y+8, r17	; 0x08
    19e0:	ce 1a       	sub	r12, r30
    19e2:	df 0a       	sbc	r13, r31
    19e4:	dc 82       	std	Y+4, r13	; 0x04
    19e6:	cb 82       	std	Y+3, r12	; 0x03
    19e8:	1a 82       	std	Y+2, r1	; 0x02
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__pack_f>
    19f2:	28 96       	adiw	r28, 0x08	; 8
    19f4:	ea e0       	ldi	r30, 0x0A	; 10
    19f6:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__epilogue_restores__+0x10>

000019fa <__clzsi2>:
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	7b 01       	movw	r14, r22
    1a04:	8c 01       	movw	r16, r24
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	e8 16       	cp	r14, r24
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	f8 06       	cpc	r15, r24
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 07       	cpc	r16, r24
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	18 07       	cpc	r17, r24
    1a16:	88 f4       	brcc	.+34     	; 0x1a3a <__clzsi2+0x40>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	e8 16       	cp	r14, r24
    1a1c:	f1 04       	cpc	r15, r1
    1a1e:	01 05       	cpc	r16, r1
    1a20:	11 05       	cpc	r17, r1
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <__clzsi2+0x36>
    1a24:	28 f0       	brcs	.+10     	; 0x1a30 <__clzsi2+0x36>
    1a26:	88 e0       	ldi	r24, 0x08	; 8
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	17 c0       	rjmp	.+46     	; 0x1a5e <__clzsi2+0x64>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e0       	ldi	r26, 0x00	; 0
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	12 c0       	rjmp	.+36     	; 0x1a5e <__clzsi2+0x64>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	e8 16       	cp	r14, r24
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	f8 06       	cpc	r15, r24
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	08 07       	cpc	r16, r24
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	18 07       	cpc	r17, r24
    1a4a:	28 f0       	brcs	.+10     	; 0x1a56 <__clzsi2+0x5c>
    1a4c:	88 e1       	ldi	r24, 0x18	; 24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <__clzsi2+0x64>
    1a56:	80 e1       	ldi	r24, 0x10	; 16
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e0       	ldi	r26, 0x00	; 0
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	20 e2       	ldi	r18, 0x20	; 32
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	28 1b       	sub	r18, r24
    1a68:	39 0b       	sbc	r19, r25
    1a6a:	4a 0b       	sbc	r20, r26
    1a6c:	5b 0b       	sbc	r21, r27
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <__clzsi2+0x7e>
    1a70:	16 95       	lsr	r17
    1a72:	07 95       	ror	r16
    1a74:	f7 94       	ror	r15
    1a76:	e7 94       	ror	r14
    1a78:	8a 95       	dec	r24
    1a7a:	d2 f7       	brpl	.-12     	; 0x1a70 <__clzsi2+0x76>
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	e8 5e       	subi	r30, 0xE8	; 232
    1a80:	fd 4f       	sbci	r31, 0xFD	; 253
    1a82:	80 81       	ld	r24, Z
    1a84:	28 1b       	sub	r18, r24
    1a86:	31 09       	sbc	r19, r1
    1a88:	41 09       	sbc	r20, r1
    1a8a:	51 09       	sbc	r21, r1
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	08 95       	ret

00001a98 <__pack_f>:
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e4 80       	ldd	r14, Z+4	; 0x04
    1aa6:	f5 80       	ldd	r15, Z+5	; 0x05
    1aa8:	06 81       	ldd	r16, Z+6	; 0x06
    1aaa:	17 81       	ldd	r17, Z+7	; 0x07
    1aac:	d1 80       	ldd	r13, Z+1	; 0x01
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	48 f4       	brcc	.+18     	; 0x1ac6 <__pack_f+0x2e>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e1       	ldi	r26, 0x10	; 16
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e8 2a       	or	r14, r24
    1abe:	f9 2a       	or	r15, r25
    1ac0:	0a 2b       	or	r16, r26
    1ac2:	1b 2b       	or	r17, r27
    1ac4:	a5 c0       	rjmp	.+330    	; 0x1c10 <__pack_f+0x178>
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <__pack_f+0x34>
    1aca:	9f c0       	rjmp	.+318    	; 0x1c0a <__pack_f+0x172>
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <__pack_f+0x40>
    1ad0:	ee 24       	eor	r14, r14
    1ad2:	ff 24       	eor	r15, r15
    1ad4:	87 01       	movw	r16, r14
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <__pack_f+0x4a>
    1ad8:	e1 14       	cp	r14, r1
    1ada:	f1 04       	cpc	r15, r1
    1adc:	01 05       	cpc	r16, r1
    1ade:	11 05       	cpc	r17, r1
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <__pack_f+0x50>
    1ae2:	e0 e0       	ldi	r30, 0x00	; 0
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	96 c0       	rjmp	.+300    	; 0x1c14 <__pack_f+0x17c>
    1ae8:	62 81       	ldd	r22, Z+2	; 0x02
    1aea:	73 81       	ldd	r23, Z+3	; 0x03
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	62 38       	cpi	r22, 0x82	; 130
    1af0:	79 07       	cpc	r23, r25
    1af2:	0c f0       	brlt	.+2      	; 0x1af6 <__pack_f+0x5e>
    1af4:	5b c0       	rjmp	.+182    	; 0x1bac <__pack_f+0x114>
    1af6:	22 e8       	ldi	r18, 0x82	; 130
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	26 1b       	sub	r18, r22
    1afc:	37 0b       	sbc	r19, r23
    1afe:	2a 31       	cpi	r18, 0x1A	; 26
    1b00:	31 05       	cpc	r19, r1
    1b02:	2c f0       	brlt	.+10     	; 0x1b0e <__pack_f+0x76>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	2a c0       	rjmp	.+84     	; 0x1b62 <__pack_f+0xca>
    1b0e:	b8 01       	movw	r22, r16
    1b10:	a7 01       	movw	r20, r14
    1b12:	02 2e       	mov	r0, r18
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <__pack_f+0x86>
    1b16:	76 95       	lsr	r23
    1b18:	67 95       	ror	r22
    1b1a:	57 95       	ror	r21
    1b1c:	47 95       	ror	r20
    1b1e:	0a 94       	dec	r0
    1b20:	d2 f7       	brpl	.-12     	; 0x1b16 <__pack_f+0x7e>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e0       	ldi	r26, 0x00	; 0
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <__pack_f+0x9c>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	aa 1f       	adc	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	2a 95       	dec	r18
    1b36:	d2 f7       	brpl	.-12     	; 0x1b2c <__pack_f+0x94>
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	a1 09       	sbc	r26, r1
    1b3c:	b1 09       	sbc	r27, r1
    1b3e:	8e 21       	and	r24, r14
    1b40:	9f 21       	and	r25, r15
    1b42:	a0 23       	and	r26, r16
    1b44:	b1 23       	and	r27, r17
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	a1 05       	cpc	r26, r1
    1b4a:	b1 05       	cpc	r27, r1
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <__pack_f+0xbe>
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	9a 01       	movw	r18, r20
    1b58:	ab 01       	movw	r20, r22
    1b5a:	28 2b       	or	r18, r24
    1b5c:	39 2b       	or	r19, r25
    1b5e:	4a 2b       	or	r20, r26
    1b60:	5b 2b       	or	r21, r27
    1b62:	da 01       	movw	r26, r20
    1b64:	c9 01       	movw	r24, r18
    1b66:	8f 77       	andi	r24, 0x7F	; 127
    1b68:	90 70       	andi	r25, 0x00	; 0
    1b6a:	a0 70       	andi	r26, 0x00	; 0
    1b6c:	b0 70       	andi	r27, 0x00	; 0
    1b6e:	80 34       	cpi	r24, 0x40	; 64
    1b70:	91 05       	cpc	r25, r1
    1b72:	a1 05       	cpc	r26, r1
    1b74:	b1 05       	cpc	r27, r1
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <__pack_f+0xee>
    1b78:	27 ff       	sbrs	r18, 7
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <__pack_f+0xf6>
    1b7c:	20 5c       	subi	r18, 0xC0	; 192
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	4f 4f       	sbci	r20, 0xFF	; 255
    1b82:	5f 4f       	sbci	r21, 0xFF	; 255
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__pack_f+0xf6>
    1b86:	21 5c       	subi	r18, 0xC1	; 193
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	e0 e0       	ldi	r30, 0x00	; 0
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	20 30       	cpi	r18, 0x00	; 0
    1b94:	a0 e0       	ldi	r26, 0x00	; 0
    1b96:	3a 07       	cpc	r19, r26
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	4a 07       	cpc	r20, r26
    1b9c:	a0 e4       	ldi	r26, 0x40	; 64
    1b9e:	5a 07       	cpc	r21, r26
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <__pack_f+0x10e>
    1ba2:	e1 e0       	ldi	r30, 0x01	; 1
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	79 01       	movw	r14, r18
    1ba8:	8a 01       	movw	r16, r20
    1baa:	27 c0       	rjmp	.+78     	; 0x1bfa <__pack_f+0x162>
    1bac:	60 38       	cpi	r22, 0x80	; 128
    1bae:	71 05       	cpc	r23, r1
    1bb0:	64 f5       	brge	.+88     	; 0x1c0a <__pack_f+0x172>
    1bb2:	fb 01       	movw	r30, r22
    1bb4:	e1 58       	subi	r30, 0x81	; 129
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	d8 01       	movw	r26, r16
    1bba:	c7 01       	movw	r24, r14
    1bbc:	8f 77       	andi	r24, 0x7F	; 127
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	a0 70       	andi	r26, 0x00	; 0
    1bc2:	b0 70       	andi	r27, 0x00	; 0
    1bc4:	80 34       	cpi	r24, 0x40	; 64
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	a1 05       	cpc	r26, r1
    1bca:	b1 05       	cpc	r27, r1
    1bcc:	39 f4       	brne	.+14     	; 0x1bdc <__pack_f+0x144>
    1bce:	e7 fe       	sbrs	r14, 7
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <__pack_f+0x154>
    1bd2:	80 e4       	ldi	r24, 0x40	; 64
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <__pack_f+0x14c>
    1bdc:	8f e3       	ldi	r24, 0x3F	; 63
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 0e       	add	r14, r24
    1be6:	f9 1e       	adc	r15, r25
    1be8:	0a 1f       	adc	r16, r26
    1bea:	1b 1f       	adc	r17, r27
    1bec:	17 ff       	sbrs	r17, 7
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <__pack_f+0x162>
    1bf0:	16 95       	lsr	r17
    1bf2:	07 95       	ror	r16
    1bf4:	f7 94       	ror	r15
    1bf6:	e7 94       	ror	r14
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	16 95       	lsr	r17
    1bfe:	07 95       	ror	r16
    1c00:	f7 94       	ror	r15
    1c02:	e7 94       	ror	r14
    1c04:	8a 95       	dec	r24
    1c06:	d1 f7       	brne	.-12     	; 0x1bfc <__pack_f+0x164>
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__pack_f+0x17c>
    1c0a:	ee 24       	eor	r14, r14
    1c0c:	ff 24       	eor	r15, r15
    1c0e:	87 01       	movw	r16, r14
    1c10:	ef ef       	ldi	r30, 0xFF	; 255
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	6e 2f       	mov	r22, r30
    1c16:	67 95       	ror	r22
    1c18:	66 27       	eor	r22, r22
    1c1a:	67 95       	ror	r22
    1c1c:	90 2f       	mov	r25, r16
    1c1e:	9f 77       	andi	r25, 0x7F	; 127
    1c20:	d7 94       	ror	r13
    1c22:	dd 24       	eor	r13, r13
    1c24:	d7 94       	ror	r13
    1c26:	8e 2f       	mov	r24, r30
    1c28:	86 95       	lsr	r24
    1c2a:	49 2f       	mov	r20, r25
    1c2c:	46 2b       	or	r20, r22
    1c2e:	58 2f       	mov	r21, r24
    1c30:	5d 29       	or	r21, r13
    1c32:	b7 01       	movw	r22, r14
    1c34:	ca 01       	movw	r24, r20
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	08 95       	ret

00001c42 <__unpack_f>:
    1c42:	fc 01       	movw	r30, r24
    1c44:	db 01       	movw	r26, r22
    1c46:	40 81       	ld	r20, Z
    1c48:	51 81       	ldd	r21, Z+1	; 0x01
    1c4a:	22 81       	ldd	r18, Z+2	; 0x02
    1c4c:	62 2f       	mov	r22, r18
    1c4e:	6f 77       	andi	r22, 0x7F	; 127
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	22 1f       	adc	r18, r18
    1c54:	22 27       	eor	r18, r18
    1c56:	22 1f       	adc	r18, r18
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	89 2f       	mov	r24, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	82 2b       	or	r24, r18
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	99 1f       	adc	r25, r25
    1c66:	99 27       	eor	r25, r25
    1c68:	99 1f       	adc	r25, r25
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	9c 93       	st	X, r25
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	21 15       	cp	r18, r1
    1c72:	31 05       	cpc	r19, r1
    1c74:	a9 f5       	brne	.+106    	; 0x1ce0 <__unpack_f+0x9e>
    1c76:	41 15       	cp	r20, r1
    1c78:	51 05       	cpc	r21, r1
    1c7a:	61 05       	cpc	r22, r1
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <__unpack_f+0x42>
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	37 c0       	rjmp	.+110    	; 0x1cf2 <__unpack_f+0xb0>
    1c84:	82 e8       	ldi	r24, 0x82	; 130
    1c86:	9f ef       	ldi	r25, 0xFF	; 255
    1c88:	13 96       	adiw	r26, 0x03	; 3
    1c8a:	9c 93       	st	X, r25
    1c8c:	8e 93       	st	-X, r24
    1c8e:	12 97       	sbiw	r26, 0x02	; 2
    1c90:	9a 01       	movw	r18, r20
    1c92:	ab 01       	movw	r20, r22
    1c94:	67 e0       	ldi	r22, 0x07	; 7
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	44 1f       	adc	r20, r20
    1c9c:	55 1f       	adc	r21, r21
    1c9e:	6a 95       	dec	r22
    1ca0:	d1 f7       	brne	.-12     	; 0x1c96 <__unpack_f+0x54>
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	8c 93       	st	X, r24
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <__unpack_f+0x80>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	12 96       	adiw	r26, 0x02	; 2
    1cb2:	8d 91       	ld	r24, X+
    1cb4:	9c 91       	ld	r25, X
    1cb6:	13 97       	sbiw	r26, 0x03	; 3
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	13 96       	adiw	r26, 0x03	; 3
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24
    1cc0:	12 97       	sbiw	r26, 0x02	; 2
    1cc2:	20 30       	cpi	r18, 0x00	; 0
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	38 07       	cpc	r19, r24
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	48 07       	cpc	r20, r24
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	58 07       	cpc	r21, r24
    1cd0:	58 f3       	brcs	.-42     	; 0x1ca8 <__unpack_f+0x66>
    1cd2:	14 96       	adiw	r26, 0x04	; 4
    1cd4:	2d 93       	st	X+, r18
    1cd6:	3d 93       	st	X+, r19
    1cd8:	4d 93       	st	X+, r20
    1cda:	5c 93       	st	X, r21
    1cdc:	17 97       	sbiw	r26, 0x07	; 7
    1cde:	08 95       	ret
    1ce0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	79 f4       	brne	.+30     	; 0x1d04 <__unpack_f+0xc2>
    1ce6:	41 15       	cp	r20, r1
    1ce8:	51 05       	cpc	r21, r1
    1cea:	61 05       	cpc	r22, r1
    1cec:	71 05       	cpc	r23, r1
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <__unpack_f+0xb4>
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	8c 93       	st	X, r24
    1cf4:	08 95       	ret
    1cf6:	64 ff       	sbrs	r22, 4
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <__unpack_f+0xbe>
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	8c 93       	st	X, r24
    1cfe:	12 c0       	rjmp	.+36     	; 0x1d24 <__unpack_f+0xe2>
    1d00:	1c 92       	st	X, r1
    1d02:	10 c0       	rjmp	.+32     	; 0x1d24 <__unpack_f+0xe2>
    1d04:	2f 57       	subi	r18, 0x7F	; 127
    1d06:	30 40       	sbci	r19, 0x00	; 0
    1d08:	13 96       	adiw	r26, 0x03	; 3
    1d0a:	3c 93       	st	X, r19
    1d0c:	2e 93       	st	-X, r18
    1d0e:	12 97       	sbiw	r26, 0x02	; 2
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	8c 93       	st	X, r24
    1d14:	87 e0       	ldi	r24, 0x07	; 7
    1d16:	44 0f       	add	r20, r20
    1d18:	55 1f       	adc	r21, r21
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	8a 95       	dec	r24
    1d20:	d1 f7       	brne	.-12     	; 0x1d16 <__unpack_f+0xd4>
    1d22:	70 64       	ori	r23, 0x40	; 64
    1d24:	14 96       	adiw	r26, 0x04	; 4
    1d26:	4d 93       	st	X+, r20
    1d28:	5d 93       	st	X+, r21
    1d2a:	6d 93       	st	X+, r22
    1d2c:	7c 93       	st	X, r23
    1d2e:	17 97       	sbiw	r26, 0x07	; 7
    1d30:	08 95       	ret

00001d32 <__fpcmp_parts_f>:
    1d32:	1f 93       	push	r17
    1d34:	dc 01       	movw	r26, r24
    1d36:	fb 01       	movw	r30, r22
    1d38:	9c 91       	ld	r25, X
    1d3a:	92 30       	cpi	r25, 0x02	; 2
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <__fpcmp_parts_f+0xe>
    1d3e:	47 c0       	rjmp	.+142    	; 0x1dce <__fpcmp_parts_f+0x9c>
    1d40:	80 81       	ld	r24, Z
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <__fpcmp_parts_f+0x16>
    1d46:	43 c0       	rjmp	.+134    	; 0x1dce <__fpcmp_parts_f+0x9c>
    1d48:	94 30       	cpi	r25, 0x04	; 4
    1d4a:	51 f4       	brne	.+20     	; 0x1d60 <__fpcmp_parts_f+0x2e>
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	1c 91       	ld	r17, X
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	99 f5       	brne	.+102    	; 0x1dba <__fpcmp_parts_f+0x88>
    1d54:	81 81       	ldd	r24, Z+1	; 0x01
    1d56:	68 2f       	mov	r22, r24
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	61 1b       	sub	r22, r17
    1d5c:	71 09       	sbc	r23, r1
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <__fpcmp_parts_f+0xac>
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <__fpcmp_parts_f+0x3a>
    1d64:	92 30       	cpi	r25, 0x02	; 2
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <__fpcmp_parts_f+0x42>
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	b9 f1       	breq	.+110    	; 0x1dda <__fpcmp_parts_f+0xa8>
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	88 23       	and	r24, r24
    1d70:	89 f1       	breq	.+98     	; 0x1dd4 <__fpcmp_parts_f+0xa2>
    1d72:	2d c0       	rjmp	.+90     	; 0x1dce <__fpcmp_parts_f+0x9c>
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	1c 91       	ld	r17, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	f1 f0       	breq	.+60     	; 0x1dba <__fpcmp_parts_f+0x88>
    1d7e:	81 81       	ldd	r24, Z+1	; 0x01
    1d80:	18 17       	cp	r17, r24
    1d82:	d9 f4       	brne	.+54     	; 0x1dba <__fpcmp_parts_f+0x88>
    1d84:	12 96       	adiw	r26, 0x02	; 2
    1d86:	2d 91       	ld	r18, X+
    1d88:	3c 91       	ld	r19, X
    1d8a:	13 97       	sbiw	r26, 0x03	; 3
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	82 17       	cp	r24, r18
    1d92:	93 07       	cpc	r25, r19
    1d94:	94 f0       	brlt	.+36     	; 0x1dba <__fpcmp_parts_f+0x88>
    1d96:	28 17       	cp	r18, r24
    1d98:	39 07       	cpc	r19, r25
    1d9a:	bc f0       	brlt	.+46     	; 0x1dca <__fpcmp_parts_f+0x98>
    1d9c:	14 96       	adiw	r26, 0x04	; 4
    1d9e:	8d 91       	ld	r24, X+
    1da0:	9d 91       	ld	r25, X+
    1da2:	0d 90       	ld	r0, X+
    1da4:	bc 91       	ld	r27, X
    1da6:	a0 2d       	mov	r26, r0
    1da8:	24 81       	ldd	r18, Z+4	; 0x04
    1daa:	35 81       	ldd	r19, Z+5	; 0x05
    1dac:	46 81       	ldd	r20, Z+6	; 0x06
    1dae:	57 81       	ldd	r21, Z+7	; 0x07
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	4a 07       	cpc	r20, r26
    1db6:	5b 07       	cpc	r21, r27
    1db8:	18 f4       	brcc	.+6      	; 0x1dc0 <__fpcmp_parts_f+0x8e>
    1dba:	11 23       	and	r17, r17
    1dbc:	41 f0       	breq	.+16     	; 0x1dce <__fpcmp_parts_f+0x9c>
    1dbe:	0a c0       	rjmp	.+20     	; 0x1dd4 <__fpcmp_parts_f+0xa2>
    1dc0:	82 17       	cp	r24, r18
    1dc2:	93 07       	cpc	r25, r19
    1dc4:	a4 07       	cpc	r26, r20
    1dc6:	b5 07       	cpc	r27, r21
    1dc8:	40 f4       	brcc	.+16     	; 0x1dda <__fpcmp_parts_f+0xa8>
    1dca:	11 23       	and	r17, r17
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <__fpcmp_parts_f+0xa2>
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <__fpcmp_parts_f+0xac>
    1dd4:	6f ef       	ldi	r22, 0xFF	; 255
    1dd6:	7f ef       	ldi	r23, 0xFF	; 255
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <__fpcmp_parts_f+0xac>
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	cb 01       	movw	r24, r22
    1de0:	1f 91       	pop	r17
    1de2:	08 95       	ret

00001de4 <__udivmodhi4>:
    1de4:	aa 1b       	sub	r26, r26
    1de6:	bb 1b       	sub	r27, r27
    1de8:	51 e1       	ldi	r21, 0x11	; 17
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <__udivmodhi4_ep>

00001dec <__udivmodhi4_loop>:
    1dec:	aa 1f       	adc	r26, r26
    1dee:	bb 1f       	adc	r27, r27
    1df0:	a6 17       	cp	r26, r22
    1df2:	b7 07       	cpc	r27, r23
    1df4:	10 f0       	brcs	.+4      	; 0x1dfa <__udivmodhi4_ep>
    1df6:	a6 1b       	sub	r26, r22
    1df8:	b7 0b       	sbc	r27, r23

00001dfa <__udivmodhi4_ep>:
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	5a 95       	dec	r21
    1e00:	a9 f7       	brne	.-22     	; 0x1dec <__udivmodhi4_loop>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	08 95       	ret

00001e0c <__prologue_saves__>:
    1e0c:	2f 92       	push	r2
    1e0e:	3f 92       	push	r3
    1e10:	4f 92       	push	r4
    1e12:	5f 92       	push	r5
    1e14:	6f 92       	push	r6
    1e16:	7f 92       	push	r7
    1e18:	8f 92       	push	r8
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	ca 1b       	sub	r28, r26
    1e36:	db 0b       	sbc	r29, r27
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	19 94       	eijmp

00001e44 <__epilogue_restores__>:
    1e44:	2a 88       	ldd	r2, Y+18	; 0x12
    1e46:	39 88       	ldd	r3, Y+17	; 0x11
    1e48:	48 88       	ldd	r4, Y+16	; 0x10
    1e4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e56:	b9 84       	ldd	r11, Y+9	; 0x09
    1e58:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5a:	df 80       	ldd	r13, Y+7	; 0x07
    1e5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e60:	0c 81       	ldd	r16, Y+4	; 0x04
    1e62:	1b 81       	ldd	r17, Y+3	; 0x03
    1e64:	aa 81       	ldd	r26, Y+2	; 0x02
    1e66:	b9 81       	ldd	r27, Y+1	; 0x01
    1e68:	ce 0f       	add	r28, r30
    1e6a:	d1 1d       	adc	r29, r1
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	ed 01       	movw	r28, r26
    1e78:	08 95       	ret

00001e7a <_exit>:
    1e7a:	f8 94       	cli

00001e7c <__stop_program>:
    1e7c:	ff cf       	rjmp	.-2      	; 0x1e7c <__stop_program>
