
Bot_ReCharging.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800200  0000271a  000027ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000271a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800312  00800312  000028c0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000667  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024a9  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035f  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d8c  00000000  00000000  0000574f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  000074dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066a  00000000  00000000  0000792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d76  00000000  00000000  00007f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00008d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <ADC_Conversion+0x4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea e1       	ldi	r30, 0x1A	; 26
     17e:	f7 e2       	ldi	r31, 0x27	; 39
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 31       	cpi	r26, 0x12	; 18
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	14 e0       	ldi	r17, 0x04	; 4
     192:	a2 e1       	ldi	r26, 0x12	; 18
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 31       	cpi	r26, 0x18	; 24
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 01 08 	call	0x1002	; 0x1002 <main>
     1a4:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	fc 01       	movw	r30, r24
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	40 e3       	ldi	r20, 0x30	; 48
     1bc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	38 e4       	ldi	r19, 0x48	; 72
     1c4:	f9 01       	movw	r30, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1d6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d8:	42 9a       	sbi	0x08, 2	; 8
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1e0:	42 98       	cbi	0x08, 2	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ec:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	c9 01       	movw	r24, r18
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8

	
}
     20e:	08 95       	ret

00000210 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     216:	28 b1       	in	r18, 0x08	; 8
     218:	98 2f       	mov	r25, r24
     21a:	90 7f       	andi	r25, 0xF0	; 240
     21c:	92 2b       	or	r25, r18
     21e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     220:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     222:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	38 e4       	ldi	r19, 0x48	; 72
     22a:	f9 01       	movw	r30, r18
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     230:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	82 95       	swap	r24
     23c:	80 7f       	andi	r24, 0xF0	; 240
     23e:	98 2b       	or	r25, r24
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	c9 01       	movw	r24, r18
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     24e:	42 98       	cbi	0x08, 2	; 8
}
     250:	08 95       	ret

00000252 <lcd_init>:
     252:	86 e6       	ldi	r24, 0x66	; 102
     254:	9e e0       	ldi	r25, 0x0E	; 14
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     25a:	88 e2       	ldi	r24, 0x28	; 40
     25c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x01);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x06);
     266:	86 e0       	ldi	r24, 0x06	; 6
     268:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x0E);
     26c:	8e e0       	ldi	r24, 0x0E	; 14
     26e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
		
}
     278:	08 95       	ret

0000027a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     27a:	98 b1       	in	r25, 0x08	; 8
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     280:	28 b1       	in	r18, 0x08	; 8
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	92 2b       	or	r25, r18
     288:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     28e:	42 9a       	sbi	0x08, 2	; 8
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	38 e4       	ldi	r19, 0x48	; 72
     294:	f9 01       	movw	r30, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     29a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	98 2b       	or	r25, r24
     2aa:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ac:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ae:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	c9 01       	movw	r24, r18
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     2b8:	42 98       	cbi	0x08, 2	; 8
}
     2ba:	08 95       	ret

000002bc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2bc:	80 e8       	ldi	r24, 0x80	; 128
     2be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     2c2:	08 95       	ret

000002c4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
		str++;
     2d0:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	d1 f7       	brne	.-12     	; 0x2cc <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	69 f0       	breq	.+26     	; 0x2fc <lcd_cursor+0x1e>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <lcd_cursor+0xe>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	a9 f4       	brne	.+42     	; 0x314 <lcd_cursor+0x36>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <lcd_cursor+0x18>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	49 f0       	breq	.+18     	; 0x302 <lcd_cursor+0x24>
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	81 f4       	brne	.+32     	; 0x314 <lcd_cursor+0x36>
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2f6:	86 2f       	mov	r24, r22
     2f8:	81 58       	subi	r24, 0x81	; 129
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2fc:	86 2f       	mov	r24, r22
     2fe:	81 54       	subi	r24, 0x41	; 65
     300:	02 c0       	rjmp	.+4      	; 0x306 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     302:	86 2f       	mov	r24, r22
     304:	8d 56       	subi	r24, 0x6D	; 109
     306:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     30a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     30c:	86 2f       	mov	r24, r22
     30e:	8d 52       	subi	r24, 0x2D	; 45
     310:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     314:	08 95       	ret

00000316 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8a 01       	movw	r16, r20
     320:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     322:	88 23       	and	r24, r24
     324:	11 f0       	breq	.+4      	; 0x32a <lcd_print+0x14>
     326:	66 23       	and	r22, r22
     328:	19 f4       	brne	.+6      	; 0x330 <lcd_print+0x1a>
	{
		lcd_home();
     32a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_home>
     32e:	02 c0       	rjmp	.+4      	; 0x334 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     330:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_cursor>
	}
	if(digits==5 || flag==1)
     334:	c5 30       	cpi	r28, 0x05	; 5
     336:	d1 05       	cpc	r29, r1
     338:	71 f4       	brne	.+28     	; 0x356 <lcd_print+0x40>
	{
		million=value/10000+48;
     33a:	c8 01       	movw	r24, r16
     33c:	60 e1       	ldi	r22, 0x10	; 16
     33e:	77 e2       	ldi	r23, 0x27	; 39
     340:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     344:	cb 01       	movw	r24, r22
     346:	c0 96       	adiw	r24, 0x30	; 48
     348:	90 93 33 03 	sts	0x0333, r25
     34c:	80 93 32 03 	sts	0x0332, r24
		lcd_wr_char(million);
     350:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     354:	05 c0       	rjmp	.+10     	; 0x360 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     356:	c4 30       	cpi	r28, 0x04	; 4
     358:	d1 05       	cpc	r29, r1
     35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x4a>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	16 c0       	rjmp	.+44     	; 0x38c <lcd_print+0x76>
	{
		temp = value/1000;
     360:	c8 01       	movw	r24, r16
     362:	68 ee       	ldi	r22, 0xE8	; 232
     364:	73 e0       	ldi	r23, 0x03	; 3
     366:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     36a:	cb 01       	movw	r24, r22
     36c:	60 93 38 03 	sts	0x0338, r22
     370:	90 93 39 03 	sts	0x0339, r25
		thousand = temp%10 + 48;
     374:	6a e0       	ldi	r22, 0x0A	; 10
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     37c:	c0 96       	adiw	r24, 0x30	; 48
     37e:	90 93 17 04 	sts	0x0417, r25
     382:	80 93 16 04 	sts	0x0416, r24
		lcd_wr_char(thousand);
     386:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     38a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     38c:	c3 30       	cpi	r28, 0x03	; 3
     38e:	d1 05       	cpc	r29, r1
     390:	21 f0       	breq	.+8      	; 0x39a <lcd_print+0x84>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	11 f0       	breq	.+4      	; 0x39a <lcd_print+0x84>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	16 c0       	rjmp	.+44     	; 0x3c6 <lcd_print+0xb0>
	{
		temp = value/100;
     39a:	c8 01       	movw	r24, r16
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     3a4:	cb 01       	movw	r24, r22
     3a6:	60 93 38 03 	sts	0x0338, r22
     3aa:	90 93 39 03 	sts	0x0339, r25
		hundred = temp%10 + 48;
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     3b6:	c0 96       	adiw	r24, 0x30	; 48
     3b8:	90 93 10 04 	sts	0x0410, r25
     3bc:	80 93 0f 04 	sts	0x040F, r24
		lcd_wr_char(hundred);
     3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3c6:	c2 30       	cpi	r28, 0x02	; 2
     3c8:	d1 05       	cpc	r29, r1
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <lcd_print+0xbe>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <lcd_print+0xbe>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	16 c0       	rjmp	.+44     	; 0x400 <lcd_print+0xea>
	{
		temp = value/10;
     3d4:	c8 01       	movw	r24, r16
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     3de:	cb 01       	movw	r24, r22
     3e0:	60 93 38 03 	sts	0x0338, r22
     3e4:	90 93 39 03 	sts	0x0339, r25
		tens = temp%10 + 48;
     3e8:	6a e0       	ldi	r22, 0x0A	; 10
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     3f0:	c0 96       	adiw	r24, 0x30	; 48
     3f2:	90 93 46 03 	sts	0x0346, r25
     3f6:	80 93 45 03 	sts	0x0345, r24
		lcd_wr_char(tens);
     3fa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     400:	c1 30       	cpi	r28, 0x01	; 1
     402:	d1 05       	cpc	r29, r1
     404:	11 f0       	breq	.+4      	; 0x40a <lcd_print+0xf4>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	61 f4       	brne	.+24     	; 0x422 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     40a:	c8 01       	movw	r24, r16
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 15 04 	sts	0x0415, r25
     41a:	80 93 14 04 	sts	0x0414, r24
		lcd_wr_char(unit);
     41e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	if(digits>5)
     422:	26 97       	sbiw	r28, 0x06	; 6
     424:	1c f0       	brlt	.+6      	; 0x42c <lcd_print+0x116>
	{
		lcd_wr_char('E');
     426:	85 e4       	ldi	r24, 0x45	; 69
     428:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <getRow>:

// Getter method for rows
int getRow()
{
	return rowNum;
}
     436:	80 91 12 03 	lds	r24, 0x0312
     43a:	90 91 13 03 	lds	r25, 0x0313
     43e:	08 95       	ret

00000440 <getCol>:

// Getter method for cols
int getCol()
{
	return colNum;
}
     440:	80 91 14 03 	lds	r24, 0x0314
     444:	90 91 15 03 	lds	r25, 0x0315
     448:	08 95       	ret

0000044a <getDirection>:
//	West	--> 2
//	South	--> 3
int getDirection()
{
	return bot_direction;
}
     44a:	80 91 3d 03 	lds	r24, 0x033D
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret

00000452 <set_grid>:
//***************************************************//

// Setter method for Grid , Matrix
void set_grid(int row,int col)
{
	rows = row;
     452:	90 93 2f 03 	sts	0x032F, r25
     456:	80 93 2e 03 	sts	0x032E, r24
	cols = col;
     45a:	70 93 3c 03 	sts	0x033C, r23
     45e:	60 93 3b 03 	sts	0x033B, r22
}
     462:	08 95       	ret

00000464 <set_direction>:

// Setter method for Direction
void set_direction(int direction)
{
	bot_direction = direction;
     464:	80 93 3d 03 	sts	0x033D, r24
}
     468:	08 95       	ret

0000046a <check_loc>:
// Check valadity of location within grid
// 0 for false , i.e. Location is invalid
// 1 for True , i.e. Location is valid
int check_loc(int row,int col)
{
 if (row < (rows-1) && col < (cols-1))
     46a:	20 91 2e 03 	lds	r18, 0x032E
     46e:	30 91 2f 03 	lds	r19, 0x032F
     472:	21 50       	subi	r18, 0x01	; 1
     474:	30 40       	sbci	r19, 0x00	; 0
     476:	82 17       	cp	r24, r18
     478:	93 07       	cpc	r25, r19
     47a:	1c f0       	brlt	.+6      	; 0x482 <check_loc+0x18>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	0d c0       	rjmp	.+26     	; 0x49c <check_loc+0x32>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	80 91 3b 03 	lds	r24, 0x033B
     488:	90 91 3c 03 	lds	r25, 0x033C
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	68 17       	cp	r22, r24
     490:	79 07       	cpc	r23, r25
     492:	0c f0       	brlt	.+2      	; 0x496 <check_loc+0x2c>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	28 27       	eor	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
 }
 else
 {
	return 0;
 }
}
     49c:	c9 01       	movw	r24, r18
     49e:	08 95       	ret

000004a0 <update_bot_location>:

// Move bot forward by one unit in the given direction ( set in "bot_direction")
int update_bot_location()
{
	int tempRowNum = rowNum;
     4a0:	40 91 12 03 	lds	r20, 0x0312
     4a4:	50 91 13 03 	lds	r21, 0x0313
	int tempColNum = colNum;
     4a8:	20 91 14 03 	lds	r18, 0x0314
     4ac:	30 91 15 03 	lds	r19, 0x0315

	// Performing "unit motion" based on bot-direction

	if (bot_direction == east)
     4b0:	80 91 3d 03 	lds	r24, 0x033D
     4b4:	88 23       	and	r24, r24
     4b6:	19 f4       	brne	.+6      	; 0x4be <update_bot_location+0x1e>
	{
		tempColNum++;
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	0e c0       	rjmp	.+28     	; 0x4da <update_bot_location+0x3a>
	}
	else if(bot_direction == north)
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <update_bot_location+0x28>
	{
		tempRowNum++;
     4c2:	4f 5f       	subi	r20, 0xFF	; 255
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <update_bot_location+0x3a>
	}
	else if(bot_direction == west)
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <update_bot_location+0x32>
	{
		tempColNum--;
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	30 40       	sbci	r19, 0x00	; 0
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <update_bot_location+0x3a>
	}
	else if(bot_direction == south)
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	11 f4       	brne	.+4      	; 0x4da <update_bot_location+0x3a>
	{
		tempRowNum--;
     4d6:	41 50       	subi	r20, 0x01	; 1
     4d8:	50 40       	sbci	r21, 0x00	; 0
		return 1;
	}
 */
 
 	// code of else block being used directly
 	rowNum = tempRowNum;
     4da:	50 93 13 03 	sts	0x0313, r21
     4de:	40 93 12 03 	sts	0x0312, r20
	colNum = tempColNum;
     4e2:	30 93 15 03 	sts	0x0315, r19
     4e6:	20 93 14 03 	sts	0x0314, r18
	return 1;
}
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	08 95       	ret

000004f0 <move_bot>:
int move_bot(int direction)
{
	//// printf"\nDirection %d\n",direction);

	// ST = 3 , It refers to "Stop"
	if (direction == ST)
     4f0:	8d 30       	cpi	r24, 0x0D	; 13
     4f2:	91 05       	cpc	r25, r1
     4f4:	19 f4       	brne	.+6      	; 0x4fc <move_bot+0xc>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	2e c0       	rjmp	.+92     	; 0x558 <move_bot+0x68>
	{
		return 0;
	}
	else if (direction == LT)
     4fc:	8b 30       	cpi	r24, 0x0B	; 11
     4fe:	91 05       	cpc	r25, r1
     500:	59 f4       	brne	.+22     	; 0x518 <move_bot+0x28>
	{
		if (bot_direction == east)
     502:	80 91 3d 03 	lds	r24, 0x033D
     506:	88 23       	and	r24, r24
     508:	b1 f0       	breq	.+44     	; 0x536 <move_bot+0x46>
		{
			bot_direction = north;
		}
		else if (bot_direction == north)
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	81 f0       	breq	.+32     	; 0x52e <move_bot+0x3e>
		{
			bot_direction = west;
		}
		else if (bot_direction == west)
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	51 f0       	breq	.+20     	; 0x526 <move_bot+0x36>
		{
			bot_direction = south;
		}
		else if (bot_direction == south)
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	f9 f4       	brne	.+62     	; 0x554 <move_bot+0x64>
     516:	15 c0       	rjmp	.+42     	; 0x542 <move_bot+0x52>
		{
			bot_direction = east;
		}	
	}
	else if (direction == RT)
     518:	8c 30       	cpi	r24, 0x0C	; 12
     51a:	91 05       	cpc	r25, r1
     51c:	a9 f4       	brne	.+42     	; 0x548 <move_bot+0x58>
	{
		if (bot_direction == east)
     51e:	80 91 3d 03 	lds	r24, 0x033D
     522:	88 23       	and	r24, r24
     524:	11 f4       	brne	.+4      	; 0x52a <move_bot+0x3a>
		{
			bot_direction = south;
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	07 c0       	rjmp	.+14     	; 0x538 <move_bot+0x48>
		}
		else if (bot_direction == south)
     52a:	83 30       	cpi	r24, 0x03	; 3
     52c:	11 f4       	brne	.+4      	; 0x532 <move_bot+0x42>
		{
			bot_direction = west;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	03 c0       	rjmp	.+6      	; 0x538 <move_bot+0x48>
		}
		else if (bot_direction == west)
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <move_bot+0x4e>
		{
			bot_direction = north;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 3d 03 	sts	0x033D, r24
     53c:	0b c0       	rjmp	.+22     	; 0x554 <move_bot+0x64>
		}
		else if (bot_direction == north)
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	49 f4       	brne	.+18     	; 0x554 <move_bot+0x64>
		{
			bot_direction = east;
     542:	10 92 3d 03 	sts	0x033D, r1
     546:	06 c0       	rjmp	.+12     	; 0x554 <move_bot+0x64>
		}	
	}
	else if(direction == FR)
     548:	0a 97       	sbiw	r24, 0x0a	; 10
     54a:	21 f4       	brne	.+8      	; 0x554 <move_bot+0x64>
	{
		int x = update_bot_location();
     54c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <update_bot_location>
     550:	9c 01       	movw	r18, r24
     552:	02 c0       	rjmp	.+4      	; 0x558 <move_bot+0x68>
		//// printf"update_bot_location --> %d",x);
		return x;
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	30 e0       	ldi	r19, 0x00	; 0
	}

	
	return 1;

}
     558:	c9 01       	movw	r24, r18
     55a:	08 95       	ret

0000055c <follow_path>:

// Tester method for the bot , it calls "int move_bot(int dirction)"
int follow_path(int *path,int count)
{
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	7b 01       	movw	r14, r22
     56a:	8c 01       	movw	r16, r24
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	d0 e0       	ldi	r29, 0x00	; 0
     570:	0c c0       	rjmp	.+24     	; 0x58a <follow_path+0x2e>
	int counter = 0;
	
	while(counter < count)
	{
		int status = move_bot(*(path+counter));
     572:	f8 01       	movw	r30, r16
     574:	81 91       	ld	r24, Z+
     576:	91 91       	ld	r25, Z+
     578:	8f 01       	movw	r16, r30
     57a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
		
		if (status == 1)
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	19 f0       	breq	.+6      	; 0x588 <follow_path+0x2c>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	06 c0       	rjmp	.+12     	; 0x594 <follow_path+0x38>
		{
			// printf"Some error occurred");
			return 0;
		}
		
		counter++;
     588:	21 96       	adiw	r28, 0x01	; 1
// Tester method for the bot , it calls "int move_bot(int dirction)"
int follow_path(int *path,int count)
{
	int counter = 0;
	
	while(counter < count)
     58a:	ce 15       	cp	r28, r14
     58c:	df 05       	cpc	r29, r15
     58e:	8c f3       	brlt	.-30     	; 0x572 <follow_path+0x16>
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
		
		counter++;
	}
	
	return 1;
}
     594:	c9 01       	movw	r24, r18
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	08 95       	ret

000005a4 <reach_origin>:

// Bot will reach the start point and then we can customize the path to reach the actual Charging point from origin which is generally away from the main working grid or matrix.
// Final direction at origin will be west (by default).
// It returns array_len which is Zero if something went wrong , else some non-zero value for length of the Path-Back-To_Origin.
int reach_origin()
{
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
    
	// Step I
	// cover all rows and reduce it to Zero , if applicable

	// It bot is in I or II Quadrant as rowNum>0
	if (rowNum > 0)
     5b0:	80 91 12 03 	lds	r24, 0x0312
     5b4:	90 91 13 03 	lds	r25, 0x0313
     5b8:	18 16       	cp	r1, r24
     5ba:	19 06       	cpc	r1, r25
     5bc:	0c f0       	brlt	.+2      	; 0x5c0 <reach_origin+0x1c>
     5be:	4d c0       	rjmp	.+154    	; 0x65a <reach_origin+0xb6>
	{
		// Turn towards south , if applicable
		if(bot_direction != south)
     5c0:	80 91 3d 03 	lds	r24, 0x033D
     5c4:	83 30       	cpi	r24, 0x03	; 3
     5c6:	79 f1       	breq	.+94     	; 0x626 <reach_origin+0x82>
		{
			if (bot_direction == east)
     5c8:	88 23       	and	r24, r24
     5ca:	39 f4       	brne	.+14     	; 0x5da <reach_origin+0x36>
			{
				move_bot(RT);
     5cc:	8c e0       	ldi	r24, 0x0C	; 12
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     5d4:	8c e0       	ldi	r24, 0x0C	; 12
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	1f c0       	rjmp	.+62     	; 0x618 <reach_origin+0x74>
                		array_len++;			
			}
			else if (bot_direction == north)
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	a9 f4       	brne	.+42     	; 0x608 <reach_origin+0x64>
			{
				move_bot(RT);
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     5e6:	0c e0       	ldi	r16, 0x0C	; 12
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	10 93 48 03 	sts	0x0348, r17
     5ee:	00 93 47 03 	sts	0x0347, r16
                		array_len++;
                
				move_bot(RT);
     5f2:	8c e0       	ldi	r24, 0x0C	; 12
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     5fa:	10 93 4a 03 	sts	0x034A, r17
     5fe:	00 93 49 03 	sts	0x0349, r16
     602:	02 e0       	ldi	r16, 0x02	; 2
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	11 c0       	rjmp	.+34     	; 0x62a <reach_origin+0x86>
                		array_len++;
			}
			else if (bot_direction == west)
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	69 f4       	brne	.+26     	; 0x626 <reach_origin+0x82>
			{
				move_bot(LT);
     60c:	8b e0       	ldi	r24, 0x0B	; 11
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = LT ;
     614:	8b e0       	ldi	r24, 0x0B	; 11
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 48 03 	sts	0x0348, r25
     61c:	80 93 47 03 	sts	0x0347, r24
     620:	01 e0       	ldi	r16, 0x01	; 1
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <reach_origin+0x86>
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	e8 01       	movw	r28, r16
     62c:	cc 0f       	add	r28, r28
     62e:	dd 1f       	adc	r29, r29
     630:	c9 5b       	subi	r28, 0xB9	; 185
     632:	dc 4f       	sbci	r29, 0xFC	; 252
     634:	0a c0       	rjmp	.+20     	; 0x64a <reach_origin+0xa6>
		}
		
		// Travel the distance to make rowNum = 0
		while( rowNum > 0 )
		{
        	      move_bot(FR);
     636:	8a e0       	ldi	r24, 0x0A	; 10
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
        	      path_to_origin[array_len] = FR ;
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	89 93       	st	Y+, r24
     644:	99 93       	st	Y+, r25
        	      array_len++;
     646:	0f 5f       	subi	r16, 0xFF	; 255
     648:	1f 4f       	sbci	r17, 0xFF	; 255
		                array_len++;			
			}
		}
		
		// Travel the distance to make rowNum = 0
		while( rowNum > 0 )
     64a:	80 91 12 03 	lds	r24, 0x0312
     64e:	90 91 13 03 	lds	r25, 0x0313
     652:	18 16       	cp	r1, r24
     654:	19 06       	cpc	r1, r25
     656:	7c f3       	brlt	.-34     	; 0x636 <reach_origin+0x92>
     658:	50 c0       	rjmp	.+160    	; 0x6fa <reach_origin+0x156>
	              //rowNum--;
        	}
        
	}
	// If bot is int III or IV quadrant
	else if (rowNum < 0)
     65a:	89 2b       	or	r24, r25
     65c:	19 f4       	brne	.+6      	; 0x664 <reach_origin+0xc0>
     65e:	00 e0       	ldi	r16, 0x00	; 0
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	4b c0       	rjmp	.+150    	; 0x6fa <reach_origin+0x156>
	{
		// Turn towards south , if applicable
		if(bot_direction != north)
     664:	80 91 3d 03 	lds	r24, 0x033D
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	79 f1       	breq	.+94     	; 0x6ca <reach_origin+0x126>
		{
			if (bot_direction == east)
     66c:	88 23       	and	r24, r24
     66e:	39 f4       	brne	.+14     	; 0x67e <reach_origin+0xda>
			{
				move_bot(LT);
     670:	8b e0       	ldi	r24, 0x0B	; 11
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = LT ;
     678:	8b e0       	ldi	r24, 0x0B	; 11
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	08 c0       	rjmp	.+16     	; 0x68e <reach_origin+0xea>
                		array_len++;			
			}
			else if (bot_direction == west)
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	69 f4       	brne	.+26     	; 0x69c <reach_origin+0xf8>
			{
				move_bot(RT);
     682:	8c e0       	ldi	r24, 0x0C	; 12
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     68a:	8c e0       	ldi	r24, 0x0C	; 12
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	90 93 48 03 	sts	0x0348, r25
     692:	80 93 47 03 	sts	0x0347, r24
     696:	01 e0       	ldi	r16, 0x01	; 1
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	19 c0       	rjmp	.+50     	; 0x6ce <reach_origin+0x12a>
		                array_len++;			
			}
			else if (bot_direction == south)
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	a9 f4       	brne	.+42     	; 0x6ca <reach_origin+0x126>
			{
				move_bot(RT);
     6a0:	8c e0       	ldi	r24, 0x0C	; 12
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     6a8:	0c e0       	ldi	r16, 0x0C	; 12
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	10 93 48 03 	sts	0x0348, r17
     6b0:	00 93 47 03 	sts	0x0347, r16
                		array_len++;
                
				move_bot(RT);
     6b4:	8c e0       	ldi	r24, 0x0C	; 12
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     6bc:	10 93 4a 03 	sts	0x034A, r17
     6c0:	00 93 49 03 	sts	0x0349, r16
     6c4:	02 e0       	ldi	r16, 0x02	; 2
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <reach_origin+0x12a>
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	e8 01       	movw	r28, r16
     6d0:	cc 0f       	add	r28, r28
     6d2:	dd 1f       	adc	r29, r29
     6d4:	c9 5b       	subi	r28, 0xB9	; 185
     6d6:	dc 4f       	sbci	r29, 0xFC	; 252
     6d8:	0a c0       	rjmp	.+20     	; 0x6ee <reach_origin+0x14a>
		}
		
		// Travel the distance to make rowNum = 0
		while( rowNum < 0 )
		{
        	      move_bot(FR);
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
        	      path_to_origin[array_len] = FR ;
     6e2:	8a e0       	ldi	r24, 0x0A	; 10
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	89 93       	st	Y+, r24
     6e8:	99 93       	st	Y+, r25
        	      array_len++;
     6ea:	0f 5f       	subi	r16, 0xFF	; 255
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255
                		array_len++;
			}
		}
		
		// Travel the distance to make rowNum = 0
		while( rowNum < 0 )
     6ee:	80 91 12 03 	lds	r24, 0x0312
     6f2:	90 91 13 03 	lds	r25, 0x0313
     6f6:	97 fd       	sbrc	r25, 7
     6f8:	f0 cf       	rjmp	.-32     	; 0x6da <reach_origin+0x136>

	// Step I
       	// cover all Columns and reduce it to Zero , if applicable
        // If bot is in I or IV Quadrant as colNum>0
        
	if (colNum > 0)
     6fa:	80 91 14 03 	lds	r24, 0x0314
     6fe:	90 91 15 03 	lds	r25, 0x0315
     702:	18 16       	cp	r1, r24
     704:	19 06       	cpc	r1, r25
     706:	0c f0       	brlt	.+2      	; 0x70a <reach_origin+0x166>
     708:	59 c0       	rjmp	.+178    	; 0x7bc <reach_origin+0x218>
	{
		// Turn towards west , if applicable
		if(bot_direction != west)
     70a:	80 91 3d 03 	lds	r24, 0x033D
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	e9 f1       	breq	.+122    	; 0x78c <reach_origin+0x1e8>
		{
			if (bot_direction == east)
     712:	88 23       	and	r24, r24
     714:	e1 f4       	brne	.+56     	; 0x74e <reach_origin+0x1aa>
			{
				move_bot(RT);
     716:	8c e0       	ldi	r24, 0x0C	; 12
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     71e:	f8 01       	movw	r30, r16
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e9 5b       	subi	r30, 0xB9	; 185
     726:	fc 4f       	sbci	r31, 0xFC	; 252
     728:	8c e0       	ldi	r24, 0x0C	; 12
     72a:	e8 2e       	mov	r14, r24
     72c:	f1 2c       	mov	r15, r1
     72e:	f1 82       	std	Z+1, r15	; 0x01
     730:	e0 82       	st	Z, r14
                		array_len++;
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
                		
                		move_bot(RT);
     736:	8c e0       	ldi	r24, 0x0C	; 12
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     73e:	f8 01       	movw	r30, r16
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e9 5b       	subi	r30, 0xB9	; 185
     746:	fc 4f       	sbci	r31, 0xFC	; 252
     748:	f1 82       	std	Z+1, r15	; 0x01
     74a:	e0 82       	st	Z, r14
     74c:	1d c0       	rjmp	.+58     	; 0x788 <reach_origin+0x1e4>
                		array_len++;			
			}
			else if (bot_direction == north)
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	61 f4       	brne	.+24     	; 0x76a <reach_origin+0x1c6>
			{
				move_bot(LT);
     752:	8b e0       	ldi	r24, 0x0B	; 11
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = LT ;
     75a:	f8 01       	movw	r30, r16
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	e9 5b       	subi	r30, 0xB9	; 185
     762:	fc 4f       	sbci	r31, 0xFC	; 252
     764:	8b e0       	ldi	r24, 0x0B	; 11
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0d c0       	rjmp	.+26     	; 0x784 <reach_origin+0x1e0>
                		array_len++;
                	}
			else if (bot_direction == south)
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	79 f4       	brne	.+30     	; 0x78c <reach_origin+0x1e8>
			{
				move_bot(RT);
     76e:	8c e0       	ldi	r24, 0x0C	; 12
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     776:	f8 01       	movw	r30, r16
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	e9 5b       	subi	r30, 0xB9	; 185
     77e:	fc 4f       	sbci	r31, 0xFC	; 252
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
		                array_len++;			
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	e8 01       	movw	r28, r16
     78e:	cc 0f       	add	r28, r28
     790:	dd 1f       	adc	r29, r29
     792:	c9 5b       	subi	r28, 0xB9	; 185
     794:	dc 4f       	sbci	r29, 0xFC	; 252
     796:	0a c0       	rjmp	.+20     	; 0x7ac <reach_origin+0x208>

		
		// Travel the distance to make colNum = 0
		while( colNum > 0 )
		{
	              move_bot(FR);
     798:	8a e0       	ldi	r24, 0x0A	; 10
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
	              path_to_origin[array_len] = FR ;
     7a0:	8a e0       	ldi	r24, 0x0A	; 10
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	89 93       	st	Y+, r24
     7a6:	99 93       	st	Y+, r25
	              array_len++;
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}

		
		// Travel the distance to make colNum = 0
		while( colNum > 0 )
     7ac:	80 91 14 03 	lds	r24, 0x0314
     7b0:	90 91 15 03 	lds	r25, 0x0315
     7b4:	18 16       	cp	r1, r24
     7b6:	19 06       	cpc	r1, r25
     7b8:	7c f3       	brlt	.-34     	; 0x798 <reach_origin+0x1f4>
     7ba:	5a c0       	rjmp	.+180    	; 0x870 <reach_origin+0x2cc>
	        }


	}
	// If bot is int II or III quadrant
	else if (colNum < 0)
     7bc:	89 2b       	or	r24, r25
     7be:	09 f4       	brne	.+2      	; 0x7c2 <reach_origin+0x21e>
     7c0:	57 c0       	rjmp	.+174    	; 0x870 <reach_origin+0x2cc>
	{
		// printf"\nColNum initially - %d\n",colNum);
	
		// Turn towards east , if applicable
		if(bot_direction != east)
     7c2:	80 91 3d 03 	lds	r24, 0x033D
     7c6:	88 23       	and	r24, r24
     7c8:	e9 f1       	breq	.+122    	; 0x844 <reach_origin+0x2a0>
		{
			if (bot_direction == north)
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	61 f4       	brne	.+24     	; 0x7e6 <reach_origin+0x242>
			{
				move_bot(RT);
     7ce:	8c e0       	ldi	r24, 0x0C	; 12
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     7d6:	f8 01       	movw	r30, r16
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e9 5b       	subi	r30, 0xB9	; 185
     7de:	fc 4f       	sbci	r31, 0xFC	; 252
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2b c0       	rjmp	.+86     	; 0x83c <reach_origin+0x298>
                		array_len++;			
			}
			else if (bot_direction == west)
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	e1 f4       	brne	.+56     	; 0x822 <reach_origin+0x27e>
			{
				move_bot(RT);
     7ea:	8c e0       	ldi	r24, 0x0C	; 12
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     7f2:	f8 01       	movw	r30, r16
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	e9 5b       	subi	r30, 0xB9	; 185
     7fa:	fc 4f       	sbci	r31, 0xFC	; 252
     7fc:	3c e0       	ldi	r19, 0x0C	; 12
     7fe:	e3 2e       	mov	r14, r19
     800:	f1 2c       	mov	r15, r1
     802:	f1 82       	std	Z+1, r15	; 0x01
     804:	e0 82       	st	Z, r14
		                array_len++;			
     806:	0f 5f       	subi	r16, 0xFF	; 255
     808:	1f 4f       	sbci	r17, 0xFF	; 255
		                
		                move_bot(RT);
     80a:	8c e0       	ldi	r24, 0x0C	; 12
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = RT ;
     812:	f8 01       	movw	r30, r16
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	e9 5b       	subi	r30, 0xB9	; 185
     81a:	fc 4f       	sbci	r31, 0xFC	; 252
     81c:	f1 82       	std	Z+1, r15	; 0x01
     81e:	e0 82       	st	Z, r14
     820:	0f c0       	rjmp	.+30     	; 0x840 <reach_origin+0x29c>
		                array_len++;
			}
			else if (bot_direction == south)
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	79 f4       	brne	.+30     	; 0x844 <reach_origin+0x2a0>
			{
				move_bot(LT);
     826:	8b e0       	ldi	r24, 0x0B	; 11
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
				path_to_origin[array_len] = LT ;
     82e:	f8 01       	movw	r30, r16
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	e9 5b       	subi	r30, 0xB9	; 185
     836:	fc 4f       	sbci	r31, 0xFC	; 252
     838:	8b e0       	ldi	r24, 0x0B	; 11
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
                		array_len++;
     840:	0f 5f       	subi	r16, 0xFF	; 255
     842:	1f 4f       	sbci	r17, 0xFF	; 255
     844:	e8 01       	movw	r28, r16
     846:	cc 0f       	add	r28, r28
     848:	dd 1f       	adc	r29, r29
     84a:	c9 5b       	subi	r28, 0xB9	; 185
     84c:	dc 4f       	sbci	r29, 0xFC	; 252
     84e:	0a c0       	rjmp	.+20     	; 0x864 <reach_origin+0x2c0>
	
	
		// Travel the distance to make colNum = 0
		while( colNum < 0 )
		{
	              move_bot(FR);
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
	              path_to_origin[array_len] = FR ;
     858:	8a e0       	ldi	r24, 0x0A	; 10
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	89 93       	st	Y+, r24
     85e:	99 93       	st	Y+, r25
	              array_len++;
     860:	0f 5f       	subi	r16, 0xFF	; 255
     862:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
	
	
		// Travel the distance to make colNum = 0
		while( colNum < 0 )
     864:	80 91 14 03 	lds	r24, 0x0314
     868:	90 91 15 03 	lds	r25, 0x0315
     86c:	97 fd       	sbrc	r25, 7
     86e:	f0 cf       	rjmp	.-32     	; 0x850 <reach_origin+0x2ac>
	}
	
	return array_len;	


}
     870:	c8 01       	movw	r24, r16
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	08 95       	ret

00000880 <init_location>:
}

// Setter method for Direction
void set_direction(int direction)
{
	bot_direction = direction;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 3d 03 	sts	0x033D, r24


void init_location(void)
{
	set_direction(north);
}
     886:	08 95       	ret

00000888 <lcd_port_config>:
/***************** Location.h - Closed ***************/

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     888:	87 b1       	in	r24, 0x07	; 7
     88a:	87 6f       	ori	r24, 0xF7	; 247
     88c:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     88e:	88 b1       	in	r24, 0x08	; 8
     890:	80 78       	andi	r24, 0x80	; 128
     892:	88 b9       	out	0x08, r24	; 8
}
     894:	08 95       	ret

00000896 <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     896:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     898:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     89a:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     89e:	10 92 08 01 	sts	0x0108, r1
}
     8a2:	08 95       	ret

000008a4 <motion_pin_config>:


//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     8a4:	81 b1       	in	r24, 0x01	; 1
     8a6:	8f 60       	ori	r24, 0x0F	; 15
     8a8:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     8aa:	82 b1       	in	r24, 0x02	; 2
     8ac:	80 7f       	andi	r24, 0xF0	; 240
     8ae:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     8b0:	ea e0       	ldi	r30, 0x0A	; 10
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	80 81       	ld	r24, Z
     8b6:	88 61       	ori	r24, 0x18	; 24
     8b8:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     8ba:	eb e0       	ldi	r30, 0x0B	; 11
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	80 81       	ld	r24, Z
     8c0:	88 61       	ori	r24, 0x18	; 24
     8c2:	80 83       	st	Z, r24
}
     8c4:	08 95       	ret

000008c6 <buzzer_pin_config>:



void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     8c6:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     8c8:	43 98       	cbi	0x08, 3	; 8
}
     8ca:	08 95       	ret

000008cc <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     8cc:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     8ce:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     8d0:	88 b9       	out	0x08, r24	; 8
}
     8d2:	08 95       	ret

000008d4 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     8d4:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     8d6:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     8d8:	88 b9       	out	0x08, r24	; 8
}
     8da:	08 95       	ret

000008dc <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     8dc:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     8de:	74 9a       	sbi	0x0e, 4	; 14
}
     8e0:	08 95       	ret

000008e2 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     8e2:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     8e4:	75 9a       	sbi	0x0e, 5	; 14
}
     8e6:	08 95       	ret

000008e8 <left_position_encoder_interrupt_init>:



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     8e8:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     8ea:	ea e6       	ldi	r30, 0x6A	; 106
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	82 60       	ori	r24, 0x02	; 2
     8f2:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     8f4:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     8f6:	78 94       	sei
}
     8f8:	08 95       	ret

000008fa <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     8fa:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     8fc:	ea e6       	ldi	r30, 0x6A	; 106
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	88 60       	ori	r24, 0x08	; 8
     904:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     906:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     908:	78 94       	sei
}
     90a:	08 95       	ret

0000090c <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     90c:	e1 e2       	ldi	r30, 0x21	; 33
     90e:	f1 e0       	ldi	r31, 0x01	; 1
     910:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     91e:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     922:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     926:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     92a:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     92e:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     932:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     936:	89 ea       	ldi	r24, 0xA9	; 169
     938:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     93c:	8b e0       	ldi	r24, 0x0B	; 11
     93e:	80 83       	st	Z, r24
}
     940:	08 95       	ret

00000942 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     942:	ea e7       	ldi	r30, 0x7A	; 122
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     948:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     952:	80 e8       	ldi	r24, 0x80	; 128
     954:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     956:	86 e8       	ldi	r24, 0x86	; 134
     958:	80 83       	st	Z, r24
}
     95a:	08 95       	ret

0000095c <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     95c:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     95e:	88 30       	cpi	r24, 0x08	; 8
     960:	18 f0       	brcs	.+6      	; 0x968 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     968:	97 70       	andi	r25, 0x07	; 7
     96a:	90 62       	ori	r25, 0x20	; 32
     96c:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     970:	80 91 7a 00 	lds	r24, 0x007A
     974:	80 64       	ori	r24, 0x40	; 64
     976:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     97a:	80 91 7a 00 	lds	r24, 0x007A
     97e:	84 ff       	sbrs	r24, 4
     980:	fc cf       	rjmp	.-8      	; 0x97a <ADC_Conversion+0x1e>
	a=ADCH;
     982:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     986:	90 91 7a 00 	lds	r25, 0x007A
     98a:	90 61       	ori	r25, 0x10	; 16
     98c:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     990:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     994:	08 95       	ret

00000996 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	18 2f       	mov	r17, r24
     99c:	06 2f       	mov	r16, r22
     99e:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     9a0:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     9a4:	48 2f       	mov	r20, r24
     9a6:	80 93 3a 03 	sts	0x033A, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     9aa:	81 2f       	mov	r24, r17
     9ac:	60 2f       	mov	r22, r16
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	23 e0       	ldi	r18, 0x03	; 3
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <velocity>:


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9be:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     9c2:	60 93 2a 01 	sts	0x012A, r22
}
     9c6:	08 95       	ret

000009c8 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9c8:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ca:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9cc:	8f 70       	andi	r24, 0x0F	; 15
     9ce:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     9d0:	82 b9       	out	0x02, r24	; 2
}
     9d2:	08 95       	ret

000009d4 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9d8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9da:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     9dc:	08 95       	ret

000009de <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9de:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9e0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     9e2:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     9e4:	08 95       	ret

000009e6 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ea:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     9ec:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     9ee:	08 95       	ret

000009f0 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9f0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9f2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9f4:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     9f6:	82 b9       	out	0x02, r24	; 2
  motion_set(0x09);
}
void right(void)
{
  motion_set(0x0A);
}
     9f8:	08 95       	ret

000009fa <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9fa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9fc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9fe:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     a00:	82 b9       	out	0x02, r24	; 2
  motion_set(0x0A);
}
void left(void)
{
  motion_set(0x05);
}
     a02:	08 95       	ret

00000a04 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a04:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a06:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a08:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     a0a:	82 b9       	out	0x02, r24	; 2
  motion_set(0x05);
}
void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     a0c:	08 95       	ret

00000a0e <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a0e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a10:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a12:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     a14:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     a16:	08 95       	ret

00000a18 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a18:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a1a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a1c:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     a1e:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     a20:	08 95       	ret

00000a22 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a22:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a24:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a26:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     a28:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     a2a:	08 95       	ret

00000a2c <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatunsisf>
     a40:	28 e4       	ldi	r18, 0x48	; 72
     a42:	31 ee       	ldi	r19, 0xE1	; 225
     a44:	42 e8       	ldi	r20, 0x82	; 130
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
     a4c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     a50:	7b 01       	movw	r14, r22
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0
 ShaftCountRight = 0; 
     a56:	10 92 24 03 	sts	0x0324, r1
     a5a:	10 92 25 03 	sts	0x0325, r1
     a5e:	10 92 26 03 	sts	0x0326, r1
     a62:	10 92 27 03 	sts	0x0327, r1
 ShaftCountLeft = 0; 
     a66:	10 92 20 03 	sts	0x0320, r1
     a6a:	10 92 21 03 	sts	0x0321, r1
     a6e:	10 92 22 03 	sts	0x0322, r1
     a72:	10 92 23 03 	sts	0x0323, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a76:	80 91 24 03 	lds	r24, 0x0324
     a7a:	90 91 25 03 	lds	r25, 0x0325
     a7e:	a0 91 26 03 	lds	r26, 0x0326
     a82:	b0 91 27 03 	lds	r27, 0x0327
     a86:	20 91 20 03 	lds	r18, 0x0320
     a8a:	30 91 21 03 	lds	r19, 0x0321
     a8e:	40 91 22 03 	lds	r20, 0x0322
     a92:	50 91 23 03 	lds	r21, 0x0323
     a96:	8e 15       	cp	r24, r14
     a98:	9f 05       	cpc	r25, r15
     a9a:	a0 07       	cpc	r26, r16
     a9c:	b1 07       	cpc	r27, r17
     a9e:	28 f4       	brcc	.+10     	; 0xaaa <angle_rotate+0x7e>
     aa0:	2e 15       	cp	r18, r14
     aa2:	3f 05       	cpc	r19, r15
     aa4:	40 07       	cpc	r20, r16
     aa6:	51 07       	cpc	r21, r17
     aa8:	30 f3       	brcs	.-52     	; 0xa76 <angle_rotate+0x4a>
  break;
 }
 //stop(); //Stop action
}
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <linear_distance_mm>:
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatunsisf>
     ac0:	25 ee       	ldi	r18, 0xE5	; 229
     ac2:	30 ed       	ldi	r19, 0xD0	; 208
     ac4:	4a ea       	ldi	r20, 0xAA	; 170
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
     acc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
  
 ShaftCountRight = 0;
     ad4:	10 92 24 03 	sts	0x0324, r1
     ad8:	10 92 25 03 	sts	0x0325, r1
     adc:	10 92 26 03 	sts	0x0326, r1
     ae0:	10 92 27 03 	sts	0x0327, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
     ae4:	80 91 24 03 	lds	r24, 0x0324
     ae8:	90 91 25 03 	lds	r25, 0x0325
     aec:	a0 91 26 03 	lds	r26, 0x0326
     af0:	b0 91 27 03 	lds	r27, 0x0327
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	4a 07       	cpc	r20, r26
     afa:	5b 07       	cpc	r21, r27
     afc:	98 f7       	brcc	.-26     	; 0xae4 <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     afe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b00:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     b02:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop action
}
     b04:	08 95       	ret

00000b06 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b06:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b08:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b0a:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b0c:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     b0e:	0e 94 5a 05 	call	0xab4	; 0xab4 <linear_distance_mm>
}
     b12:	08 95       	ret

00000b14 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b14:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b16:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b18:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     b1a:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     b1c:	0e 94 5a 05 	call	0xab4	; 0xab4 <linear_distance_mm>
}
     b20:	08 95       	ret

00000b22 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b22:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b24:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b26:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     b28:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     b2a:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b2e:	08 95       	ret

00000b30 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b30:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b32:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b34:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     b36:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     b38:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b3c:	08 95       	ret

00000b3e <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b3e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b40:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b42:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     b44:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b4e:	08 95       	ret

00000b50 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b50:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b52:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b54:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     b56:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b60:	08 95       	ret

00000b62 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b62:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b64:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b66:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     b68:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b72:	08 95       	ret

00000b74 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b74:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b76:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b78:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     b7a:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0e 94 16 05 	call	0xa2c	; 0xa2c <angle_rotate>
}
     b84:	08 95       	ret

00000b86 <show_battery_status>:
}


void show_battery_status()
{
	BATT_V = ADC_Conversion(0);
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	bc 01       	movw	r22, r24
     b94:	cd 01       	movw	r24, r26
     b96:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatunsisf>
     b9a:	60 93 34 03 	sts	0x0334, r22
     b9e:	70 93 35 03 	sts	0x0335, r23
     ba2:	80 93 36 03 	sts	0x0336, r24
     ba6:	90 93 37 03 	sts	0x0337, r25
	BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     bb0:	94 e6       	ldi	r25, 0x64	; 100
     bb2:	89 9f       	mul	r24, r25
     bb4:	c0 01       	movw	r24, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	aa 27       	eor	r26, r26
     bba:	97 fd       	sbrc	r25, 7
     bbc:	a0 95       	com	r26
     bbe:	ba 2f       	mov	r27, r26
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__floatsisf>
     bc8:	2d e3       	ldi	r18, 0x3D	; 61
     bca:	35 ed       	ldi	r19, 0xD5	; 213
     bcc:	41 ea       	ldi	r20, 0xA1	; 161
     bce:	5d e3       	ldi	r21, 0x3D	; 61
     bd0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
     bd4:	23 e3       	ldi	r18, 0x33	; 51
     bd6:	33 e3       	ldi	r19, 0x33	; 51
     bd8:	43 e3       	ldi	r20, 0x33	; 51
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 a6 0b 	call	0x174c	; 0x174c <__addsf3>
     be0:	60 93 40 03 	sts	0x0340, r22
     be4:	70 93 41 03 	sts	0x0341, r23
     be8:	80 93 42 03 	sts	0x0342, r24
     bec:	90 93 43 03 	sts	0x0343, r25
	lcd_print(1,1,BATT_Voltage,4);
     bf0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	a9 01       	movw	r20, r18
     bfe:	24 e0       	ldi	r18, 0x04	; 4
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
     c06:	08 95       	ret

00000c08 <read_sensor>:


void read_sensor()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     c0e:	80 93 1b 03 	sts	0x031B, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     c18:	80 93 1c 03 	sts	0x031C, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 ae 04 	call	0x95c	; 0x95c <ADC_Conversion>
     c22:	80 93 1d 03 	sts	0x031D, r24
	
/*	print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		*/
	lcd_print(1,1,Left_white_line,3);
     c26:	40 91 1b 03 	lds	r20, 0x031B
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	23 e0       	ldi	r18, 0x03	; 3
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1,5,Center_white_line,3);
     c38:	40 91 1c 03 	lds	r20, 0x031C
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1,9,Right_white_line,3);
     c4a:	40 91 1d 03 	lds	r20, 0x031D
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	69 e0       	ldi	r22, 0x09	; 9
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	23 e0       	ldi	r18, 0x03	; 3
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	
}
     c5c:	08 95       	ret

00000c5e <follow>:

void follow()
{
	//flag=0;
	if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20)
     c5e:	90 91 1c 03 	lds	r25, 0x031C
     c62:	91 32       	cpi	r25, 0x21	; 33
     c64:	90 f0       	brcs	.+36     	; 0xc8a <follow+0x2c>
     c66:	80 91 1b 03 	lds	r24, 0x031B
     c6a:	80 32       	cpi	r24, 0x20	; 32
     c6c:	70 f4       	brcc	.+28     	; 0xc8a <follow+0x2c>
     c6e:	80 91 1d 03 	lds	r24, 0x031D
     c72:	80 32       	cpi	r24, 0x20	; 32
     c74:	50 f4       	brcc	.+20     	; 0xc8a <follow+0x2c>


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c76:	82 e8       	ldi	r24, 0x82	; 130
     c78:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c7c:	80 93 2a 01 	sts	0x012A, r24
	if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20)
		{
			//flag=1;
			//forward();
			velocity(130,130);
			lcd_print(2,1,130,3);
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	42 e8       	ldi	r20, 0x82	; 130
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <follow+0x4c>
			lcd_print(2,5,130,3);	
		}

		else if((Left_white_line>0x20 && Center_white_line<0x20) )
     c8a:	80 91 1b 03 	lds	r24, 0x031B
     c8e:	81 32       	cpi	r24, 0x21	; 33
     c90:	c8 f0       	brcs	.+50     	; 0xcc4 <follow+0x66>
     c92:	90 32       	cpi	r25, 0x20	; 32
     c94:	b8 f4       	brcc	.+46     	; 0xcc4 <follow+0x66>


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c96:	89 e6       	ldi	r24, 0x69	; 105
     c98:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c9c:	82 e8       	ldi	r24, 0x82	; 130
     c9e:	80 93 2a 01 	sts	0x012A, r24
		else if((Left_white_line>0x20 && Center_white_line<0x20) )
		{
			//flag=1;
		//	forward();
			velocity(105,130);
			lcd_print(2,1,105,3);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	49 e6       	ldi	r20, 0x69	; 105
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	23 e0       	ldi	r18, 0x03	; 3
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			lcd_print(2,5,130,3);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	65 e0       	ldi	r22, 0x05	; 5
     cb6:	42 e8       	ldi	r20, 0x82	; 130
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	23 e0       	ldi	r18, 0x03	; 3
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
     cc2:	08 95       	ret
		}

		else if((Right_white_line>0x20 && Center_white_line<0x20))
     cc4:	80 91 1d 03 	lds	r24, 0x031D
     cc8:	81 32       	cpi	r24, 0x21	; 33
     cca:	c0 f0       	brcs	.+48     	; 0xcfc <follow+0x9e>
     ccc:	90 32       	cpi	r25, 0x20	; 32
     cce:	b0 f4       	brcc	.+44     	; 0xcfc <follow+0x9e>


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cd0:	82 e8       	ldi	r24, 0x82	; 130
     cd2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     cd6:	89 e6       	ldi	r24, 0x69	; 105
     cd8:	80 93 2a 01 	sts	0x012A, r24
		else if((Right_white_line>0x20 && Center_white_line<0x20))
		{
			//flag=1;
			//forward();
			velocity(130,105);
			lcd_print(2,1,130,3);
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	42 e8       	ldi	r20, 0x82	; 130
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	23 e0       	ldi	r18, 0x03	; 3
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			lcd_print(2,5,105,3);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	65 e0       	ldi	r22, 0x05	; 5
     cf0:	49 e6       	ldi	r20, 0x69	; 105
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	23 e0       	ldi	r18, 0x03	; 3
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
     cfc:	08 95       	ret

00000cfe <isPlus>:
}

int isPlus()
{

	if((Left_white_line >0x20 && Center_white_line>0x20) || (Right_white_line >0x20 && Center_white_line>0x20))
     cfe:	80 91 1b 03 	lds	r24, 0x031B
     d02:	81 32       	cpi	r24, 0x21	; 33
     d04:	20 f4       	brcc	.+8      	; 0xd0e <isPlus+0x10>
     d06:	80 91 1d 03 	lds	r24, 0x031D
     d0a:	81 32       	cpi	r24, 0x21	; 33
     d0c:	f8 f0       	brcs	.+62     	; 0xd4c <isPlus+0x4e>
     d0e:	80 91 1c 03 	lds	r24, 0x031C
     d12:	81 32       	cpi	r24, 0x21	; 33
     d14:	d8 f0       	brcs	.+54     	; 0xd4c <isPlus+0x4e>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     d16:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     d18:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     d1a:	88 b9       	out	0x08, r24	; 8
     d1c:	88 ee       	ldi	r24, 0xE8	; 232
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	20 e7       	ldi	r18, 0x70	; 112
     d22:	31 e0       	ldi	r19, 0x01	; 1
     d24:	f9 01       	movw	r30, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <isPlus+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <isPlus+0x26>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     d2e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     d30:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     d32:	88 b9       	out	0x08, r24	; 8
     d34:	88 ee       	ldi	r24, 0xE8	; 232
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	20 e7       	ldi	r18, 0x70	; 112
     d3a:	31 e0       	ldi	r19, 0x01	; 1
     d3c:	f9 01       	movw	r30, r18
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <isPlus+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	d9 f7       	brne	.-10     	; 0xd3c <isPlus+0x3e>
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <isPlus+0x52>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
	return 0;
	}
}
     d50:	c9 01       	movw	r24, r18
     d52:	08 95       	ret

00000d54 <turnLeft>:
	
	void turnLeft()
	{
	forward_mm(50);
     d54:	82 e3       	ldi	r24, 0x32	; 50
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 83 05 	call	0xb06	; 0xb06 <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d5c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d5e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d60:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d62:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d64:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d66:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     d68:	82 b9       	out	0x02, r24	; 2
     d6a:	80 ed       	ldi	r24, 0xD0	; 208
     d6c:	97 e0       	ldi	r25, 0x07	; 7
     d6e:	20 e7       	ldi	r18, 0x70	; 112
     d70:	31 e0       	ldi	r19, 0x01	; 1
     d72:	f9 01       	movw	r30, r18
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <turnLeft+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <turnLeft+0x1e>
	{
	forward_mm(50);
	stop();
	left();
	_delay_ms(200);
	read_sensor();
     d7c:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <turnLeft+0x3a>
	 while(Left_white_line <0x40)
	 {
	 read_sensor();
     d82:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d86:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d88:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d8a:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     d8c:	82 b9       	out	0x02, r24	; 2
	forward_mm(50);
	stop();
	left();
	_delay_ms(200);
	read_sensor();
	 while(Left_white_line <0x40)
     d8e:	80 91 1b 03 	lds	r24, 0x031B
     d92:	80 34       	cpi	r24, 0x40	; 64
     d94:	b0 f3       	brcs	.-20     	; 0xd82 <turnLeft+0x2e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d96:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d98:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d9a:	82 b9       	out	0x02, r24	; 2
     d9c:	80 ed       	ldi	r24, 0xD0	; 208
     d9e:	97 e0       	ldi	r25, 0x07	; 7
     da0:	20 e7       	ldi	r18, 0x70	; 112
     da2:	31 e0       	ldi	r19, 0x01	; 1
     da4:	f9 01       	movw	r30, r18
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <turnLeft+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     daa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dac:	d9 f7       	brne	.-10     	; 0xda4 <turnLeft+0x50>
	 read_sensor();
	   left();
	}
	stop();
	_delay_ms(200);
	read_sensor();
     dae:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     db2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     db4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     db6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     db8:	82 b9       	out	0x02, r24	; 2
	stop();
	_delay_ms(200);
	read_sensor();
	forward();

	}
     dba:	08 95       	ret

00000dbc <turnRight>:
	void turnRight()
	{
	forward_mm(50);
     dbc:	82 e3       	ldi	r24, 0x32	; 50
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 83 05 	call	0xb06	; 0xb06 <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dc4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dc6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     dc8:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dca:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dcc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     dce:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     dd0:	82 b9       	out	0x02, r24	; 2
     dd2:	80 ed       	ldi	r24, 0xD0	; 208
     dd4:	97 e0       	ldi	r25, 0x07	; 7
     dd6:	20 e7       	ldi	r18, 0x70	; 112
     dd8:	31 e0       	ldi	r19, 0x01	; 1
     dda:	f9 01       	movw	r30, r18
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <turnRight+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de2:	d9 f7       	brne	.-10     	; 0xdda <turnRight+0x1e>
	{
	forward_mm(50);
	stop();
	right();
	_delay_ms(200);
	read_sensor();
     de4:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <turnRight+0x3a>
	 while(Right_white_line <0x40 )
	 {
	 read_sensor();
     dea:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dee:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     df0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     df2:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     df4:	82 b9       	out	0x02, r24	; 2
	forward_mm(50);
	stop();
	right();
	_delay_ms(200);
	read_sensor();
	 while(Right_white_line <0x40 )
     df6:	80 91 1d 03 	lds	r24, 0x031D
     dfa:	80 34       	cpi	r24, 0x40	; 64
     dfc:	b0 f3       	brcs	.-20     	; 0xdea <turnRight+0x2e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dfe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e00:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     e02:	82 b9       	out	0x02, r24	; 2
     e04:	80 ed       	ldi	r24, 0xD0	; 208
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	20 e7       	ldi	r18, 0x70	; 112
     e0a:	31 e0       	ldi	r19, 0x01	; 1
     e0c:	f9 01       	movw	r30, r18
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <turnRight+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	d9 f7       	brne	.-10     	; 0xe0c <turnRight+0x50>
	 read_sensor();
	 right();
	 }
	 stop();
	_delay_ms(200);
	read_sensor();
     e16:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e1a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e1c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e1e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e20:	82 b9       	out	0x02, r24	; 2
	 }
	 stop();
	_delay_ms(200);
	read_sensor();
	forward();
	}
     e22:	08 95       	ret

00000e24 <init_encoders>:


//Function to initialize all the devices
void init_encoders()
{
 cli(); //Clears the global interrupt
     e24:	f8 94       	cli


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     e26:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     e28:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     e2a:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     e2c:	75 9a       	sbi	0x0e, 5	; 14



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     e2e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     e30:	ea e6       	ldi	r30, 0x6A	; 106
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     e3a:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     e3c:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     e3e:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     e40:	ea e6       	ldi	r30, 0x6A	; 106
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     e4a:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     e4c:	78 94       	sei

 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 

 sei();   // Enables the global interrupt 
     e4e:	78 94       	sei
}
     e50:	08 95       	ret

00000e52 <port_init>:
/***************** Location.h - Closed ***************/

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     e52:	87 b1       	in	r24, 0x07	; 7
     e54:	87 6f       	ori	r24, 0xF7	; 247
     e56:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     e58:	88 b1       	in	r24, 0x08	; 8
     e5a:	80 78       	andi	r24, 0x80	; 128
     e5c:	88 b9       	out	0x08, r24	; 8


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     e5e:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     e60:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     e62:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     e66:	10 92 08 01 	sts	0x0108, r1


//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     e6a:	81 b1       	in	r24, 0x01	; 1
     e6c:	8f 60       	ori	r24, 0x0F	; 15
     e6e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     e70:	82 b1       	in	r24, 0x02	; 2
     e72:	80 7f       	andi	r24, 0xF0	; 240
     e74:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     e76:	ea e0       	ldi	r30, 0x0A	; 10
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	80 81       	ld	r24, Z
     e7c:	88 61       	ori	r24, 0x18	; 24
     e7e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     e80:	eb e0       	ldi	r30, 0x0B	; 11
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	80 81       	ld	r24, Z
     e86:	88 61       	ori	r24, 0x18	; 24
     e88:	80 83       	st	Z, r24



void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     e8a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     e8c:	43 98       	cbi	0x08, 3	; 8


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     e8e:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     e90:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     e92:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     e94:	75 9a       	sbi	0x0e, 5	; 14
	motion_pin_config();	

	buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config	
}
     e96:	08 95       	ret

00000e98 <init_devices>:
 angle_rotate(Degrees);
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     e98:	f8 94       	cli
	port_init();
     e9a:	0e 94 29 07 	call	0xe52	; 0xe52 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     e9e:	ea e7       	ldi	r30, 0x7A	; 122
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     ea4:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     eb2:	86 e8       	ldi	r24, 0x86	; 134
     eb4:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     eb6:	e1 e2       	ldi	r30, 0x21	; 33
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     ebc:	9f ef       	ldi	r25, 0xFF	; 255
     ebe:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     ec8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     ecc:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     ed0:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     ed4:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     ed8:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     edc:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     ee0:	89 ea       	ldi	r24, 0xA9	; 169
     ee2:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     ee6:	8b e0       	ldi	r24, 0x0B	; 11
     ee8:	80 83       	st	Z, r24



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     eea:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     eec:	ea e6       	ldi	r30, 0x6A	; 106
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	82 60       	ori	r24, 0x02	; 2
     ef4:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     ef6:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     ef8:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     efa:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     efc:	ea e6       	ldi	r30, 0x6A	; 106
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     f06:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     f08:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     f0a:	78 94       	sei
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 3d 03 	sts	0x033D, r24

	// To initialize the direction of the bot to north
	init_location();
}
     f12:	08 95       	ret

00000f14 <orient>:



void orient(int value)
{
	switch(value)
     f14:	83 31       	cpi	r24, 0x13	; 19
     f16:	91 05       	cpc	r25, r1
     f18:	69 f1       	breq	.+90     	; 0xf74 <orient+0x60>
     f1a:	84 31       	cpi	r24, 0x14	; 20
     f1c:	91 05       	cpc	r25, r1
     f1e:	24 f4       	brge	.+8      	; 0xf28 <orient+0x14>
     f20:	41 97       	sbiw	r24, 0x11	; 17
     f22:	09 f0       	breq	.+2      	; 0xf26 <orient+0x12>
     f24:	4f c0       	rjmp	.+158    	; 0xfc4 <orient+0xb0>
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <orient+0x2a>
     f28:	84 31       	cpi	r24, 0x14	; 20
     f2a:	91 05       	cpc	r25, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <orient+0x34>
     f2e:	49 97       	sbiw	r24, 0x19	; 25
     f30:	09 f0       	breq	.+2      	; 0xf34 <orient+0x20>
     f32:	48 c0       	rjmp	.+144    	; 0xfc4 <orient+0xb0>
     f34:	44 c0       	rjmp	.+136    	; 0xfbe <orient+0xaa>
		case F:
			
		
			while(isPlus())
			{
				read_sensor();
     f36:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
				follow();
     f3a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <follow>
	{

		case F:
			
		
			while(isPlus())
     f3e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <isPlus>
     f42:	89 2b       	or	r24, r25
     f44:	c1 f7       	brne	.-16     	; 0xf36 <orient+0x22>
     f46:	08 95       	ret

				break;

		case L:
				//turnLeft();
					turnL =1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	90 93 29 03 	sts	0x0329, r25
     f50:	80 93 28 03 	sts	0x0328, r24
			if(dirn == N)
     f54:	80 91 08 02 	lds	r24, 0x0208
     f58:	90 91 09 02 	lds	r25, 0x0209
     f5c:	85 31       	cpi	r24, 0x15	; 21
     f5e:	91 05       	cpc	r25, r1
     f60:	39 f1       	breq	.+78     	; 0xfb0 <orient+0x9c>
			{
			//	turnLeft();
				dirn = W;
			}
			else if (dirn == E)
     f62:	87 31       	cpi	r24, 0x17	; 23
     f64:	91 05       	cpc	r25, r1
     f66:	f9 f0       	breq	.+62     	; 0xfa6 <orient+0x92>
			{
			//	turnBack();
				dirn = N;
			}
			else if (dirn == W)
     f68:	88 31       	cpi	r24, 0x18	; 24
     f6a:	91 05       	cpc	r25, r1
     f6c:	b1 f0       	breq	.+44     	; 0xf9a <orient+0x86>
			{
				dirn=S;
			}
			else if (dirn == S)
     f6e:	46 97       	sbiw	r24, 0x16	; 22
     f70:	49 f5       	brne	.+82     	; 0xfc4 <orient+0xb0>
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <orient+0x7a>
				dirn = E;
			}
				break;
		case R:
		//turnRight();
		turnR =1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	90 93 2b 03 	sts	0x032B, r25
     f7c:	80 93 2a 03 	sts	0x032A, r24
		if(dirn == N)
     f80:	80 91 08 02 	lds	r24, 0x0208
     f84:	90 91 09 02 	lds	r25, 0x0209
     f88:	85 31       	cpi	r24, 0x15	; 21
     f8a:	91 05       	cpc	r25, r1
     f8c:	19 f4       	brne	.+6      	; 0xf94 <orient+0x80>
			{
				//turnRight();
				dirn = E;
     f8e:	87 e1       	ldi	r24, 0x17	; 23
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	10 c0       	rjmp	.+32     	; 0xfb4 <orient+0xa0>
			}
			else if (dirn == E)
     f94:	87 31       	cpi	r24, 0x17	; 23
     f96:	91 05       	cpc	r25, r1
     f98:	19 f4       	brne	.+6      	; 0xfa0 <orient+0x8c>
			{
				dirn =S;
     f9a:	86 e1       	ldi	r24, 0x16	; 22
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0a c0       	rjmp	.+20     	; 0xfb4 <orient+0xa0>
			}
			else if (dirn == W)
     fa0:	88 31       	cpi	r24, 0x18	; 24
     fa2:	91 05       	cpc	r25, r1
     fa4:	19 f4       	brne	.+6      	; 0xfac <orient+0x98>
			{
				//turnBack();
				dirn = N;
     fa6:	85 e1       	ldi	r24, 0x15	; 21
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <orient+0xa0>
			}
			else if (dirn == S)
     fac:	46 97       	sbiw	r24, 0x16	; 22
     fae:	51 f4       	brne	.+20     	; 0xfc4 <orient+0xb0>
			{
				//turnLeft();
				dirn = W;
     fb0:	88 e1       	ldi	r24, 0x18	; 24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	90 93 09 02 	sts	0x0209, r25
     fb8:	80 93 08 02 	sts	0x0208, r24
     fbc:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fbe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fc0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fc2:	82 b9       	out	0x02, r24	; 2
     fc4:	08 95       	ret

00000fc6 <rotate_left_slowly>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fc6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fc8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fca:	82 b9       	out	0x02, r24	; 2
	//velocity(150,150);

	while(1)
	{
		stop();
		read_sensor();
     fcc:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>

		// For center black line
		if(Center_white_line>0x20)
     fd0:	80 91 1c 03 	lds	r24, 0x031C
     fd4:	81 32       	cpi	r24, 0x21	; 33
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <rotate_left_slowly+0x1c>
			break;	
		}

		else
		{			
			left_degrees(10);
     fd8:	8a e0       	ldi	r24, 0x0A	; 10
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 91 05 	call	0xb22	; 0xb22 <left_degrees>
     fe0:	f2 cf       	rjmp	.-28     	; 0xfc6 <rotate_left_slowly>
     fe2:	08 95       	ret

00000fe4 <rotate_right_slowly>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fe4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fe6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fe8:	82 b9       	out	0x02, r24	; 2
	//velocity(150,150);

	while(1)
	{
		stop();
		read_sensor();
     fea:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>

		// For center black line
		if(Center_white_line>0x20)
     fee:	80 91 1c 03 	lds	r24, 0x031C
     ff2:	81 32       	cpi	r24, 0x21	; 33
     ff4:	28 f4       	brcc	.+10     	; 0x1000 <rotate_right_slowly+0x1c>
			break;	
		}

		else
		{
			right_degrees(10);			
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 98 05 	call	0xb30	; 0xb30 <right_degrees>
     ffe:	f2 cf       	rjmp	.-28     	; 0xfe4 <rotate_right_slowly>
    1000:	08 95       	ret

00001002 <main>:



//Main Function
int main()
{
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
	init_devices();
    1008:	0e 94 4c 07 	call	0xe98	; 0xe98 <init_devices>
	init_encoders();
    100c:	0e 94 12 07 	call	0xe24	; 0xe24 <init_encoders>
	lcd_set_4bit();
    1010:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    1014:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1018:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    101a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    101c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    101e:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1020:	82 e8       	ldi	r24, 0x82	; 130
    1022:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1026:	80 93 2a 01 	sts	0x012A, r24
	lcd_set_4bit();
	lcd_init();
	int value=0;
	forward();
	velocity(130,130);
	lcd_print(2,1,130,3);
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	42 e8       	ldi	r20, 0x82	; 130
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	23 e0       	ldi	r18, 0x03	; 3
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2,5,130,3);
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	65 e0       	ldi	r22, 0x05	; 5
    103e:	42 e8       	ldi	r20, 0x82	; 130
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	23 e0       	ldi	r18, 0x03	; 3
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2,9,pathindex,2);
    104a:	40 91 1e 03 	lds	r20, 0x031E
    104e:	50 91 1f 03 	lds	r21, 0x031F
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	69 e0       	ldi	r22, 0x09	; 9
    1056:	22 e0       	ldi	r18, 0x02	; 2
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2,13,dirn,3);
    105e:	40 91 08 02 	lds	r20, 0x0208
    1062:	50 91 09 02 	lds	r21, 0x0209
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	6d e0       	ldi	r22, 0x0D	; 13
    106a:	23 e0       	ldi	r18, 0x03	; 3
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1072:	12 e8       	ldi	r17, 0x82	; 130
	lcd_print(2,13,dirn,3);


	while(1)
	{	
		read_sensor();
    1074:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
		follow();
    1078:	0e 94 2f 06 	call	0xc5e	; 0xc5e <follow>
		
		if(isPlus())
    107c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <isPlus>
    1080:	89 2b       	or	r24, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <main+0x84>
    1084:	8b c0       	rjmp	.+278    	; 0x119c <main+0x19a>
		{	
			read_sensor();
    1086:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
			value = path[pathindex++];
    108a:	80 91 1e 03 	lds	r24, 0x031E
    108e:	90 91 1f 03 	lds	r25, 0x031F
    1092:	fc 01       	movw	r30, r24
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	e0 50       	subi	r30, 0x00	; 0
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	c0 81       	ld	r28, Z
    109e:	d1 81       	ldd	r29, Z+1	; 0x01
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	90 93 1f 03 	sts	0x031F, r25
    10a6:	80 93 1e 03 	sts	0x031E, r24
			
			// Code inserted for calculation of actual location wrt initial starting point , 
			// It will consider direction also.

			if (value == F)
    10aa:	c1 31       	cpi	r28, 0x11	; 17
    10ac:	d1 05       	cpc	r29, r1
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <main+0xb4>
			{
				// Move the bot forward, for location only , No movement on ground.
				move_bot(FR);
    10b0:	8a e0       	ldi	r24, 0x0A	; 10
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <main+0xbe>
			}
			else if (value == L)
    10b6:	c4 31       	cpi	r28, 0x14	; 20
    10b8:	d1 05       	cpc	r29, r1
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <main+0xc4>
			{
				// Move the bot left , for location only , No movement on ground.
				move_bot(LT);
    10bc:	8b e0       	ldi	r24, 0x0B	; 11
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <move_bot>
    10c4:	68 c0       	rjmp	.+208    	; 0x1196 <main+0x194>
			}
			else if (value == R)
    10c6:	c3 31       	cpi	r28, 0x13	; 19
    10c8:	d1 05       	cpc	r29, r1
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <main+0xd0>
			{
				// Move the bot right, for location only , No movement on ground.
				move_bot(RT);
    10cc:	8c e0       	ldi	r24, 0x0C	; 12
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	f7 cf       	rjmp	.-18     	; 0x10c0 <main+0xbe>
			}
			else if (value == M)
    10d2:	c9 31       	cpi	r28, 0x19	; 25
    10d4:	d1 05       	cpc	r29, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <main+0xd8>
    10d8:	5e c0       	rjmp	.+188    	; 0x1196 <main+0x194>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10da:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10dc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10de:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10e0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    10e2:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    10e4:	88 b9       	out	0x08, r24	; 8
    10e6:	88 ee       	ldi	r24, 0xE8	; 232
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	20 e7       	ldi	r18, 0x70	; 112
    10ec:	31 e0       	ldi	r19, 0x01	; 1
    10ee:	f9 01       	movw	r30, r18
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <main+0xee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f6:	d9 f7       	brne	.-10     	; 0x10ee <main+0xec>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10f8:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    10fa:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    10fc:	88 b9       	out	0x08, r24	; 8
    10fe:	88 ee       	ldi	r24, 0xE8	; 232
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	20 e7       	ldi	r18, 0x70	; 112
    1104:	31 e0       	ldi	r19, 0x01	; 1
    1106:	f9 01       	movw	r30, r18
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <main+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	d9 f7       	brne	.-10     	; 0x1106 <main+0x104>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1110:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1112:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1114:	88 b9       	out	0x08, r24	; 8
    1116:	88 ee       	ldi	r24, 0xE8	; 232
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	20 e7       	ldi	r18, 0x70	; 112
    111c:	31 e0       	ldi	r19, 0x01	; 1
    111e:	f9 01       	movw	r30, r18
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	d9 f7       	brne	.-10     	; 0x111e <main+0x11c>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1128:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    112a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    112c:	88 b9       	out	0x08, r24	; 8
    112e:	88 ee       	ldi	r24, 0xE8	; 232
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	20 e7       	ldi	r18, 0x70	; 112
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	f9 01       	movw	r30, r18
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <main+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	d9 f7       	brne	.-10     	; 0x1136 <main+0x134>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1140:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1142:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1144:	88 b9       	out	0x08, r24	; 8
    1146:	88 ee       	ldi	r24, 0xE8	; 232
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	20 e7       	ldi	r18, 0x70	; 112
    114c:	31 e0       	ldi	r19, 0x01	; 1
    114e:	f9 01       	movw	r30, r18
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <main+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1156:	d9 f7       	brne	.-10     	; 0x114e <main+0x14c>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1158:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    115a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    115c:	88 b9       	out	0x08, r24	; 8
    115e:	88 ee       	ldi	r24, 0xE8	; 232
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	20 e7       	ldi	r18, 0x70	; 112
    1164:	31 e0       	ldi	r19, 0x01	; 1
    1166:	f9 01       	movw	r30, r18
    1168:	31 97       	sbiw	r30, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <main+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	d9 f7       	brne	.-10     	; 0x1166 <main+0x164>
	_delay_ms(100);
	buzzer_off();
	_delay_ms(100);

	//code to head-back to starting position , i.e. Origin
	return_path_counter = reach_origin();
    1170:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <reach_origin>
    1174:	90 93 2d 03 	sts	0x032D, r25
    1178:	80 93 2c 03 	sts	0x032C, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    117c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    117e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1180:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1182:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1184:	82 e8       	ldi	r24, 0x82	; 130
    1186:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    118a:	80 93 2a 01 	sts	0x012A, r24
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1192:	12 e8       	ldi	r17, 0x82	; 130
    1194:	a8 c0       	rjmp	.+336    	; 0x12e6 <main+0x2e4>
				// To stop the Bot and then break out
				stop();
				break;
			}
					
			orient(value);
    1196:	ce 01       	movw	r24, r28
    1198:	0e 94 8a 07 	call	0xf14	; 0xf14 <orient>
			lcd_print(1,15,turnR,1);
*/
			
		}
		
		if(turnL == 1)
    119c:	80 91 28 03 	lds	r24, 0x0328
    11a0:	90 91 29 03 	lds	r25, 0x0329
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	c9 f4       	brne	.+50     	; 0x11da <main+0x1d8>
	 	 forward();
		velocity(180,180);
		 turnL = 0;
		 */

		 back_mm(50);
    11a8:	82 e3       	ldi	r24, 0x32	; 50
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 8a 05 	call	0xb14	; 0xb14 <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11b0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11b2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11b4:	82 b9       	out	0x02, r24	; 2

		 back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		left_degrees(50);
    11b6:	82 e3       	ldi	r24, 0x32	; 50
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 91 05 	call	0xb22	; 0xb22 <left_degrees>
		rotate_left_slowly();
    11be:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <rotate_left_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11c2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11c4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11c6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11c8:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11ca:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    11ce:	10 93 2a 01 	sts	0x012A, r17
		stop();
		left_degrees(50);
		rotate_left_slowly();
	 	forward();
		velocity(130,130);
		turnL = 0;
    11d2:	10 92 29 03 	sts	0x0329, r1
    11d6:	10 92 28 03 	sts	0x0328, r1
		}
		
		if(turnR == 1)
    11da:	80 91 2a 03 	lds	r24, 0x032A
    11de:	90 91 2b 03 	lds	r25, 0x032B
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <main+0x1e6>
    11e6:	46 cf       	rjmp	.-372    	; 0x1074 <main+0x72>
		//follow();
		velocity(180,180);
		 turnR = 0;
		*/

		back_mm(50);
    11e8:	82 e3       	ldi	r24, 0x32	; 50
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 8a 05 	call	0xb14	; 0xb14 <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11f0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11f2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11f4:	82 b9       	out	0x02, r24	; 2

		back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		right_degrees(50);
    11f6:	82 e3       	ldi	r24, 0x32	; 50
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 98 05 	call	0xb30	; 0xb30 <right_degrees>
		rotate_right_slowly();
    11fe:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <rotate_right_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1202:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1204:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1206:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1208:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    120a:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    120e:	10 93 2a 01 	sts	0x012A, r17
		stop();
		right_degrees(50);
		rotate_right_slowly();
	 	forward();
		velocity(130,130);
		turnR = 0;
    1212:	10 92 2b 03 	sts	0x032B, r1
    1216:	10 92 2a 03 	sts	0x032A, r1
    121a:	2c cf       	rjmp	.-424    	; 0x1074 <main+0x72>
	int counter = 0;
	int intermediate_value = 0;

	while(counter < return_path_counter)
	{	
		read_sensor();
    121c:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
		follow();
    1220:	0e 94 2f 06 	call	0xc5e	; 0xc5e <follow>
		
		if(isPlus())
    1224:	0e 94 7f 06 	call	0xcfe	; 0xcfe <isPlus>
    1228:	89 2b       	or	r24, r25
    122a:	f9 f0       	breq	.+62     	; 0x126a <main+0x268>
		{	
			read_sensor();
    122c:	0e 94 04 06 	call	0xc08	; 0xc08 <read_sensor>
			value = path_to_origin[counter];
    1230:	fe 01       	movw	r30, r28
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	e9 5b       	subi	r30, 0xB9	; 185
    1238:	fc 4f       	sbci	r31, 0xFC	; 252
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
			if (intermediate_value == FR)
			{
				// Move the bot forward, for location only , No movement on ground.
				value = F;
			}
			else if (value == LT)
    123e:	8b 30       	cpi	r24, 0x0B	; 11
    1240:	91 05       	cpc	r25, r1
    1242:	71 f0       	breq	.+28     	; 0x1260 <main+0x25e>
			{
				// Move the bot left , for location only , No movement on ground.
				value = L;
			}
			else if (value == RT)
    1244:	8c 30       	cpi	r24, 0x0C	; 12
    1246:	91 05       	cpc	r25, r1
    1248:	19 f4       	brne	.+6      	; 0x1250 <main+0x24e>
    124a:	83 e1       	ldi	r24, 0x13	; 19
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <main+0x262>
			{
				// Move the bot right, for location only , No movement on ground.
				value = R;
			}
			else if (value == ST)
    1250:	8d 30       	cpi	r24, 0x0D	; 13
    1252:	91 05       	cpc	r25, r1
    1254:	39 f4       	brne	.+14     	; 0x1264 <main+0x262>
			{
				value = M;
				// specially inserted as break will not allow the bot to stop using "orient(value)".
				orient(value);
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 8a 07 	call	0xf14	; 0xf14 <orient>
    125e:	4b c0       	rjmp	.+150    	; 0x12f6 <main+0x2f4>
				break;
    1260:	84 e1       	ldi	r24, 0x14	; 20
    1262:	90 e0       	ldi	r25, 0x00	; 0
		
		if(isPlus())
		{	
			read_sensor();
			value = path_to_origin[counter];
			counter++;
    1264:	21 96       	adiw	r28, 0x01	; 1
				// specially inserted as break will not allow the bot to stop using "orient(value)".
				orient(value);
				break;
			}
					
			orient(value);
    1266:	0e 94 8a 07 	call	0xf14	; 0xf14 <orient>
		
		}
		
		if(turnL == 1)
    126a:	80 91 28 03 	lds	r24, 0x0328
    126e:	90 91 29 03 	lds	r25, 0x0329
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	c9 f4       	brne	.+50     	; 0x12a8 <main+0x2a6>
		{
		 back_mm(50);
    1276:	82 e3       	ldi	r24, 0x32	; 50
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 8a 05 	call	0xb14	; 0xb14 <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    127e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1280:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1282:	82 b9       	out	0x02, r24	; 2
		{
		 back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		left_degrees(50);
    1284:	82 e3       	ldi	r24, 0x32	; 50
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 91 05 	call	0xb22	; 0xb22 <left_degrees>
		rotate_left_slowly();
    128c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <rotate_left_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1290:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1292:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1294:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1296:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1298:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    129c:	10 93 2a 01 	sts	0x012A, r17
		stop();
		left_degrees(50);
		rotate_left_slowly();
	 	forward();
		velocity(130,130);
		turnL = 0;
    12a0:	10 92 29 03 	sts	0x0329, r1
    12a4:	10 92 28 03 	sts	0x0328, r1
		}
		
		if(turnR == 1)
    12a8:	80 91 2a 03 	lds	r24, 0x032A
    12ac:	90 91 2b 03 	lds	r25, 0x032B
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	c9 f4       	brne	.+50     	; 0x12e6 <main+0x2e4>
		{
		back_mm(50);
    12b4:	82 e3       	ldi	r24, 0x32	; 50
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 8a 05 	call	0xb14	; 0xb14 <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12bc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12be:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12c0:	82 b9       	out	0x02, r24	; 2
		{
		back_mm(50);
		//stop();
		//velocity(130,130);
		stop();
		right_degrees(50);
    12c2:	82 e3       	ldi	r24, 0x32	; 50
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 98 05 	call	0xb30	; 0xb30 <right_degrees>
		rotate_right_slowly();
    12ca:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <rotate_right_slowly>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ce:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12d0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12d2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12d4:	82 b9       	out	0x02, r24	; 2


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12d6:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    12da:	10 93 2a 01 	sts	0x012A, r17
		stop();
		right_degrees(50);
		rotate_right_slowly();
	 	forward();
		velocity(130,130);
		turnR = 0;
    12de:	10 92 2b 03 	sts	0x032B, r1
    12e2:	10 92 2a 03 	sts	0x032A, r1
	forward();
	velocity(130,130);
	int counter = 0;
	int intermediate_value = 0;

	while(counter < return_path_counter)
    12e6:	80 91 2c 03 	lds	r24, 0x032C
    12ea:	90 91 2d 03 	lds	r25, 0x032D
    12ee:	c8 17       	cp	r28, r24
    12f0:	d9 07       	cpc	r29, r25
    12f2:	08 f4       	brcc	.+2      	; 0x12f6 <main+0x2f4>
    12f4:	93 cf       	rjmp	.-218    	; 0x121c <main+0x21a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    12f6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    12f8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    12fa:	88 b9       	out	0x08, r24	; 8
    12fc:	88 ee       	ldi	r24, 0xE8	; 232
    12fe:	93 e0       	ldi	r25, 0x03	; 3
    1300:	20 e7       	ldi	r18, 0x70	; 112
    1302:	31 e0       	ldi	r19, 0x01	; 1
    1304:	f9 01       	movw	r30, r18
    1306:	31 97       	sbiw	r30, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <main+0x304>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130c:	d9 f7       	brne	.-10     	; 0x1304 <main+0x302>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    130e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1310:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1312:	88 b9       	out	0x08, r24	; 8
    1314:	88 ee       	ldi	r24, 0xE8	; 232
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	20 e7       	ldi	r18, 0x70	; 112
    131a:	31 e0       	ldi	r19, 0x01	; 1
    131c:	f9 01       	movw	r30, r18
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x31c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	d9 f7       	brne	.-10     	; 0x131c <main+0x31a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1326:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1328:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    132a:	88 b9       	out	0x08, r24	; 8
    132c:	88 ee       	ldi	r24, 0xE8	; 232
    132e:	93 e0       	ldi	r25, 0x03	; 3
    1330:	20 e7       	ldi	r18, 0x70	; 112
    1332:	31 e0       	ldi	r19, 0x01	; 1
    1334:	f9 01       	movw	r30, r18
    1336:	31 97       	sbiw	r30, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <main+0x334>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133c:	d9 f7       	brne	.-10     	; 0x1334 <main+0x332>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    133e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1340:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1342:	88 b9       	out	0x08, r24	; 8
    1344:	88 ee       	ldi	r24, 0xE8	; 232
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	20 e7       	ldi	r18, 0x70	; 112
    134a:	31 e0       	ldi	r19, 0x01	; 1
    134c:	f9 01       	movw	r30, r18
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <main+0x34c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	d9 f7       	brne	.-10     	; 0x134c <main+0x34a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1356:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1358:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    135a:	88 b9       	out	0x08, r24	; 8
    135c:	88 ee       	ldi	r24, 0xE8	; 232
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	20 e7       	ldi	r18, 0x70	; 112
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	f9 01       	movw	r30, r18
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <main+0x364>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136c:	d9 f7       	brne	.-10     	; 0x1364 <main+0x362>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    136e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1370:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1372:	88 b9       	out	0x08, r24	; 8
    1374:	88 ee       	ldi	r24, 0xE8	; 232
    1376:	93 e0       	ldi	r25, 0x03	; 3
    1378:	20 e7       	ldi	r18, 0x70	; 112
    137a:	31 e0       	ldi	r19, 0x01	; 1
    137c:	f9 01       	movw	r30, r18
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <main+0x37c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1384:	d9 f7       	brne	.-10     	; 0x137c <main+0x37a>
	buzzer_on();
	_delay_ms(100);
	buzzer_off();
	_delay_ms(100);

}
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	08 95       	ret

00001392 <Sharp_GP2D12_estimation>:
// Applicableo Battery Only
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatunsisf>
    13a0:	2f ee       	ldi	r18, 0xEF	; 239
    13a2:	39 ec       	ldi	r19, 0xC9	; 201
    13a4:	43 e9       	ldi	r20, 0x93	; 147
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 14 11 	call	0x2228	; 0x2228 <pow>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	80 e8       	ldi	r24, 0x80	; 128
    13b6:	9f e3       	ldi	r25, 0x3F	; 63
    13b8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
    13bc:	2a e9       	ldi	r18, 0x9A	; 154
    13be:	39 ef       	ldi	r19, 0xF9	; 249
    13c0:	4e e2       	ldi	r20, 0x2E	; 46
    13c2:	55 e4       	ldi	r21, 0x45	; 69
    13c4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__mulsf3>
    13d4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fixsfsi>
    13d8:	88 27       	eor	r24, r24
    13da:	77 fd       	sbrc	r23, 7
    13dc:	80 95       	com	r24
    13de:	98 2f       	mov	r25, r24
    13e0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__floatsisf>
    13e4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fixsfsi>
    13e8:	9b 01       	movw	r18, r22
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	61 32       	cpi	r22, 0x21	; 33
    13ee:	78 07       	cpc	r23, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <Sharp_GP2D12_estimation+0x64>
    13f2:	20 e2       	ldi	r18, 0x20	; 32
    13f4:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
    13f6:	c9 01       	movw	r24, r18
    13f8:	08 95       	ret

000013fa <__fixunssfsi>:
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	7b 01       	movw	r14, r22
    1404:	8c 01       	movw	r16, r24
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	5f e4       	ldi	r21, 0x4F	; 79
    140e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__gesf2>
    1412:	88 23       	and	r24, r24
    1414:	8c f0       	brlt	.+34     	; 0x1438 <__fixunssfsi+0x3e>
    1416:	c8 01       	movw	r24, r16
    1418:	b7 01       	movw	r22, r14
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	5f e4       	ldi	r21, 0x4F	; 79
    1422:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__subsf3>
    1426:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fixsfsi>
    142a:	9b 01       	movw	r18, r22
    142c:	ac 01       	movw	r20, r24
    142e:	20 50       	subi	r18, 0x00	; 0
    1430:	30 40       	sbci	r19, 0x00	; 0
    1432:	40 40       	sbci	r20, 0x00	; 0
    1434:	50 48       	sbci	r21, 0x80	; 128
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <__fixunssfsi+0x4a>
    1438:	c8 01       	movw	r24, r16
    143a:	b7 01       	movw	r22, r14
    143c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fixsfsi>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	b9 01       	movw	r22, r18
    1446:	ca 01       	movw	r24, r20
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	08 95       	ret

00001452 <_fpadd_parts>:
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__prologue_saves__>
    145e:	dc 01       	movw	r26, r24
    1460:	2b 01       	movw	r4, r22
    1462:	fa 01       	movw	r30, r20
    1464:	9c 91       	ld	r25, X
    1466:	92 30       	cpi	r25, 0x02	; 2
    1468:	08 f4       	brcc	.+2      	; 0x146c <_fpadd_parts+0x1a>
    146a:	39 c1       	rjmp	.+626    	; 0x16de <_fpadd_parts+0x28c>
    146c:	eb 01       	movw	r28, r22
    146e:	88 81       	ld	r24, Y
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	08 f4       	brcc	.+2      	; 0x1476 <_fpadd_parts+0x24>
    1474:	33 c1       	rjmp	.+614    	; 0x16dc <_fpadd_parts+0x28a>
    1476:	94 30       	cpi	r25, 0x04	; 4
    1478:	69 f4       	brne	.+26     	; 0x1494 <_fpadd_parts+0x42>
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	09 f0       	breq	.+2      	; 0x1480 <_fpadd_parts+0x2e>
    147e:	2f c1       	rjmp	.+606    	; 0x16de <_fpadd_parts+0x28c>
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	9c 91       	ld	r25, X
    1484:	11 97       	sbiw	r26, 0x01	; 1
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	98 17       	cp	r25, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <_fpadd_parts+0x3c>
    148c:	28 c1       	rjmp	.+592    	; 0x16de <_fpadd_parts+0x28c>
    148e:	aa e0       	ldi	r26, 0x0A	; 10
    1490:	b2 e0       	ldi	r27, 0x02	; 2
    1492:	25 c1       	rjmp	.+586    	; 0x16de <_fpadd_parts+0x28c>
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	09 f4       	brne	.+2      	; 0x149a <_fpadd_parts+0x48>
    1498:	21 c1       	rjmp	.+578    	; 0x16dc <_fpadd_parts+0x28a>
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	a9 f4       	brne	.+42     	; 0x14c8 <_fpadd_parts+0x76>
    149e:	92 30       	cpi	r25, 0x02	; 2
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <_fpadd_parts+0x52>
    14a2:	1d c1       	rjmp	.+570    	; 0x16de <_fpadd_parts+0x28c>
    14a4:	9a 01       	movw	r18, r20
    14a6:	ad 01       	movw	r20, r26
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	ea 01       	movw	r28, r20
    14ac:	09 90       	ld	r0, Y+
    14ae:	ae 01       	movw	r20, r28
    14b0:	e9 01       	movw	r28, r18
    14b2:	09 92       	st	Y+, r0
    14b4:	9e 01       	movw	r18, r28
    14b6:	81 50       	subi	r24, 0x01	; 1
    14b8:	c1 f7       	brne	.-16     	; 0x14aa <_fpadd_parts+0x58>
    14ba:	e2 01       	movw	r28, r4
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	9c 91       	ld	r25, X
    14c2:	89 23       	and	r24, r25
    14c4:	81 83       	std	Z+1, r24	; 0x01
    14c6:	08 c1       	rjmp	.+528    	; 0x16d8 <_fpadd_parts+0x286>
    14c8:	92 30       	cpi	r25, 0x02	; 2
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_fpadd_parts+0x7c>
    14cc:	07 c1       	rjmp	.+526    	; 0x16dc <_fpadd_parts+0x28a>
    14ce:	12 96       	adiw	r26, 0x02	; 2
    14d0:	2d 90       	ld	r2, X+
    14d2:	3c 90       	ld	r3, X
    14d4:	13 97       	sbiw	r26, 0x03	; 3
    14d6:	eb 01       	movw	r28, r22
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	14 96       	adiw	r26, 0x04	; 4
    14de:	ad 90       	ld	r10, X+
    14e0:	bd 90       	ld	r11, X+
    14e2:	cd 90       	ld	r12, X+
    14e4:	dc 90       	ld	r13, X
    14e6:	17 97       	sbiw	r26, 0x07	; 7
    14e8:	ec 80       	ldd	r14, Y+4	; 0x04
    14ea:	fd 80       	ldd	r15, Y+5	; 0x05
    14ec:	0e 81       	ldd	r16, Y+6	; 0x06
    14ee:	1f 81       	ldd	r17, Y+7	; 0x07
    14f0:	91 01       	movw	r18, r2
    14f2:	28 1b       	sub	r18, r24
    14f4:	39 0b       	sbc	r19, r25
    14f6:	b9 01       	movw	r22, r18
    14f8:	37 ff       	sbrs	r19, 7
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <_fpadd_parts+0xb2>
    14fc:	66 27       	eor	r22, r22
    14fe:	77 27       	eor	r23, r23
    1500:	62 1b       	sub	r22, r18
    1502:	73 0b       	sbc	r23, r19
    1504:	60 32       	cpi	r22, 0x20	; 32
    1506:	71 05       	cpc	r23, r1
    1508:	0c f0       	brlt	.+2      	; 0x150c <_fpadd_parts+0xba>
    150a:	61 c0       	rjmp	.+194    	; 0x15ce <_fpadd_parts+0x17c>
    150c:	12 16       	cp	r1, r18
    150e:	13 06       	cpc	r1, r19
    1510:	6c f5       	brge	.+90     	; 0x156c <_fpadd_parts+0x11a>
    1512:	37 01       	movw	r6, r14
    1514:	48 01       	movw	r8, r16
    1516:	06 2e       	mov	r0, r22
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <_fpadd_parts+0xd0>
    151a:	96 94       	lsr	r9
    151c:	87 94       	ror	r8
    151e:	77 94       	ror	r7
    1520:	67 94       	ror	r6
    1522:	0a 94       	dec	r0
    1524:	d2 f7       	brpl	.-12     	; 0x151a <_fpadd_parts+0xc8>
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <_fpadd_parts+0xe6>
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	44 1f       	adc	r20, r20
    1536:	55 1f       	adc	r21, r21
    1538:	6a 95       	dec	r22
    153a:	d2 f7       	brpl	.-12     	; 0x1530 <_fpadd_parts+0xde>
    153c:	21 50       	subi	r18, 0x01	; 1
    153e:	30 40       	sbci	r19, 0x00	; 0
    1540:	40 40       	sbci	r20, 0x00	; 0
    1542:	50 40       	sbci	r21, 0x00	; 0
    1544:	2e 21       	and	r18, r14
    1546:	3f 21       	and	r19, r15
    1548:	40 23       	and	r20, r16
    154a:	51 23       	and	r21, r17
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	41 05       	cpc	r20, r1
    1552:	51 05       	cpc	r21, r1
    1554:	21 f0       	breq	.+8      	; 0x155e <_fpadd_parts+0x10c>
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	79 01       	movw	r14, r18
    1560:	8a 01       	movw	r16, r20
    1562:	e6 28       	or	r14, r6
    1564:	f7 28       	or	r15, r7
    1566:	08 29       	or	r16, r8
    1568:	19 29       	or	r17, r9
    156a:	3c c0       	rjmp	.+120    	; 0x15e4 <_fpadd_parts+0x192>
    156c:	23 2b       	or	r18, r19
    156e:	d1 f1       	breq	.+116    	; 0x15e4 <_fpadd_parts+0x192>
    1570:	26 0e       	add	r2, r22
    1572:	37 1e       	adc	r3, r23
    1574:	35 01       	movw	r6, r10
    1576:	46 01       	movw	r8, r12
    1578:	06 2e       	mov	r0, r22
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <_fpadd_parts+0x132>
    157c:	96 94       	lsr	r9
    157e:	87 94       	ror	r8
    1580:	77 94       	ror	r7
    1582:	67 94       	ror	r6
    1584:	0a 94       	dec	r0
    1586:	d2 f7       	brpl	.-12     	; 0x157c <_fpadd_parts+0x12a>
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	04 c0       	rjmp	.+8      	; 0x159a <_fpadd_parts+0x148>
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	44 1f       	adc	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	6a 95       	dec	r22
    159c:	d2 f7       	brpl	.-12     	; 0x1592 <_fpadd_parts+0x140>
    159e:	21 50       	subi	r18, 0x01	; 1
    15a0:	30 40       	sbci	r19, 0x00	; 0
    15a2:	40 40       	sbci	r20, 0x00	; 0
    15a4:	50 40       	sbci	r21, 0x00	; 0
    15a6:	2a 21       	and	r18, r10
    15a8:	3b 21       	and	r19, r11
    15aa:	4c 21       	and	r20, r12
    15ac:	5d 21       	and	r21, r13
    15ae:	21 15       	cp	r18, r1
    15b0:	31 05       	cpc	r19, r1
    15b2:	41 05       	cpc	r20, r1
    15b4:	51 05       	cpc	r21, r1
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <_fpadd_parts+0x16e>
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	59 01       	movw	r10, r18
    15c2:	6a 01       	movw	r12, r20
    15c4:	a6 28       	or	r10, r6
    15c6:	b7 28       	or	r11, r7
    15c8:	c8 28       	or	r12, r8
    15ca:	d9 28       	or	r13, r9
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <_fpadd_parts+0x192>
    15ce:	82 15       	cp	r24, r2
    15d0:	93 05       	cpc	r25, r3
    15d2:	2c f0       	brlt	.+10     	; 0x15de <_fpadd_parts+0x18c>
    15d4:	1c 01       	movw	r2, r24
    15d6:	aa 24       	eor	r10, r10
    15d8:	bb 24       	eor	r11, r11
    15da:	65 01       	movw	r12, r10
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <_fpadd_parts+0x192>
    15de:	ee 24       	eor	r14, r14
    15e0:	ff 24       	eor	r15, r15
    15e2:	87 01       	movw	r16, r14
    15e4:	11 96       	adiw	r26, 0x01	; 1
    15e6:	9c 91       	ld	r25, X
    15e8:	d2 01       	movw	r26, r4
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	8c 91       	ld	r24, X
    15ee:	98 17       	cp	r25, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <_fpadd_parts+0x1a2>
    15f2:	45 c0       	rjmp	.+138    	; 0x167e <_fpadd_parts+0x22c>
    15f4:	99 23       	and	r25, r25
    15f6:	39 f0       	breq	.+14     	; 0x1606 <_fpadd_parts+0x1b4>
    15f8:	a8 01       	movw	r20, r16
    15fa:	97 01       	movw	r18, r14
    15fc:	2a 19       	sub	r18, r10
    15fe:	3b 09       	sbc	r19, r11
    1600:	4c 09       	sbc	r20, r12
    1602:	5d 09       	sbc	r21, r13
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <_fpadd_parts+0x1c0>
    1606:	a6 01       	movw	r20, r12
    1608:	95 01       	movw	r18, r10
    160a:	2e 19       	sub	r18, r14
    160c:	3f 09       	sbc	r19, r15
    160e:	40 0b       	sbc	r20, r16
    1610:	51 0b       	sbc	r21, r17
    1612:	57 fd       	sbrc	r21, 7
    1614:	08 c0       	rjmp	.+16     	; 0x1626 <_fpadd_parts+0x1d4>
    1616:	11 82       	std	Z+1, r1	; 0x01
    1618:	33 82       	std	Z+3, r3	; 0x03
    161a:	22 82       	std	Z+2, r2	; 0x02
    161c:	24 83       	std	Z+4, r18	; 0x04
    161e:	35 83       	std	Z+5, r19	; 0x05
    1620:	46 83       	std	Z+6, r20	; 0x06
    1622:	57 83       	std	Z+7, r21	; 0x07
    1624:	1d c0       	rjmp	.+58     	; 0x1660 <_fpadd_parts+0x20e>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	81 83       	std	Z+1, r24	; 0x01
    162a:	33 82       	std	Z+3, r3	; 0x03
    162c:	22 82       	std	Z+2, r2	; 0x02
    162e:	88 27       	eor	r24, r24
    1630:	99 27       	eor	r25, r25
    1632:	dc 01       	movw	r26, r24
    1634:	82 1b       	sub	r24, r18
    1636:	93 0b       	sbc	r25, r19
    1638:	a4 0b       	sbc	r26, r20
    163a:	b5 0b       	sbc	r27, r21
    163c:	84 83       	std	Z+4, r24	; 0x04
    163e:	95 83       	std	Z+5, r25	; 0x05
    1640:	a6 83       	std	Z+6, r26	; 0x06
    1642:	b7 83       	std	Z+7, r27	; 0x07
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <_fpadd_parts+0x20e>
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	44 1f       	adc	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	24 83       	std	Z+4, r18	; 0x04
    1650:	35 83       	std	Z+5, r19	; 0x05
    1652:	46 83       	std	Z+6, r20	; 0x06
    1654:	57 83       	std	Z+7, r21	; 0x07
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	93 83       	std	Z+3, r25	; 0x03
    165e:	82 83       	std	Z+2, r24	; 0x02
    1660:	24 81       	ldd	r18, Z+4	; 0x04
    1662:	35 81       	ldd	r19, Z+5	; 0x05
    1664:	46 81       	ldd	r20, Z+6	; 0x06
    1666:	57 81       	ldd	r21, Z+7	; 0x07
    1668:	da 01       	movw	r26, r20
    166a:	c9 01       	movw	r24, r18
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	a1 09       	sbc	r26, r1
    1670:	b1 09       	sbc	r27, r1
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	af 4f       	sbci	r26, 0xFF	; 255
    1678:	bf 43       	sbci	r27, 0x3F	; 63
    167a:	28 f3       	brcs	.-54     	; 0x1646 <_fpadd_parts+0x1f4>
    167c:	0b c0       	rjmp	.+22     	; 0x1694 <_fpadd_parts+0x242>
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	33 82       	std	Z+3, r3	; 0x03
    1682:	22 82       	std	Z+2, r2	; 0x02
    1684:	ea 0c       	add	r14, r10
    1686:	fb 1c       	adc	r15, r11
    1688:	0c 1d       	adc	r16, r12
    168a:	1d 1d       	adc	r17, r13
    168c:	e4 82       	std	Z+4, r14	; 0x04
    168e:	f5 82       	std	Z+5, r15	; 0x05
    1690:	06 83       	std	Z+6, r16	; 0x06
    1692:	17 83       	std	Z+7, r17	; 0x07
    1694:	83 e0       	ldi	r24, 0x03	; 3
    1696:	80 83       	st	Z, r24
    1698:	24 81       	ldd	r18, Z+4	; 0x04
    169a:	35 81       	ldd	r19, Z+5	; 0x05
    169c:	46 81       	ldd	r20, Z+6	; 0x06
    169e:	57 81       	ldd	r21, Z+7	; 0x07
    16a0:	57 ff       	sbrs	r21, 7
    16a2:	1a c0       	rjmp	.+52     	; 0x16d8 <_fpadd_parts+0x286>
    16a4:	c9 01       	movw	r24, r18
    16a6:	aa 27       	eor	r26, r26
    16a8:	97 fd       	sbrc	r25, 7
    16aa:	a0 95       	com	r26
    16ac:	ba 2f       	mov	r27, r26
    16ae:	81 70       	andi	r24, 0x01	; 1
    16b0:	90 70       	andi	r25, 0x00	; 0
    16b2:	a0 70       	andi	r26, 0x00	; 0
    16b4:	b0 70       	andi	r27, 0x00	; 0
    16b6:	56 95       	lsr	r21
    16b8:	47 95       	ror	r20
    16ba:	37 95       	ror	r19
    16bc:	27 95       	ror	r18
    16be:	82 2b       	or	r24, r18
    16c0:	93 2b       	or	r25, r19
    16c2:	a4 2b       	or	r26, r20
    16c4:	b5 2b       	or	r27, r21
    16c6:	84 83       	std	Z+4, r24	; 0x04
    16c8:	95 83       	std	Z+5, r25	; 0x05
    16ca:	a6 83       	std	Z+6, r26	; 0x06
    16cc:	b7 83       	std	Z+7, r27	; 0x07
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	93 83       	std	Z+3, r25	; 0x03
    16d6:	82 83       	std	Z+2, r24	; 0x02
    16d8:	df 01       	movw	r26, r30
    16da:	01 c0       	rjmp	.+2      	; 0x16de <_fpadd_parts+0x28c>
    16dc:	d2 01       	movw	r26, r4
    16de:	cd 01       	movw	r24, r26
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	e2 e1       	ldi	r30, 0x12	; 18
    16e6:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__epilogue_restores__>

000016ea <__subsf3>:
    16ea:	a0 e2       	ldi	r26, 0x20	; 32
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e7       	ldi	r30, 0x7B	; 123
    16f0:	fb e0       	ldi	r31, 0x0B	; 11
    16f2:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
    16f6:	69 83       	std	Y+1, r22	; 0x01
    16f8:	7a 83       	std	Y+2, r23	; 0x02
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	2d 83       	std	Y+5, r18	; 0x05
    1700:	3e 83       	std	Y+6, r19	; 0x06
    1702:	4f 83       	std	Y+7, r20	; 0x07
    1704:	58 87       	std	Y+8, r21	; 0x08
    1706:	e9 e0       	ldi	r30, 0x09	; 9
    1708:	ee 2e       	mov	r14, r30
    170a:	f1 2c       	mov	r15, r1
    170c:	ec 0e       	add	r14, r28
    170e:	fd 1e       	adc	r15, r29
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	b7 01       	movw	r22, r14
    1716:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    171a:	8e 01       	movw	r16, r28
    171c:	0f 5e       	subi	r16, 0xEF	; 239
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	ce 01       	movw	r24, r28
    1722:	05 96       	adiw	r24, 0x05	; 5
    1724:	b8 01       	movw	r22, r16
    1726:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    172a:	8a 89       	ldd	r24, Y+18	; 0x12
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	89 27       	eor	r24, r25
    1730:	8a 8b       	std	Y+18, r24	; 0x12
    1732:	c7 01       	movw	r24, r14
    1734:	b8 01       	movw	r22, r16
    1736:	ae 01       	movw	r20, r28
    1738:	47 5e       	subi	r20, 0xE7	; 231
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	0e 94 29 0a 	call	0x1452	; 0x1452 <_fpadd_parts>
    1740:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    1744:	a0 96       	adiw	r28, 0x20	; 32
    1746:	e6 e0       	ldi	r30, 0x06	; 6
    1748:	0c 94 05 11 	jmp	0x220a	; 0x220a <__stack+0xb>

0000174c <__addsf3>:
    174c:	a0 e2       	ldi	r26, 0x20	; 32
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ec ea       	ldi	r30, 0xAC	; 172
    1752:	fb e0       	ldi	r31, 0x0B	; 11
    1754:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
    1758:	69 83       	std	Y+1, r22	; 0x01
    175a:	7a 83       	std	Y+2, r23	; 0x02
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	2d 83       	std	Y+5, r18	; 0x05
    1762:	3e 83       	std	Y+6, r19	; 0x06
    1764:	4f 83       	std	Y+7, r20	; 0x07
    1766:	58 87       	std	Y+8, r21	; 0x08
    1768:	f9 e0       	ldi	r31, 0x09	; 9
    176a:	ef 2e       	mov	r14, r31
    176c:	f1 2c       	mov	r15, r1
    176e:	ec 0e       	add	r14, r28
    1770:	fd 1e       	adc	r15, r29
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	b7 01       	movw	r22, r14
    1778:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    177c:	8e 01       	movw	r16, r28
    177e:	0f 5e       	subi	r16, 0xEF	; 239
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	ce 01       	movw	r24, r28
    1784:	05 96       	adiw	r24, 0x05	; 5
    1786:	b8 01       	movw	r22, r16
    1788:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    178c:	c7 01       	movw	r24, r14
    178e:	b8 01       	movw	r22, r16
    1790:	ae 01       	movw	r20, r28
    1792:	47 5e       	subi	r20, 0xE7	; 231
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	0e 94 29 0a 	call	0x1452	; 0x1452 <_fpadd_parts>
    179a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    179e:	a0 96       	adiw	r28, 0x20	; 32
    17a0:	e6 e0       	ldi	r30, 0x06	; 6
    17a2:	0c 94 05 11 	jmp	0x220a	; 0x220a <__stack+0xb>

000017a6 <__mulsf3>:
    17a6:	a0 e2       	ldi	r26, 0x20	; 32
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 ed       	ldi	r30, 0xD9	; 217
    17ac:	fb e0       	ldi	r31, 0x0B	; 11
    17ae:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__prologue_saves__>
    17b2:	69 83       	std	Y+1, r22	; 0x01
    17b4:	7a 83       	std	Y+2, r23	; 0x02
    17b6:	8b 83       	std	Y+3, r24	; 0x03
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	2d 83       	std	Y+5, r18	; 0x05
    17bc:	3e 83       	std	Y+6, r19	; 0x06
    17be:	4f 83       	std	Y+7, r20	; 0x07
    17c0:	58 87       	std	Y+8, r21	; 0x08
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	be 01       	movw	r22, r28
    17c8:	67 5f       	subi	r22, 0xF7	; 247
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    17d0:	ce 01       	movw	r24, r28
    17d2:	05 96       	adiw	r24, 0x05	; 5
    17d4:	be 01       	movw	r22, r28
    17d6:	6f 5e       	subi	r22, 0xEF	; 239
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    17de:	99 85       	ldd	r25, Y+9	; 0x09
    17e0:	92 30       	cpi	r25, 0x02	; 2
    17e2:	88 f0       	brcs	.+34     	; 0x1806 <__mulsf3+0x60>
    17e4:	89 89       	ldd	r24, Y+17	; 0x11
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	c8 f0       	brcs	.+50     	; 0x181c <__mulsf3+0x76>
    17ea:	94 30       	cpi	r25, 0x04	; 4
    17ec:	19 f4       	brne	.+6      	; 0x17f4 <__mulsf3+0x4e>
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	51 f4       	brne	.+20     	; 0x1806 <__mulsf3+0x60>
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__mulsf3+0x56>
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	29 f4       	brne	.+10     	; 0x1802 <__mulsf3+0x5c>
    17f8:	92 30       	cpi	r25, 0x02	; 2
    17fa:	81 f4       	brne	.+32     	; 0x181c <__mulsf3+0x76>
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	92 e0       	ldi	r25, 0x02	; 2
    1800:	c6 c0       	rjmp	.+396    	; 0x198e <__mulsf3+0x1e8>
    1802:	92 30       	cpi	r25, 0x02	; 2
    1804:	49 f4       	brne	.+18     	; 0x1818 <__mulsf3+0x72>
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	8a 89       	ldd	r24, Y+18	; 0x12
    180c:	98 13       	cpse	r25, r24
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	2a 87       	std	Y+10, r18	; 0x0a
    1812:	ce 01       	movw	r24, r28
    1814:	09 96       	adiw	r24, 0x09	; 9
    1816:	bb c0       	rjmp	.+374    	; 0x198e <__mulsf3+0x1e8>
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	49 f4       	brne	.+18     	; 0x182e <__mulsf3+0x88>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	8a 89       	ldd	r24, Y+18	; 0x12
    1822:	98 13       	cpse	r25, r24
    1824:	21 e0       	ldi	r18, 0x01	; 1
    1826:	2a 8b       	std	Y+18, r18	; 0x12
    1828:	ce 01       	movw	r24, r28
    182a:	41 96       	adiw	r24, 0x11	; 17
    182c:	b0 c0       	rjmp	.+352    	; 0x198e <__mulsf3+0x1e8>
    182e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1830:	3e 84       	ldd	r3, Y+14	; 0x0e
    1832:	4f 84       	ldd	r4, Y+15	; 0x0f
    1834:	58 88       	ldd	r5, Y+16	; 0x10
    1836:	6d 88       	ldd	r6, Y+21	; 0x15
    1838:	7e 88       	ldd	r7, Y+22	; 0x16
    183a:	8f 88       	ldd	r8, Y+23	; 0x17
    183c:	98 8c       	ldd	r9, Y+24	; 0x18
    183e:	ee 24       	eor	r14, r14
    1840:	ff 24       	eor	r15, r15
    1842:	87 01       	movw	r16, r14
    1844:	aa 24       	eor	r10, r10
    1846:	bb 24       	eor	r11, r11
    1848:	65 01       	movw	r12, r10
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	e0 e0       	ldi	r30, 0x00	; 0
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	c1 01       	movw	r24, r2
    1858:	81 70       	andi	r24, 0x01	; 1
    185a:	90 70       	andi	r25, 0x00	; 0
    185c:	89 2b       	or	r24, r25
    185e:	e9 f0       	breq	.+58     	; 0x189a <__mulsf3+0xf4>
    1860:	e6 0c       	add	r14, r6
    1862:	f7 1c       	adc	r15, r7
    1864:	08 1d       	adc	r16, r8
    1866:	19 1d       	adc	r17, r9
    1868:	9a 01       	movw	r18, r20
    186a:	ab 01       	movw	r20, r22
    186c:	2a 0d       	add	r18, r10
    186e:	3b 1d       	adc	r19, r11
    1870:	4c 1d       	adc	r20, r12
    1872:	5d 1d       	adc	r21, r13
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e0       	ldi	r26, 0x00	; 0
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e6 14       	cp	r14, r6
    187e:	f7 04       	cpc	r15, r7
    1880:	08 05       	cpc	r16, r8
    1882:	19 05       	cpc	r17, r9
    1884:	20 f4       	brcc	.+8      	; 0x188e <__mulsf3+0xe8>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	ba 01       	movw	r22, r20
    1890:	a9 01       	movw	r20, r18
    1892:	48 0f       	add	r20, r24
    1894:	59 1f       	adc	r21, r25
    1896:	6a 1f       	adc	r22, r26
    1898:	7b 1f       	adc	r23, r27
    189a:	aa 0c       	add	r10, r10
    189c:	bb 1c       	adc	r11, r11
    189e:	cc 1c       	adc	r12, r12
    18a0:	dd 1c       	adc	r13, r13
    18a2:	97 fe       	sbrs	r9, 7
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <__mulsf3+0x110>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e0       	ldi	r26, 0x00	; 0
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	a8 2a       	or	r10, r24
    18b0:	b9 2a       	or	r11, r25
    18b2:	ca 2a       	or	r12, r26
    18b4:	db 2a       	or	r13, r27
    18b6:	31 96       	adiw	r30, 0x01	; 1
    18b8:	e0 32       	cpi	r30, 0x20	; 32
    18ba:	f1 05       	cpc	r31, r1
    18bc:	49 f0       	breq	.+18     	; 0x18d0 <__mulsf3+0x12a>
    18be:	66 0c       	add	r6, r6
    18c0:	77 1c       	adc	r7, r7
    18c2:	88 1c       	adc	r8, r8
    18c4:	99 1c       	adc	r9, r9
    18c6:	56 94       	lsr	r5
    18c8:	47 94       	ror	r4
    18ca:	37 94       	ror	r3
    18cc:	27 94       	ror	r2
    18ce:	c3 cf       	rjmp	.-122    	; 0x1856 <__mulsf3+0xb0>
    18d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    18d2:	ea 89       	ldd	r30, Y+18	; 0x12
    18d4:	2b 89       	ldd	r18, Y+19	; 0x13
    18d6:	3c 89       	ldd	r19, Y+20	; 0x14
    18d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18da:	9c 85       	ldd	r25, Y+12	; 0x0c
    18dc:	28 0f       	add	r18, r24
    18de:	39 1f       	adc	r19, r25
    18e0:	2e 5f       	subi	r18, 0xFE	; 254
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	17 c0       	rjmp	.+46     	; 0x1914 <__mulsf3+0x16e>
    18e6:	ca 01       	movw	r24, r20
    18e8:	81 70       	andi	r24, 0x01	; 1
    18ea:	90 70       	andi	r25, 0x00	; 0
    18ec:	89 2b       	or	r24, r25
    18ee:	61 f0       	breq	.+24     	; 0x1908 <__mulsf3+0x162>
    18f0:	16 95       	lsr	r17
    18f2:	07 95       	ror	r16
    18f4:	f7 94       	ror	r15
    18f6:	e7 94       	ror	r14
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e8       	ldi	r27, 0x80	; 128
    1900:	e8 2a       	or	r14, r24
    1902:	f9 2a       	or	r15, r25
    1904:	0a 2b       	or	r16, r26
    1906:	1b 2b       	or	r17, r27
    1908:	76 95       	lsr	r23
    190a:	67 95       	ror	r22
    190c:	57 95       	ror	r21
    190e:	47 95       	ror	r20
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	77 fd       	sbrc	r23, 7
    1916:	e7 cf       	rjmp	.-50     	; 0x18e6 <__mulsf3+0x140>
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <__mulsf3+0x18c>
    191a:	44 0f       	add	r20, r20
    191c:	55 1f       	adc	r21, r21
    191e:	66 1f       	adc	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	17 fd       	sbrc	r17, 7
    1924:	41 60       	ori	r20, 0x01	; 1
    1926:	ee 0c       	add	r14, r14
    1928:	ff 1c       	adc	r15, r15
    192a:	00 1f       	adc	r16, r16
    192c:	11 1f       	adc	r17, r17
    192e:	21 50       	subi	r18, 0x01	; 1
    1930:	30 40       	sbci	r19, 0x00	; 0
    1932:	40 30       	cpi	r20, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	59 07       	cpc	r21, r25
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	69 07       	cpc	r22, r25
    193c:	90 e4       	ldi	r25, 0x40	; 64
    193e:	79 07       	cpc	r23, r25
    1940:	60 f3       	brcs	.-40     	; 0x191a <__mulsf3+0x174>
    1942:	2b 8f       	std	Y+27, r18	; 0x1b
    1944:	3c 8f       	std	Y+28, r19	; 0x1c
    1946:	db 01       	movw	r26, r22
    1948:	ca 01       	movw	r24, r20
    194a:	8f 77       	andi	r24, 0x7F	; 127
    194c:	90 70       	andi	r25, 0x00	; 0
    194e:	a0 70       	andi	r26, 0x00	; 0
    1950:	b0 70       	andi	r27, 0x00	; 0
    1952:	80 34       	cpi	r24, 0x40	; 64
    1954:	91 05       	cpc	r25, r1
    1956:	a1 05       	cpc	r26, r1
    1958:	b1 05       	cpc	r27, r1
    195a:	61 f4       	brne	.+24     	; 0x1974 <__mulsf3+0x1ce>
    195c:	47 fd       	sbrc	r20, 7
    195e:	0a c0       	rjmp	.+20     	; 0x1974 <__mulsf3+0x1ce>
    1960:	e1 14       	cp	r14, r1
    1962:	f1 04       	cpc	r15, r1
    1964:	01 05       	cpc	r16, r1
    1966:	11 05       	cpc	r17, r1
    1968:	29 f0       	breq	.+10     	; 0x1974 <__mulsf3+0x1ce>
    196a:	40 5c       	subi	r20, 0xC0	; 192
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	6f 4f       	sbci	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	40 78       	andi	r20, 0x80	; 128
    1974:	1a 8e       	std	Y+26, r1	; 0x1a
    1976:	fe 17       	cp	r31, r30
    1978:	11 f0       	breq	.+4      	; 0x197e <__mulsf3+0x1d8>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8a 8f       	std	Y+26, r24	; 0x1a
    197e:	4d 8f       	std	Y+29, r20	; 0x1d
    1980:	5e 8f       	std	Y+30, r21	; 0x1e
    1982:	6f 8f       	std	Y+31, r22	; 0x1f
    1984:	78 a3       	std	Y+32, r23	; 0x20
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	89 8f       	std	Y+25, r24	; 0x19
    198a:	ce 01       	movw	r24, r28
    198c:	49 96       	adiw	r24, 0x19	; 25
    198e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    1992:	a0 96       	adiw	r28, 0x20	; 32
    1994:	e2 e1       	ldi	r30, 0x12	; 18
    1996:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__epilogue_restores__>

0000199a <__divsf3>:
    199a:	a8 e1       	ldi	r26, 0x18	; 24
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 ed       	ldi	r30, 0xD3	; 211
    19a0:	fc e0       	ldi	r31, 0x0C	; 12
    19a2:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__prologue_saves__+0x10>
    19a6:	69 83       	std	Y+1, r22	; 0x01
    19a8:	7a 83       	std	Y+2, r23	; 0x02
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	2d 83       	std	Y+5, r18	; 0x05
    19b0:	3e 83       	std	Y+6, r19	; 0x06
    19b2:	4f 83       	std	Y+7, r20	; 0x07
    19b4:	58 87       	std	Y+8, r21	; 0x08
    19b6:	b9 e0       	ldi	r27, 0x09	; 9
    19b8:	eb 2e       	mov	r14, r27
    19ba:	f1 2c       	mov	r15, r1
    19bc:	ec 0e       	add	r14, r28
    19be:	fd 1e       	adc	r15, r29
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	b7 01       	movw	r22, r14
    19c6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    19ca:	8e 01       	movw	r16, r28
    19cc:	0f 5e       	subi	r16, 0xEF	; 239
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	ce 01       	movw	r24, r28
    19d2:	05 96       	adiw	r24, 0x05	; 5
    19d4:	b8 01       	movw	r22, r16
    19d6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    19da:	29 85       	ldd	r18, Y+9	; 0x09
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <__divsf3+0x48>
    19e0:	7e c0       	rjmp	.+252    	; 0x1ade <__divsf3+0x144>
    19e2:	39 89       	ldd	r19, Y+17	; 0x11
    19e4:	32 30       	cpi	r19, 0x02	; 2
    19e6:	10 f4       	brcc	.+4      	; 0x19ec <__divsf3+0x52>
    19e8:	b8 01       	movw	r22, r16
    19ea:	7c c0       	rjmp	.+248    	; 0x1ae4 <__divsf3+0x14a>
    19ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ee:	9a 89       	ldd	r25, Y+18	; 0x12
    19f0:	89 27       	eor	r24, r25
    19f2:	8a 87       	std	Y+10, r24	; 0x0a
    19f4:	24 30       	cpi	r18, 0x04	; 4
    19f6:	11 f0       	breq	.+4      	; 0x19fc <__divsf3+0x62>
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 f4       	brne	.+12     	; 0x1a08 <__divsf3+0x6e>
    19fc:	23 17       	cp	r18, r19
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <__divsf3+0x68>
    1a00:	6e c0       	rjmp	.+220    	; 0x1ade <__divsf3+0x144>
    1a02:	6a e0       	ldi	r22, 0x0A	; 10
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	6e c0       	rjmp	.+220    	; 0x1ae4 <__divsf3+0x14a>
    1a08:	34 30       	cpi	r19, 0x04	; 4
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <__divsf3+0x80>
    1a0c:	1d 86       	std	Y+13, r1	; 0x0d
    1a0e:	1e 86       	std	Y+14, r1	; 0x0e
    1a10:	1f 86       	std	Y+15, r1	; 0x0f
    1a12:	18 8a       	std	Y+16, r1	; 0x10
    1a14:	1c 86       	std	Y+12, r1	; 0x0c
    1a16:	1b 86       	std	Y+11, r1	; 0x0b
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__divsf3+0x88>
    1a1a:	32 30       	cpi	r19, 0x02	; 2
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <__divsf3+0x8c>
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
    1a20:	89 87       	std	Y+9, r24	; 0x09
    1a22:	b7 01       	movw	r22, r14
    1a24:	5f c0       	rjmp	.+190    	; 0x1ae4 <__divsf3+0x14a>
    1a26:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a28:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	28 1b       	sub	r18, r24
    1a30:	39 0b       	sbc	r19, r25
    1a32:	3c 87       	std	Y+12, r19	; 0x0c
    1a34:	2b 87       	std	Y+11, r18	; 0x0b
    1a36:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a38:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a3a:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a3c:	18 89       	ldd	r17, Y+16	; 0x10
    1a3e:	ad 88       	ldd	r10, Y+21	; 0x15
    1a40:	be 88       	ldd	r11, Y+22	; 0x16
    1a42:	cf 88       	ldd	r12, Y+23	; 0x17
    1a44:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a46:	ea 14       	cp	r14, r10
    1a48:	fb 04       	cpc	r15, r11
    1a4a:	0c 05       	cpc	r16, r12
    1a4c:	1d 05       	cpc	r17, r13
    1a4e:	40 f4       	brcc	.+16     	; 0x1a60 <__divsf3+0xc6>
    1a50:	ee 0c       	add	r14, r14
    1a52:	ff 1c       	adc	r15, r15
    1a54:	00 1f       	adc	r16, r16
    1a56:	11 1f       	adc	r17, r17
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	30 40       	sbci	r19, 0x00	; 0
    1a5c:	3c 87       	std	Y+12, r19	; 0x0c
    1a5e:	2b 87       	std	Y+11, r18	; 0x0b
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e0       	ldi	r26, 0x00	; 0
    1a6e:	b0 e4       	ldi	r27, 0x40	; 64
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	ea 14       	cp	r14, r10
    1a76:	fb 04       	cpc	r15, r11
    1a78:	0c 05       	cpc	r16, r12
    1a7a:	1d 05       	cpc	r17, r13
    1a7c:	40 f0       	brcs	.+16     	; 0x1a8e <__divsf3+0xf4>
    1a7e:	28 2b       	or	r18, r24
    1a80:	39 2b       	or	r19, r25
    1a82:	4a 2b       	or	r20, r26
    1a84:	5b 2b       	or	r21, r27
    1a86:	ea 18       	sub	r14, r10
    1a88:	fb 08       	sbc	r15, r11
    1a8a:	0c 09       	sbc	r16, r12
    1a8c:	1d 09       	sbc	r17, r13
    1a8e:	b6 95       	lsr	r27
    1a90:	a7 95       	ror	r26
    1a92:	97 95       	ror	r25
    1a94:	87 95       	ror	r24
    1a96:	ee 0c       	add	r14, r14
    1a98:	ff 1c       	adc	r15, r15
    1a9a:	00 1f       	adc	r16, r16
    1a9c:	11 1f       	adc	r17, r17
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	6f 31       	cpi	r22, 0x1F	; 31
    1aa4:	71 05       	cpc	r23, r1
    1aa6:	31 f7       	brne	.-52     	; 0x1a74 <__divsf3+0xda>
    1aa8:	da 01       	movw	r26, r20
    1aaa:	c9 01       	movw	r24, r18
    1aac:	8f 77       	andi	r24, 0x7F	; 127
    1aae:	90 70       	andi	r25, 0x00	; 0
    1ab0:	a0 70       	andi	r26, 0x00	; 0
    1ab2:	b0 70       	andi	r27, 0x00	; 0
    1ab4:	80 34       	cpi	r24, 0x40	; 64
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	a1 05       	cpc	r26, r1
    1aba:	b1 05       	cpc	r27, r1
    1abc:	61 f4       	brne	.+24     	; 0x1ad6 <__divsf3+0x13c>
    1abe:	27 fd       	sbrc	r18, 7
    1ac0:	0a c0       	rjmp	.+20     	; 0x1ad6 <__divsf3+0x13c>
    1ac2:	e1 14       	cp	r14, r1
    1ac4:	f1 04       	cpc	r15, r1
    1ac6:	01 05       	cpc	r16, r1
    1ac8:	11 05       	cpc	r17, r1
    1aca:	29 f0       	breq	.+10     	; 0x1ad6 <__divsf3+0x13c>
    1acc:	20 5c       	subi	r18, 0xC0	; 192
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	20 78       	andi	r18, 0x80	; 128
    1ad6:	2d 87       	std	Y+13, r18	; 0x0d
    1ad8:	3e 87       	std	Y+14, r19	; 0x0e
    1ada:	4f 87       	std	Y+15, r20	; 0x0f
    1adc:	58 8b       	std	Y+16, r21	; 0x10
    1ade:	be 01       	movw	r22, r28
    1ae0:	67 5f       	subi	r22, 0xF7	; 247
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    1aea:	68 96       	adiw	r28, 0x18	; 24
    1aec:	ea e0       	ldi	r30, 0x0A	; 10
    1aee:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__stack+0x3>

00001af2 <__gesf2>:
    1af2:	a8 e1       	ldi	r26, 0x18	; 24
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e7       	ldi	r30, 0x7F	; 127
    1af8:	fd e0       	ldi	r31, 0x0D	; 13
    1afa:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
    1afe:	69 83       	std	Y+1, r22	; 0x01
    1b00:	7a 83       	std	Y+2, r23	; 0x02
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	2d 83       	std	Y+5, r18	; 0x05
    1b08:	3e 83       	std	Y+6, r19	; 0x06
    1b0a:	4f 83       	std	Y+7, r20	; 0x07
    1b0c:	58 87       	std	Y+8, r21	; 0x08
    1b0e:	89 e0       	ldi	r24, 0x09	; 9
    1b10:	e8 2e       	mov	r14, r24
    1b12:	f1 2c       	mov	r15, r1
    1b14:	ec 0e       	add	r14, r28
    1b16:	fd 1e       	adc	r15, r29
    1b18:	ce 01       	movw	r24, r28
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	b7 01       	movw	r22, r14
    1b1e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    1b22:	8e 01       	movw	r16, r28
    1b24:	0f 5e       	subi	r16, 0xEF	; 239
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	ce 01       	movw	r24, r28
    1b2a:	05 96       	adiw	r24, 0x05	; 5
    1b2c:	b8 01       	movw	r22, r16
    1b2e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    1b32:	89 85       	ldd	r24, Y+9	; 0x09
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	40 f0       	brcs	.+16     	; 0x1b48 <__gesf2+0x56>
    1b38:	89 89       	ldd	r24, Y+17	; 0x11
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	28 f0       	brcs	.+10     	; 0x1b48 <__gesf2+0x56>
    1b3e:	c7 01       	movw	r24, r14
    1b40:	b8 01       	movw	r22, r16
    1b42:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__fpcmp_parts_f>
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <__gesf2+0x58>
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	68 96       	adiw	r28, 0x18	; 24
    1b4c:	e6 e0       	ldi	r30, 0x06	; 6
    1b4e:	0c 94 05 11 	jmp	0x220a	; 0x220a <__stack+0xb>

00001b52 <__floatsisf>:
    1b52:	a8 e0       	ldi	r26, 0x08	; 8
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	ef ea       	ldi	r30, 0xAF	; 175
    1b58:	fd e0       	ldi	r31, 0x0D	; 13
    1b5a:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__prologue_saves__+0x12>
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	da 01       	movw	r26, r20
    1b68:	c9 01       	movw	r24, r18
    1b6a:	88 27       	eor	r24, r24
    1b6c:	b7 fd       	sbrc	r27, 7
    1b6e:	83 95       	inc	r24
    1b70:	99 27       	eor	r25, r25
    1b72:	aa 27       	eor	r26, r26
    1b74:	bb 27       	eor	r27, r27
    1b76:	b8 2e       	mov	r11, r24
    1b78:	21 15       	cp	r18, r1
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	41 05       	cpc	r20, r1
    1b7e:	51 05       	cpc	r21, r1
    1b80:	19 f4       	brne	.+6      	; 0x1b88 <__floatsisf+0x36>
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	3a c0       	rjmp	.+116    	; 0x1bfc <__floatsisf+0xaa>
    1b88:	88 23       	and	r24, r24
    1b8a:	a9 f0       	breq	.+42     	; 0x1bb6 <__floatsisf+0x64>
    1b8c:	20 30       	cpi	r18, 0x00	; 0
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	38 07       	cpc	r19, r24
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	48 07       	cpc	r20, r24
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	58 07       	cpc	r21, r24
    1b9a:	29 f4       	brne	.+10     	; 0x1ba6 <__floatsisf+0x54>
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	9f ec       	ldi	r25, 0xCF	; 207
    1ba4:	30 c0       	rjmp	.+96     	; 0x1c06 <__floatsisf+0xb4>
    1ba6:	ee 24       	eor	r14, r14
    1ba8:	ff 24       	eor	r15, r15
    1baa:	87 01       	movw	r16, r14
    1bac:	e2 1a       	sub	r14, r18
    1bae:	f3 0a       	sbc	r15, r19
    1bb0:	04 0b       	sbc	r16, r20
    1bb2:	15 0b       	sbc	r17, r21
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <__floatsisf+0x68>
    1bb6:	79 01       	movw	r14, r18
    1bb8:	8a 01       	movw	r16, r20
    1bba:	8e e1       	ldi	r24, 0x1E	; 30
    1bbc:	c8 2e       	mov	r12, r24
    1bbe:	d1 2c       	mov	r13, r1
    1bc0:	dc 82       	std	Y+4, r13	; 0x04
    1bc2:	cb 82       	std	Y+3, r12	; 0x03
    1bc4:	ed 82       	std	Y+5, r14	; 0x05
    1bc6:	fe 82       	std	Y+6, r15	; 0x06
    1bc8:	0f 83       	std	Y+7, r16	; 0x07
    1bca:	18 87       	std	Y+8, r17	; 0x08
    1bcc:	c8 01       	movw	r24, r16
    1bce:	b7 01       	movw	r22, r14
    1bd0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__clzsi2>
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	18 16       	cp	r1, r24
    1bd8:	19 06       	cpc	r1, r25
    1bda:	84 f4       	brge	.+32     	; 0x1bfc <__floatsisf+0xaa>
    1bdc:	08 2e       	mov	r0, r24
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <__floatsisf+0x96>
    1be0:	ee 0c       	add	r14, r14
    1be2:	ff 1c       	adc	r15, r15
    1be4:	00 1f       	adc	r16, r16
    1be6:	11 1f       	adc	r17, r17
    1be8:	0a 94       	dec	r0
    1bea:	d2 f7       	brpl	.-12     	; 0x1be0 <__floatsisf+0x8e>
    1bec:	ed 82       	std	Y+5, r14	; 0x05
    1bee:	fe 82       	std	Y+6, r15	; 0x06
    1bf0:	0f 83       	std	Y+7, r16	; 0x07
    1bf2:	18 87       	std	Y+8, r17	; 0x08
    1bf4:	c8 1a       	sub	r12, r24
    1bf6:	d9 0a       	sbc	r13, r25
    1bf8:	dc 82       	std	Y+4, r13	; 0x04
    1bfa:	cb 82       	std	Y+3, r12	; 0x03
    1bfc:	ba 82       	std	Y+2, r11	; 0x02
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    1c06:	28 96       	adiw	r28, 0x08	; 8
    1c08:	e9 e0       	ldi	r30, 0x09	; 9
    1c0a:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>

00001c0e <__fixsfsi>:
    1c0e:	ac e0       	ldi	r26, 0x0C	; 12
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ed e0       	ldi	r30, 0x0D	; 13
    1c14:	fe e0       	ldi	r31, 0x0E	; 14
    1c16:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__prologue_saves__+0x20>
    1c1a:	69 83       	std	Y+1, r22	; 0x01
    1c1c:	7a 83       	std	Y+2, r23	; 0x02
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	be 01       	movw	r22, r28
    1c28:	6b 5f       	subi	r22, 0xFB	; 251
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__unpack_f>
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	61 f1       	breq	.+88     	; 0x1c8e <__fixsfsi+0x80>
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	50 f1       	brcs	.+84     	; 0x1c8e <__fixsfsi+0x80>
    1c3a:	84 30       	cpi	r24, 0x04	; 4
    1c3c:	21 f4       	brne	.+8      	; 0x1c46 <__fixsfsi+0x38>
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	88 23       	and	r24, r24
    1c42:	51 f1       	breq	.+84     	; 0x1c98 <__fixsfsi+0x8a>
    1c44:	2e c0       	rjmp	.+92     	; 0x1ca2 <__fixsfsi+0x94>
    1c46:	2f 81       	ldd	r18, Y+7	; 0x07
    1c48:	38 85       	ldd	r19, Y+8	; 0x08
    1c4a:	37 fd       	sbrc	r19, 7
    1c4c:	20 c0       	rjmp	.+64     	; 0x1c8e <__fixsfsi+0x80>
    1c4e:	6e 81       	ldd	r22, Y+6	; 0x06
    1c50:	2f 31       	cpi	r18, 0x1F	; 31
    1c52:	31 05       	cpc	r19, r1
    1c54:	1c f0       	brlt	.+6      	; 0x1c5c <__fixsfsi+0x4e>
    1c56:	66 23       	and	r22, r22
    1c58:	f9 f0       	breq	.+62     	; 0x1c98 <__fixsfsi+0x8a>
    1c5a:	23 c0       	rjmp	.+70     	; 0x1ca2 <__fixsfsi+0x94>
    1c5c:	8e e1       	ldi	r24, 0x1E	; 30
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	82 1b       	sub	r24, r18
    1c62:	93 0b       	sbc	r25, r19
    1c64:	29 85       	ldd	r18, Y+9	; 0x09
    1c66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c68:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <__fixsfsi+0x68>
    1c6e:	56 95       	lsr	r21
    1c70:	47 95       	ror	r20
    1c72:	37 95       	ror	r19
    1c74:	27 95       	ror	r18
    1c76:	8a 95       	dec	r24
    1c78:	d2 f7       	brpl	.-12     	; 0x1c6e <__fixsfsi+0x60>
    1c7a:	66 23       	and	r22, r22
    1c7c:	b1 f0       	breq	.+44     	; 0x1caa <__fixsfsi+0x9c>
    1c7e:	50 95       	com	r21
    1c80:	40 95       	com	r20
    1c82:	30 95       	com	r19
    1c84:	21 95       	neg	r18
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	4f 4f       	sbci	r20, 0xFF	; 255
    1c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <__fixsfsi+0x9c>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <__fixsfsi+0x9c>
    1c98:	2f ef       	ldi	r18, 0xFF	; 255
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f ef       	ldi	r20, 0xFF	; 255
    1c9e:	5f e7       	ldi	r21, 0x7F	; 127
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <__fixsfsi+0x9c>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	50 e8       	ldi	r21, 0x80	; 128
    1caa:	b9 01       	movw	r22, r18
    1cac:	ca 01       	movw	r24, r20
    1cae:	2c 96       	adiw	r28, 0x0c	; 12
    1cb0:	e2 e0       	ldi	r30, 0x02	; 2
    1cb2:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__stack+0x13>

00001cb6 <__floatunsisf>:
    1cb6:	a8 e0       	ldi	r26, 0x08	; 8
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e1 e6       	ldi	r30, 0x61	; 97
    1cbc:	fe e0       	ldi	r31, 0x0E	; 14
    1cbe:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__prologue_saves__+0x10>
    1cc2:	7b 01       	movw	r14, r22
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	61 15       	cp	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	81 05       	cpc	r24, r1
    1ccc:	91 05       	cpc	r25, r1
    1cce:	19 f4       	brne	.+6      	; 0x1cd6 <__floatunsisf+0x20>
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	60 c0       	rjmp	.+192    	; 0x1d96 <__floatunsisf+0xe0>
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	8e e1       	ldi	r24, 0x1E	; 30
    1cdc:	c8 2e       	mov	r12, r24
    1cde:	d1 2c       	mov	r13, r1
    1ce0:	dc 82       	std	Y+4, r13	; 0x04
    1ce2:	cb 82       	std	Y+3, r12	; 0x03
    1ce4:	ed 82       	std	Y+5, r14	; 0x05
    1ce6:	fe 82       	std	Y+6, r15	; 0x06
    1ce8:	0f 83       	std	Y+7, r16	; 0x07
    1cea:	18 87       	std	Y+8, r17	; 0x08
    1cec:	c8 01       	movw	r24, r16
    1cee:	b7 01       	movw	r22, r14
    1cf0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__clzsi2>
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	31 97       	sbiw	r30, 0x01	; 1
    1cf8:	f7 ff       	sbrs	r31, 7
    1cfa:	3b c0       	rjmp	.+118    	; 0x1d72 <__floatunsisf+0xbc>
    1cfc:	22 27       	eor	r18, r18
    1cfe:	33 27       	eor	r19, r19
    1d00:	2e 1b       	sub	r18, r30
    1d02:	3f 0b       	sbc	r19, r31
    1d04:	57 01       	movw	r10, r14
    1d06:	68 01       	movw	r12, r16
    1d08:	02 2e       	mov	r0, r18
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__floatunsisf+0x5e>
    1d0c:	d6 94       	lsr	r13
    1d0e:	c7 94       	ror	r12
    1d10:	b7 94       	ror	r11
    1d12:	a7 94       	ror	r10
    1d14:	0a 94       	dec	r0
    1d16:	d2 f7       	brpl	.-12     	; 0x1d0c <__floatunsisf+0x56>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	04 c0       	rjmp	.+8      	; 0x1d32 <__floatunsisf+0x7c>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	aa 1f       	adc	r26, r26
    1d30:	bb 1f       	adc	r27, r27
    1d32:	2a 95       	dec	r18
    1d34:	d2 f7       	brpl	.-12     	; 0x1d2a <__floatunsisf+0x74>
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	a1 09       	sbc	r26, r1
    1d3a:	b1 09       	sbc	r27, r1
    1d3c:	8e 21       	and	r24, r14
    1d3e:	9f 21       	and	r25, r15
    1d40:	a0 23       	and	r26, r16
    1d42:	b1 23       	and	r27, r17
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	a1 05       	cpc	r26, r1
    1d48:	b1 05       	cpc	r27, r1
    1d4a:	21 f0       	breq	.+8      	; 0x1d54 <__floatunsisf+0x9e>
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	4a 29       	or	r20, r10
    1d56:	5b 29       	or	r21, r11
    1d58:	6c 29       	or	r22, r12
    1d5a:	7d 29       	or	r23, r13
    1d5c:	4d 83       	std	Y+5, r20	; 0x05
    1d5e:	5e 83       	std	Y+6, r21	; 0x06
    1d60:	6f 83       	std	Y+7, r22	; 0x07
    1d62:	78 87       	std	Y+8, r23	; 0x08
    1d64:	8e e1       	ldi	r24, 0x1E	; 30
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	8e 1b       	sub	r24, r30
    1d6a:	9f 0b       	sbc	r25, r31
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <__floatunsisf+0xe0>
    1d72:	30 97       	sbiw	r30, 0x00	; 0
    1d74:	81 f0       	breq	.+32     	; 0x1d96 <__floatunsisf+0xe0>
    1d76:	0e 2e       	mov	r0, r30
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <__floatunsisf+0xcc>
    1d7a:	ee 0c       	add	r14, r14
    1d7c:	ff 1c       	adc	r15, r15
    1d7e:	00 1f       	adc	r16, r16
    1d80:	11 1f       	adc	r17, r17
    1d82:	0a 94       	dec	r0
    1d84:	d2 f7       	brpl	.-12     	; 0x1d7a <__floatunsisf+0xc4>
    1d86:	ed 82       	std	Y+5, r14	; 0x05
    1d88:	fe 82       	std	Y+6, r15	; 0x06
    1d8a:	0f 83       	std	Y+7, r16	; 0x07
    1d8c:	18 87       	std	Y+8, r17	; 0x08
    1d8e:	ce 1a       	sub	r12, r30
    1d90:	df 0a       	sbc	r13, r31
    1d92:	dc 82       	std	Y+4, r13	; 0x04
    1d94:	cb 82       	std	Y+3, r12	; 0x03
    1d96:	1a 82       	std	Y+2, r1	; 0x02
    1d98:	ce 01       	movw	r24, r28
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__pack_f>
    1da0:	28 96       	adiw	r28, 0x08	; 8
    1da2:	ea e0       	ldi	r30, 0x0A	; 10
    1da4:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__stack+0x3>

00001da8 <__clzsi2>:
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	7b 01       	movw	r14, r22
    1db2:	8c 01       	movw	r16, r24
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	e8 16       	cp	r14, r24
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	f8 06       	cpc	r15, r24
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	08 07       	cpc	r16, r24
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	18 07       	cpc	r17, r24
    1dc4:	88 f4       	brcc	.+34     	; 0x1de8 <__clzsi2+0x40>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	e8 16       	cp	r14, r24
    1dca:	f1 04       	cpc	r15, r1
    1dcc:	01 05       	cpc	r16, r1
    1dce:	11 05       	cpc	r17, r1
    1dd0:	31 f0       	breq	.+12     	; 0x1dde <__clzsi2+0x36>
    1dd2:	28 f0       	brcs	.+10     	; 0x1dde <__clzsi2+0x36>
    1dd4:	88 e0       	ldi	r24, 0x08	; 8
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	17 c0       	rjmp	.+46     	; 0x1e0c <__clzsi2+0x64>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	12 c0       	rjmp	.+36     	; 0x1e0c <__clzsi2+0x64>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	e8 16       	cp	r14, r24
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	f8 06       	cpc	r15, r24
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	08 07       	cpc	r16, r24
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	18 07       	cpc	r17, r24
    1df8:	28 f0       	brcs	.+10     	; 0x1e04 <__clzsi2+0x5c>
    1dfa:	88 e1       	ldi	r24, 0x18	; 24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <__clzsi2+0x64>
    1e04:	80 e1       	ldi	r24, 0x10	; 16
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	20 e2       	ldi	r18, 0x20	; 32
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	28 1b       	sub	r18, r24
    1e16:	39 0b       	sbc	r19, r25
    1e18:	4a 0b       	sbc	r20, r26
    1e1a:	5b 0b       	sbc	r21, r27
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <__clzsi2+0x7e>
    1e1e:	16 95       	lsr	r17
    1e20:	07 95       	ror	r16
    1e22:	f7 94       	ror	r15
    1e24:	e7 94       	ror	r14
    1e26:	8a 95       	dec	r24
    1e28:	d2 f7       	brpl	.-12     	; 0x1e1e <__clzsi2+0x76>
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	ee 5e       	subi	r30, 0xEE	; 238
    1e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e30:	80 81       	ld	r24, Z
    1e32:	28 1b       	sub	r18, r24
    1e34:	31 09       	sbc	r19, r1
    1e36:	41 09       	sbc	r20, r1
    1e38:	51 09       	sbc	r21, r1
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	08 95       	ret

00001e46 <__pack_f>:
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	fc 01       	movw	r30, r24
    1e52:	e4 80       	ldd	r14, Z+4	; 0x04
    1e54:	f5 80       	ldd	r15, Z+5	; 0x05
    1e56:	06 81       	ldd	r16, Z+6	; 0x06
    1e58:	17 81       	ldd	r17, Z+7	; 0x07
    1e5a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e5c:	80 81       	ld	r24, Z
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	48 f4       	brcc	.+18     	; 0x1e74 <__pack_f+0x2e>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e1       	ldi	r26, 0x10	; 16
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e8 2a       	or	r14, r24
    1e6c:	f9 2a       	or	r15, r25
    1e6e:	0a 2b       	or	r16, r26
    1e70:	1b 2b       	or	r17, r27
    1e72:	a5 c0       	rjmp	.+330    	; 0x1fbe <__pack_f+0x178>
    1e74:	84 30       	cpi	r24, 0x04	; 4
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__pack_f+0x34>
    1e78:	9f c0       	rjmp	.+318    	; 0x1fb8 <__pack_f+0x172>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <__pack_f+0x40>
    1e7e:	ee 24       	eor	r14, r14
    1e80:	ff 24       	eor	r15, r15
    1e82:	87 01       	movw	r16, r14
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <__pack_f+0x4a>
    1e86:	e1 14       	cp	r14, r1
    1e88:	f1 04       	cpc	r15, r1
    1e8a:	01 05       	cpc	r16, r1
    1e8c:	11 05       	cpc	r17, r1
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <__pack_f+0x50>
    1e90:	e0 e0       	ldi	r30, 0x00	; 0
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	96 c0       	rjmp	.+300    	; 0x1fc2 <__pack_f+0x17c>
    1e96:	62 81       	ldd	r22, Z+2	; 0x02
    1e98:	73 81       	ldd	r23, Z+3	; 0x03
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	62 38       	cpi	r22, 0x82	; 130
    1e9e:	79 07       	cpc	r23, r25
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <__pack_f+0x5e>
    1ea2:	5b c0       	rjmp	.+182    	; 0x1f5a <__pack_f+0x114>
    1ea4:	22 e8       	ldi	r18, 0x82	; 130
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	26 1b       	sub	r18, r22
    1eaa:	37 0b       	sbc	r19, r23
    1eac:	2a 31       	cpi	r18, 0x1A	; 26
    1eae:	31 05       	cpc	r19, r1
    1eb0:	2c f0       	brlt	.+10     	; 0x1ebc <__pack_f+0x76>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	2a c0       	rjmp	.+84     	; 0x1f10 <__pack_f+0xca>
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	a7 01       	movw	r20, r14
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <__pack_f+0x86>
    1ec4:	76 95       	lsr	r23
    1ec6:	67 95       	ror	r22
    1ec8:	57 95       	ror	r21
    1eca:	47 95       	ror	r20
    1ecc:	0a 94       	dec	r0
    1ece:	d2 f7       	brpl	.-12     	; 0x1ec4 <__pack_f+0x7e>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <__pack_f+0x9c>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	aa 1f       	adc	r26, r26
    1ee0:	bb 1f       	adc	r27, r27
    1ee2:	2a 95       	dec	r18
    1ee4:	d2 f7       	brpl	.-12     	; 0x1eda <__pack_f+0x94>
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	a1 09       	sbc	r26, r1
    1eea:	b1 09       	sbc	r27, r1
    1eec:	8e 21       	and	r24, r14
    1eee:	9f 21       	and	r25, r15
    1ef0:	a0 23       	and	r26, r16
    1ef2:	b1 23       	and	r27, r17
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	a1 05       	cpc	r26, r1
    1ef8:	b1 05       	cpc	r27, r1
    1efa:	21 f0       	breq	.+8      	; 0x1f04 <__pack_f+0xbe>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	9a 01       	movw	r18, r20
    1f06:	ab 01       	movw	r20, r22
    1f08:	28 2b       	or	r18, r24
    1f0a:	39 2b       	or	r19, r25
    1f0c:	4a 2b       	or	r20, r26
    1f0e:	5b 2b       	or	r21, r27
    1f10:	da 01       	movw	r26, r20
    1f12:	c9 01       	movw	r24, r18
    1f14:	8f 77       	andi	r24, 0x7F	; 127
    1f16:	90 70       	andi	r25, 0x00	; 0
    1f18:	a0 70       	andi	r26, 0x00	; 0
    1f1a:	b0 70       	andi	r27, 0x00	; 0
    1f1c:	80 34       	cpi	r24, 0x40	; 64
    1f1e:	91 05       	cpc	r25, r1
    1f20:	a1 05       	cpc	r26, r1
    1f22:	b1 05       	cpc	r27, r1
    1f24:	39 f4       	brne	.+14     	; 0x1f34 <__pack_f+0xee>
    1f26:	27 ff       	sbrs	r18, 7
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <__pack_f+0xf6>
    1f2a:	20 5c       	subi	r18, 0xC0	; 192
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <__pack_f+0xf6>
    1f34:	21 5c       	subi	r18, 0xC1	; 193
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	4f 4f       	sbci	r20, 0xFF	; 255
    1f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	20 30       	cpi	r18, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	3a 07       	cpc	r19, r26
    1f46:	a0 e0       	ldi	r26, 0x00	; 0
    1f48:	4a 07       	cpc	r20, r26
    1f4a:	a0 e4       	ldi	r26, 0x40	; 64
    1f4c:	5a 07       	cpc	r21, r26
    1f4e:	10 f0       	brcs	.+4      	; 0x1f54 <__pack_f+0x10e>
    1f50:	e1 e0       	ldi	r30, 0x01	; 1
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	79 01       	movw	r14, r18
    1f56:	8a 01       	movw	r16, r20
    1f58:	27 c0       	rjmp	.+78     	; 0x1fa8 <__pack_f+0x162>
    1f5a:	60 38       	cpi	r22, 0x80	; 128
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	64 f5       	brge	.+88     	; 0x1fb8 <__pack_f+0x172>
    1f60:	fb 01       	movw	r30, r22
    1f62:	e1 58       	subi	r30, 0x81	; 129
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	d8 01       	movw	r26, r16
    1f68:	c7 01       	movw	r24, r14
    1f6a:	8f 77       	andi	r24, 0x7F	; 127
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	a0 70       	andi	r26, 0x00	; 0
    1f70:	b0 70       	andi	r27, 0x00	; 0
    1f72:	80 34       	cpi	r24, 0x40	; 64
    1f74:	91 05       	cpc	r25, r1
    1f76:	a1 05       	cpc	r26, r1
    1f78:	b1 05       	cpc	r27, r1
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <__pack_f+0x144>
    1f7c:	e7 fe       	sbrs	r14, 7
    1f7e:	0d c0       	rjmp	.+26     	; 0x1f9a <__pack_f+0x154>
    1f80:	80 e4       	ldi	r24, 0x40	; 64
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <__pack_f+0x14c>
    1f8a:	8f e3       	ldi	r24, 0x3F	; 63
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e8 0e       	add	r14, r24
    1f94:	f9 1e       	adc	r15, r25
    1f96:	0a 1f       	adc	r16, r26
    1f98:	1b 1f       	adc	r17, r27
    1f9a:	17 ff       	sbrs	r17, 7
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <__pack_f+0x162>
    1f9e:	16 95       	lsr	r17
    1fa0:	07 95       	ror	r16
    1fa2:	f7 94       	ror	r15
    1fa4:	e7 94       	ror	r14
    1fa6:	31 96       	adiw	r30, 0x01	; 1
    1fa8:	87 e0       	ldi	r24, 0x07	; 7
    1faa:	16 95       	lsr	r17
    1fac:	07 95       	ror	r16
    1fae:	f7 94       	ror	r15
    1fb0:	e7 94       	ror	r14
    1fb2:	8a 95       	dec	r24
    1fb4:	d1 f7       	brne	.-12     	; 0x1faa <__pack_f+0x164>
    1fb6:	05 c0       	rjmp	.+10     	; 0x1fc2 <__pack_f+0x17c>
    1fb8:	ee 24       	eor	r14, r14
    1fba:	ff 24       	eor	r15, r15
    1fbc:	87 01       	movw	r16, r14
    1fbe:	ef ef       	ldi	r30, 0xFF	; 255
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	6e 2f       	mov	r22, r30
    1fc4:	67 95       	ror	r22
    1fc6:	66 27       	eor	r22, r22
    1fc8:	67 95       	ror	r22
    1fca:	90 2f       	mov	r25, r16
    1fcc:	9f 77       	andi	r25, 0x7F	; 127
    1fce:	d7 94       	ror	r13
    1fd0:	dd 24       	eor	r13, r13
    1fd2:	d7 94       	ror	r13
    1fd4:	8e 2f       	mov	r24, r30
    1fd6:	86 95       	lsr	r24
    1fd8:	49 2f       	mov	r20, r25
    1fda:	46 2b       	or	r20, r22
    1fdc:	58 2f       	mov	r21, r24
    1fde:	5d 29       	or	r21, r13
    1fe0:	b7 01       	movw	r22, r14
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	08 95       	ret

00001ff0 <__unpack_f>:
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	db 01       	movw	r26, r22
    1ff4:	40 81       	ld	r20, Z
    1ff6:	51 81       	ldd	r21, Z+1	; 0x01
    1ff8:	22 81       	ldd	r18, Z+2	; 0x02
    1ffa:	62 2f       	mov	r22, r18
    1ffc:	6f 77       	andi	r22, 0x7F	; 127
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	22 1f       	adc	r18, r18
    2002:	22 27       	eor	r18, r18
    2004:	22 1f       	adc	r18, r18
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	89 2f       	mov	r24, r25
    200a:	88 0f       	add	r24, r24
    200c:	82 2b       	or	r24, r18
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	99 1f       	adc	r25, r25
    2014:	99 27       	eor	r25, r25
    2016:	99 1f       	adc	r25, r25
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	9c 93       	st	X, r25
    201c:	11 97       	sbiw	r26, 0x01	; 1
    201e:	21 15       	cp	r18, r1
    2020:	31 05       	cpc	r19, r1
    2022:	a9 f5       	brne	.+106    	; 0x208e <__unpack_f+0x9e>
    2024:	41 15       	cp	r20, r1
    2026:	51 05       	cpc	r21, r1
    2028:	61 05       	cpc	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	11 f4       	brne	.+4      	; 0x2032 <__unpack_f+0x42>
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	37 c0       	rjmp	.+110    	; 0x20a0 <__unpack_f+0xb0>
    2032:	82 e8       	ldi	r24, 0x82	; 130
    2034:	9f ef       	ldi	r25, 0xFF	; 255
    2036:	13 96       	adiw	r26, 0x03	; 3
    2038:	9c 93       	st	X, r25
    203a:	8e 93       	st	-X, r24
    203c:	12 97       	sbiw	r26, 0x02	; 2
    203e:	9a 01       	movw	r18, r20
    2040:	ab 01       	movw	r20, r22
    2042:	67 e0       	ldi	r22, 0x07	; 7
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	44 1f       	adc	r20, r20
    204a:	55 1f       	adc	r21, r21
    204c:	6a 95       	dec	r22
    204e:	d1 f7       	brne	.-12     	; 0x2044 <__unpack_f+0x54>
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	8c 93       	st	X, r24
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <__unpack_f+0x80>
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	44 1f       	adc	r20, r20
    205c:	55 1f       	adc	r21, r21
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	8d 91       	ld	r24, X+
    2062:	9c 91       	ld	r25, X
    2064:	13 97       	sbiw	r26, 0x03	; 3
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	13 96       	adiw	r26, 0x03	; 3
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	12 97       	sbiw	r26, 0x02	; 2
    2070:	20 30       	cpi	r18, 0x00	; 0
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	38 07       	cpc	r19, r24
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	48 07       	cpc	r20, r24
    207a:	80 e4       	ldi	r24, 0x40	; 64
    207c:	58 07       	cpc	r21, r24
    207e:	58 f3       	brcs	.-42     	; 0x2056 <__unpack_f+0x66>
    2080:	14 96       	adiw	r26, 0x04	; 4
    2082:	2d 93       	st	X+, r18
    2084:	3d 93       	st	X+, r19
    2086:	4d 93       	st	X+, r20
    2088:	5c 93       	st	X, r21
    208a:	17 97       	sbiw	r26, 0x07	; 7
    208c:	08 95       	ret
    208e:	2f 3f       	cpi	r18, 0xFF	; 255
    2090:	31 05       	cpc	r19, r1
    2092:	79 f4       	brne	.+30     	; 0x20b2 <__unpack_f+0xc2>
    2094:	41 15       	cp	r20, r1
    2096:	51 05       	cpc	r21, r1
    2098:	61 05       	cpc	r22, r1
    209a:	71 05       	cpc	r23, r1
    209c:	19 f4       	brne	.+6      	; 0x20a4 <__unpack_f+0xb4>
    209e:	84 e0       	ldi	r24, 0x04	; 4
    20a0:	8c 93       	st	X, r24
    20a2:	08 95       	ret
    20a4:	64 ff       	sbrs	r22, 4
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <__unpack_f+0xbe>
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	8c 93       	st	X, r24
    20ac:	12 c0       	rjmp	.+36     	; 0x20d2 <__unpack_f+0xe2>
    20ae:	1c 92       	st	X, r1
    20b0:	10 c0       	rjmp	.+32     	; 0x20d2 <__unpack_f+0xe2>
    20b2:	2f 57       	subi	r18, 0x7F	; 127
    20b4:	30 40       	sbci	r19, 0x00	; 0
    20b6:	13 96       	adiw	r26, 0x03	; 3
    20b8:	3c 93       	st	X, r19
    20ba:	2e 93       	st	-X, r18
    20bc:	12 97       	sbiw	r26, 0x02	; 2
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	8c 93       	st	X, r24
    20c2:	87 e0       	ldi	r24, 0x07	; 7
    20c4:	44 0f       	add	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	66 1f       	adc	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	8a 95       	dec	r24
    20ce:	d1 f7       	brne	.-12     	; 0x20c4 <__unpack_f+0xd4>
    20d0:	70 64       	ori	r23, 0x40	; 64
    20d2:	14 96       	adiw	r26, 0x04	; 4
    20d4:	4d 93       	st	X+, r20
    20d6:	5d 93       	st	X+, r21
    20d8:	6d 93       	st	X+, r22
    20da:	7c 93       	st	X, r23
    20dc:	17 97       	sbiw	r26, 0x07	; 7
    20de:	08 95       	ret

000020e0 <__fpcmp_parts_f>:
    20e0:	1f 93       	push	r17
    20e2:	dc 01       	movw	r26, r24
    20e4:	fb 01       	movw	r30, r22
    20e6:	9c 91       	ld	r25, X
    20e8:	92 30       	cpi	r25, 0x02	; 2
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <__fpcmp_parts_f+0xe>
    20ec:	47 c0       	rjmp	.+142    	; 0x217c <__fpcmp_parts_f+0x9c>
    20ee:	80 81       	ld	r24, Z
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <__fpcmp_parts_f+0x16>
    20f4:	43 c0       	rjmp	.+134    	; 0x217c <__fpcmp_parts_f+0x9c>
    20f6:	94 30       	cpi	r25, 0x04	; 4
    20f8:	51 f4       	brne	.+20     	; 0x210e <__fpcmp_parts_f+0x2e>
    20fa:	11 96       	adiw	r26, 0x01	; 1
    20fc:	1c 91       	ld	r17, X
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	99 f5       	brne	.+102    	; 0x2168 <__fpcmp_parts_f+0x88>
    2102:	81 81       	ldd	r24, Z+1	; 0x01
    2104:	68 2f       	mov	r22, r24
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	61 1b       	sub	r22, r17
    210a:	71 09       	sbc	r23, r1
    210c:	3f c0       	rjmp	.+126    	; 0x218c <__fpcmp_parts_f+0xac>
    210e:	84 30       	cpi	r24, 0x04	; 4
    2110:	21 f0       	breq	.+8      	; 0x211a <__fpcmp_parts_f+0x3a>
    2112:	92 30       	cpi	r25, 0x02	; 2
    2114:	31 f4       	brne	.+12     	; 0x2122 <__fpcmp_parts_f+0x42>
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	b9 f1       	breq	.+110    	; 0x2188 <__fpcmp_parts_f+0xa8>
    211a:	81 81       	ldd	r24, Z+1	; 0x01
    211c:	88 23       	and	r24, r24
    211e:	89 f1       	breq	.+98     	; 0x2182 <__fpcmp_parts_f+0xa2>
    2120:	2d c0       	rjmp	.+90     	; 0x217c <__fpcmp_parts_f+0x9c>
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	1c 91       	ld	r17, X
    2126:	11 97       	sbiw	r26, 0x01	; 1
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	f1 f0       	breq	.+60     	; 0x2168 <__fpcmp_parts_f+0x88>
    212c:	81 81       	ldd	r24, Z+1	; 0x01
    212e:	18 17       	cp	r17, r24
    2130:	d9 f4       	brne	.+54     	; 0x2168 <__fpcmp_parts_f+0x88>
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	2d 91       	ld	r18, X+
    2136:	3c 91       	ld	r19, X
    2138:	13 97       	sbiw	r26, 0x03	; 3
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	82 17       	cp	r24, r18
    2140:	93 07       	cpc	r25, r19
    2142:	94 f0       	brlt	.+36     	; 0x2168 <__fpcmp_parts_f+0x88>
    2144:	28 17       	cp	r18, r24
    2146:	39 07       	cpc	r19, r25
    2148:	bc f0       	brlt	.+46     	; 0x2178 <__fpcmp_parts_f+0x98>
    214a:	14 96       	adiw	r26, 0x04	; 4
    214c:	8d 91       	ld	r24, X+
    214e:	9d 91       	ld	r25, X+
    2150:	0d 90       	ld	r0, X+
    2152:	bc 91       	ld	r27, X
    2154:	a0 2d       	mov	r26, r0
    2156:	24 81       	ldd	r18, Z+4	; 0x04
    2158:	35 81       	ldd	r19, Z+5	; 0x05
    215a:	46 81       	ldd	r20, Z+6	; 0x06
    215c:	57 81       	ldd	r21, Z+7	; 0x07
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	4a 07       	cpc	r20, r26
    2164:	5b 07       	cpc	r21, r27
    2166:	18 f4       	brcc	.+6      	; 0x216e <__fpcmp_parts_f+0x8e>
    2168:	11 23       	and	r17, r17
    216a:	41 f0       	breq	.+16     	; 0x217c <__fpcmp_parts_f+0x9c>
    216c:	0a c0       	rjmp	.+20     	; 0x2182 <__fpcmp_parts_f+0xa2>
    216e:	82 17       	cp	r24, r18
    2170:	93 07       	cpc	r25, r19
    2172:	a4 07       	cpc	r26, r20
    2174:	b5 07       	cpc	r27, r21
    2176:	40 f4       	brcc	.+16     	; 0x2188 <__fpcmp_parts_f+0xa8>
    2178:	11 23       	and	r17, r17
    217a:	19 f0       	breq	.+6      	; 0x2182 <__fpcmp_parts_f+0xa2>
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	05 c0       	rjmp	.+10     	; 0x218c <__fpcmp_parts_f+0xac>
    2182:	6f ef       	ldi	r22, 0xFF	; 255
    2184:	7f ef       	ldi	r23, 0xFF	; 255
    2186:	02 c0       	rjmp	.+4      	; 0x218c <__fpcmp_parts_f+0xac>
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	cb 01       	movw	r24, r22
    218e:	1f 91       	pop	r17
    2190:	08 95       	ret

00002192 <__udivmodhi4>:
    2192:	aa 1b       	sub	r26, r26
    2194:	bb 1b       	sub	r27, r27
    2196:	51 e1       	ldi	r21, 0x11	; 17
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <__udivmodhi4_ep>

0000219a <__udivmodhi4_loop>:
    219a:	aa 1f       	adc	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	a6 17       	cp	r26, r22
    21a0:	b7 07       	cpc	r27, r23
    21a2:	10 f0       	brcs	.+4      	; 0x21a8 <__udivmodhi4_ep>
    21a4:	a6 1b       	sub	r26, r22
    21a6:	b7 0b       	sbc	r27, r23

000021a8 <__udivmodhi4_ep>:
    21a8:	88 1f       	adc	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	5a 95       	dec	r21
    21ae:	a9 f7       	brne	.-22     	; 0x219a <__udivmodhi4_loop>
    21b0:	80 95       	com	r24
    21b2:	90 95       	com	r25
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	08 95       	ret

000021ba <__prologue_saves__>:
    21ba:	2f 92       	push	r2
    21bc:	3f 92       	push	r3
    21be:	4f 92       	push	r4
    21c0:	5f 92       	push	r5
    21c2:	6f 92       	push	r6
    21c4:	7f 92       	push	r7
    21c6:	8f 92       	push	r8
    21c8:	9f 92       	push	r9
    21ca:	af 92       	push	r10
    21cc:	bf 92       	push	r11
    21ce:	cf 92       	push	r12
    21d0:	df 92       	push	r13
    21d2:	ef 92       	push	r14
    21d4:	ff 92       	push	r15
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	ca 1b       	sub	r28, r26
    21e4:	db 0b       	sbc	r29, r27
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	19 94       	eijmp

000021f2 <__epilogue_restores__>:
    21f2:	2a 88       	ldd	r2, Y+18	; 0x12
    21f4:	39 88       	ldd	r3, Y+17	; 0x11
    21f6:	48 88       	ldd	r4, Y+16	; 0x10
    21f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    21fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    21fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    21fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2200:	9b 84       	ldd	r9, Y+11	; 0x0b
    2202:	aa 84       	ldd	r10, Y+10	; 0x0a
    2204:	b9 84       	ldd	r11, Y+9	; 0x09
    2206:	c8 84       	ldd	r12, Y+8	; 0x08
    2208:	df 80       	ldd	r13, Y+7	; 0x07
    220a:	ee 80       	ldd	r14, Y+6	; 0x06
    220c:	fd 80       	ldd	r15, Y+5	; 0x05
    220e:	0c 81       	ldd	r16, Y+4	; 0x04
    2210:	1b 81       	ldd	r17, Y+3	; 0x03
    2212:	aa 81       	ldd	r26, Y+2	; 0x02
    2214:	b9 81       	ldd	r27, Y+1	; 0x01
    2216:	ce 0f       	add	r28, r30
    2218:	d1 1d       	adc	r29, r1
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	ed 01       	movw	r28, r26
    2226:	08 95       	ret

00002228 <pow>:
    2228:	fa 01       	movw	r30, r20
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	30 96       	adiw	r30, 0x00	; 0
    2230:	21 05       	cpc	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	99 f1       	breq	.+102    	; 0x229c <pow+0x74>
    2236:	61 15       	cp	r22, r1
    2238:	71 05       	cpc	r23, r1
    223a:	61 f4       	brne	.+24     	; 0x2254 <pow+0x2c>
    223c:	80 38       	cpi	r24, 0x80	; 128
    223e:	bf e3       	ldi	r27, 0x3F	; 63
    2240:	9b 07       	cpc	r25, r27
    2242:	49 f1       	breq	.+82     	; 0x2296 <pow+0x6e>
    2244:	68 94       	set
    2246:	90 38       	cpi	r25, 0x80	; 128
    2248:	81 05       	cpc	r24, r1
    224a:	61 f0       	breq	.+24     	; 0x2264 <pow+0x3c>
    224c:	80 38       	cpi	r24, 0x80	; 128
    224e:	bf ef       	ldi	r27, 0xFF	; 255
    2250:	9b 07       	cpc	r25, r27
    2252:	41 f0       	breq	.+16     	; 0x2264 <pow+0x3c>
    2254:	99 23       	and	r25, r25
    2256:	42 f5       	brpl	.+80     	; 0x22a8 <pow+0x80>
    2258:	ff 3f       	cpi	r31, 0xFF	; 255
    225a:	e1 05       	cpc	r30, r1
    225c:	31 05       	cpc	r19, r1
    225e:	21 05       	cpc	r18, r1
    2260:	11 f1       	breq	.+68     	; 0x22a6 <pow+0x7e>
    2262:	e8 94       	clt
    2264:	08 94       	sec
    2266:	e7 95       	ror	r30
    2268:	d9 01       	movw	r26, r18
    226a:	aa 23       	and	r26, r26
    226c:	29 f4       	brne	.+10     	; 0x2278 <pow+0x50>
    226e:	ab 2f       	mov	r26, r27
    2270:	be 2f       	mov	r27, r30
    2272:	f8 5f       	subi	r31, 0xF8	; 248
    2274:	d0 f3       	brcs	.-12     	; 0x226a <pow+0x42>
    2276:	10 c0       	rjmp	.+32     	; 0x2298 <pow+0x70>
    2278:	ff 5f       	subi	r31, 0xFF	; 255
    227a:	70 f4       	brcc	.+28     	; 0x2298 <pow+0x70>
    227c:	a6 95       	lsr	r26
    227e:	e0 f7       	brcc	.-8      	; 0x2278 <pow+0x50>
    2280:	f7 39       	cpi	r31, 0x97	; 151
    2282:	50 f0       	brcs	.+20     	; 0x2298 <pow+0x70>
    2284:	19 f0       	breq	.+6      	; 0x228c <pow+0x64>
    2286:	ff 3a       	cpi	r31, 0xAF	; 175
    2288:	38 f4       	brcc	.+14     	; 0x2298 <pow+0x70>
    228a:	9f 77       	andi	r25, 0x7F	; 127
    228c:	9f 93       	push	r25
    228e:	0c d0       	rcall	.+24     	; 0x22a8 <pow+0x80>
    2290:	0f 90       	pop	r0
    2292:	07 fc       	sbrc	r0, 7
    2294:	90 58       	subi	r25, 0x80	; 128
    2296:	08 95       	ret
    2298:	3e f0       	brts	.+14     	; 0x22a8 <pow+0x80>
    229a:	49 c0       	rjmp	.+146    	; 0x232e <__fp_nan>
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	80 e8       	ldi	r24, 0x80	; 128
    22a2:	9f e3       	ldi	r25, 0x3F	; 63
    22a4:	08 95       	ret
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	9f 77       	andi	r25, 0x7F	; 127
    22aa:	5f 93       	push	r21
    22ac:	4f 93       	push	r20
    22ae:	3f 93       	push	r19
    22b0:	2f 93       	push	r18
    22b2:	d0 d0       	rcall	.+416    	; 0x2454 <log>
    22b4:	2f 91       	pop	r18
    22b6:	3f 91       	pop	r19
    22b8:	4f 91       	pop	r20
    22ba:	5f 91       	pop	r21
    22bc:	74 da       	rcall	.-2840   	; 0x17a6 <__mulsf3>
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <exp>
    22c0:	19 f4       	brne	.+6      	; 0x22c8 <pow+0xa0>
    22c2:	0e f0       	brts	.+2      	; 0x22c6 <pow+0x9e>
    22c4:	2e c0       	rjmp	.+92     	; 0x2322 <__fp_inf>
    22c6:	7d c0       	rjmp	.+250    	; 0x23c2 <__fp_zero>
    22c8:	32 c0       	rjmp	.+100    	; 0x232e <__fp_nan>

000022ca <exp>:
    22ca:	61 d0       	rcall	.+194    	; 0x238e <__fp_splitA>
    22cc:	c8 f3       	brcs	.-14     	; 0x22c0 <pow+0x98>
    22ce:	96 38       	cpi	r25, 0x86	; 134
    22d0:	c0 f7       	brcc	.-16     	; 0x22c2 <pow+0x9a>
    22d2:	07 f8       	bld	r0, 7
    22d4:	0f 92       	push	r0
    22d6:	e8 94       	clt
    22d8:	2b e3       	ldi	r18, 0x3B	; 59
    22da:	3a ea       	ldi	r19, 0xAA	; 170
    22dc:	48 eb       	ldi	r20, 0xB8	; 184
    22de:	5f e7       	ldi	r21, 0x7F	; 127
    22e0:	38 d1       	rcall	.+624    	; 0x2552 <__mulsf3_pse>
    22e2:	0f 92       	push	r0
    22e4:	0f 92       	push	r0
    22e6:	0f 92       	push	r0
    22e8:	4d b7       	in	r20, 0x3d	; 61
    22ea:	5e b7       	in	r21, 0x3e	; 62
    22ec:	0f 92       	push	r0
    22ee:	f2 d0       	rcall	.+484    	; 0x24d4 <modf>
    22f0:	e4 ee       	ldi	r30, 0xE4	; 228
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	1f d0       	rcall	.+62     	; 0x2334 <__fp_powser>
    22f6:	4f 91       	pop	r20
    22f8:	5f 91       	pop	r21
    22fa:	ef 91       	pop	r30
    22fc:	ff 91       	pop	r31
    22fe:	e5 95       	asr	r30
    2300:	ee 1f       	adc	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	49 f0       	breq	.+18     	; 0x2318 <exp+0x4e>
    2306:	fe 57       	subi	r31, 0x7E	; 126
    2308:	e0 68       	ori	r30, 0x80	; 128
    230a:	44 27       	eor	r20, r20
    230c:	ee 0f       	add	r30, r30
    230e:	44 1f       	adc	r20, r20
    2310:	fa 95       	dec	r31
    2312:	e1 f7       	brne	.-8      	; 0x230c <exp+0x42>
    2314:	41 95       	neg	r20
    2316:	55 0b       	sbc	r21, r21
    2318:	64 d0       	rcall	.+200    	; 0x23e2 <ldexp>
    231a:	0f 90       	pop	r0
    231c:	07 fe       	sbrs	r0, 7
    231e:	58 c0       	rjmp	.+176    	; 0x23d0 <inverse>
    2320:	08 95       	ret

00002322 <__fp_inf>:
    2322:	97 f9       	bld	r25, 7
    2324:	9f 67       	ori	r25, 0x7F	; 127
    2326:	80 e8       	ldi	r24, 0x80	; 128
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	08 95       	ret

0000232e <__fp_nan>:
    232e:	9f ef       	ldi	r25, 0xFF	; 255
    2330:	80 ec       	ldi	r24, 0xC0	; 192
    2332:	08 95       	ret

00002334 <__fp_powser>:
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	1f 93       	push	r17
    233a:	0f 93       	push	r16
    233c:	ff 92       	push	r15
    233e:	ef 92       	push	r14
    2340:	df 92       	push	r13
    2342:	7b 01       	movw	r14, r22
    2344:	8c 01       	movw	r16, r24
    2346:	68 94       	set
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <__fp_powser+0x20>
    234a:	da 2e       	mov	r13, r26
    234c:	ef 01       	movw	r28, r30
    234e:	ff d0       	rcall	.+510    	; 0x254e <__mulsf3x>
    2350:	fe 01       	movw	r30, r28
    2352:	e8 94       	clt
    2354:	a5 91       	lpm	r26, Z+
    2356:	25 91       	lpm	r18, Z+
    2358:	35 91       	lpm	r19, Z+
    235a:	45 91       	lpm	r20, Z+
    235c:	55 91       	lpm	r21, Z+
    235e:	ae f3       	brts	.-22     	; 0x234a <__fp_powser+0x16>
    2360:	ef 01       	movw	r28, r30
    2362:	59 d1       	rcall	.+690    	; 0x2616 <__addsf3x>
    2364:	fe 01       	movw	r30, r28
    2366:	97 01       	movw	r18, r14
    2368:	a8 01       	movw	r20, r16
    236a:	da 94       	dec	r13
    236c:	79 f7       	brne	.-34     	; 0x234c <__fp_powser+0x18>
    236e:	df 90       	pop	r13
    2370:	ef 90       	pop	r14
    2372:	ff 90       	pop	r15
    2374:	0f 91       	pop	r16
    2376:	1f 91       	pop	r17
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <__fp_split3>:
    237e:	57 fd       	sbrc	r21, 7
    2380:	90 58       	subi	r25, 0x80	; 128
    2382:	44 0f       	add	r20, r20
    2384:	55 1f       	adc	r21, r21
    2386:	59 f0       	breq	.+22     	; 0x239e <__fp_splitA+0x10>
    2388:	5f 3f       	cpi	r21, 0xFF	; 255
    238a:	71 f0       	breq	.+28     	; 0x23a8 <__fp_splitA+0x1a>
    238c:	47 95       	ror	r20

0000238e <__fp_splitA>:
    238e:	88 0f       	add	r24, r24
    2390:	97 fb       	bst	r25, 7
    2392:	99 1f       	adc	r25, r25
    2394:	61 f0       	breq	.+24     	; 0x23ae <__fp_splitA+0x20>
    2396:	9f 3f       	cpi	r25, 0xFF	; 255
    2398:	79 f0       	breq	.+30     	; 0x23b8 <__fp_splitA+0x2a>
    239a:	87 95       	ror	r24
    239c:	08 95       	ret
    239e:	12 16       	cp	r1, r18
    23a0:	13 06       	cpc	r1, r19
    23a2:	14 06       	cpc	r1, r20
    23a4:	55 1f       	adc	r21, r21
    23a6:	f2 cf       	rjmp	.-28     	; 0x238c <__fp_split3+0xe>
    23a8:	46 95       	lsr	r20
    23aa:	f1 df       	rcall	.-30     	; 0x238e <__fp_splitA>
    23ac:	08 c0       	rjmp	.+16     	; 0x23be <__fp_splitA+0x30>
    23ae:	16 16       	cp	r1, r22
    23b0:	17 06       	cpc	r1, r23
    23b2:	18 06       	cpc	r1, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	f1 cf       	rjmp	.-30     	; 0x239a <__fp_splitA+0xc>
    23b8:	86 95       	lsr	r24
    23ba:	71 05       	cpc	r23, r1
    23bc:	61 05       	cpc	r22, r1
    23be:	08 94       	sec
    23c0:	08 95       	ret

000023c2 <__fp_zero>:
    23c2:	e8 94       	clt

000023c4 <__fp_szero>:
    23c4:	bb 27       	eor	r27, r27
    23c6:	66 27       	eor	r22, r22
    23c8:	77 27       	eor	r23, r23
    23ca:	cb 01       	movw	r24, r22
    23cc:	97 f9       	bld	r25, 7
    23ce:	08 95       	ret

000023d0 <inverse>:
    23d0:	9b 01       	movw	r18, r22
    23d2:	ac 01       	movw	r20, r24
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	80 e8       	ldi	r24, 0x80	; 128
    23da:	9f e3       	ldi	r25, 0x3F	; 63
    23dc:	de ca       	rjmp	.-2628   	; 0x199a <__divsf3>
    23de:	a1 cf       	rjmp	.-190    	; 0x2322 <__fp_inf>
    23e0:	6d c1       	rjmp	.+730    	; 0x26bc <__fp_mpack>

000023e2 <ldexp>:
    23e2:	d5 df       	rcall	.-86     	; 0x238e <__fp_splitA>
    23e4:	e8 f3       	brcs	.-6      	; 0x23e0 <inverse+0x10>
    23e6:	99 23       	and	r25, r25
    23e8:	d9 f3       	breq	.-10     	; 0x23e0 <inverse+0x10>
    23ea:	94 0f       	add	r25, r20
    23ec:	51 1d       	adc	r21, r1
    23ee:	bb f3       	brvs	.-18     	; 0x23de <inverse+0xe>
    23f0:	91 50       	subi	r25, 0x01	; 1
    23f2:	50 40       	sbci	r21, 0x00	; 0
    23f4:	94 f0       	brlt	.+36     	; 0x241a <ldexp+0x38>
    23f6:	59 f0       	breq	.+22     	; 0x240e <ldexp+0x2c>
    23f8:	88 23       	and	r24, r24
    23fa:	32 f0       	brmi	.+12     	; 0x2408 <ldexp+0x26>
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	91 50       	subi	r25, 0x01	; 1
    2404:	50 40       	sbci	r21, 0x00	; 0
    2406:	c1 f7       	brne	.-16     	; 0x23f8 <ldexp+0x16>
    2408:	9e 3f       	cpi	r25, 0xFE	; 254
    240a:	51 05       	cpc	r21, r1
    240c:	44 f7       	brge	.-48     	; 0x23de <inverse+0xe>
    240e:	88 0f       	add	r24, r24
    2410:	91 1d       	adc	r25, r1
    2412:	96 95       	lsr	r25
    2414:	87 95       	ror	r24
    2416:	97 f9       	bld	r25, 7
    2418:	08 95       	ret
    241a:	5f 3f       	cpi	r21, 0xFF	; 255
    241c:	ac f0       	brlt	.+42     	; 0x2448 <ldexp+0x66>
    241e:	98 3e       	cpi	r25, 0xE8	; 232
    2420:	9c f0       	brlt	.+38     	; 0x2448 <ldexp+0x66>
    2422:	bb 27       	eor	r27, r27
    2424:	86 95       	lsr	r24
    2426:	77 95       	ror	r23
    2428:	67 95       	ror	r22
    242a:	b7 95       	ror	r27
    242c:	08 f4       	brcc	.+2      	; 0x2430 <ldexp+0x4e>
    242e:	b1 60       	ori	r27, 0x01	; 1
    2430:	93 95       	inc	r25
    2432:	c1 f7       	brne	.-16     	; 0x2424 <ldexp+0x42>
    2434:	bb 0f       	add	r27, r27
    2436:	58 f7       	brcc	.-42     	; 0x240e <ldexp+0x2c>
    2438:	11 f4       	brne	.+4      	; 0x243e <ldexp+0x5c>
    243a:	60 ff       	sbrs	r22, 0
    243c:	e8 cf       	rjmp	.-48     	; 0x240e <ldexp+0x2c>
    243e:	6f 5f       	subi	r22, 0xFF	; 255
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	8f 4f       	sbci	r24, 0xFF	; 255
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	e3 cf       	rjmp	.-58     	; 0x240e <ldexp+0x2c>
    2448:	bd cf       	rjmp	.-134    	; 0x23c4 <__fp_szero>
    244a:	0e f0       	brts	.+2      	; 0x244e <ldexp+0x6c>
    244c:	37 c1       	rjmp	.+622    	; 0x26bc <__fp_mpack>
    244e:	6f cf       	rjmp	.-290    	; 0x232e <__fp_nan>
    2450:	68 94       	set
    2452:	67 cf       	rjmp	.-306    	; 0x2322 <__fp_inf>

00002454 <log>:
    2454:	9c df       	rcall	.-200    	; 0x238e <__fp_splitA>
    2456:	c8 f3       	brcs	.-14     	; 0x244a <ldexp+0x68>
    2458:	99 23       	and	r25, r25
    245a:	d1 f3       	breq	.-12     	; 0x2450 <ldexp+0x6e>
    245c:	c6 f3       	brts	.-16     	; 0x244e <ldexp+0x6c>
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	1f 93       	push	r17
    2464:	0f 93       	push	r16
    2466:	ff 92       	push	r15
    2468:	c9 2f       	mov	r28, r25
    246a:	dd 27       	eor	r29, r29
    246c:	88 23       	and	r24, r24
    246e:	2a f0       	brmi	.+10     	; 0x247a <log+0x26>
    2470:	21 97       	sbiw	r28, 0x01	; 1
    2472:	66 0f       	add	r22, r22
    2474:	77 1f       	adc	r23, r23
    2476:	88 1f       	adc	r24, r24
    2478:	da f7       	brpl	.-10     	; 0x2470 <log+0x1c>
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f eb       	ldi	r21, 0xBF	; 191
    2482:	9f e3       	ldi	r25, 0x3F	; 63
    2484:	88 39       	cpi	r24, 0x98	; 152
    2486:	20 f0       	brcs	.+8      	; 0x2490 <log+0x3c>
    2488:	80 3e       	cpi	r24, 0xE0	; 224
    248a:	30 f0       	brcs	.+12     	; 0x2498 <log+0x44>
    248c:	21 96       	adiw	r28, 0x01	; 1
    248e:	8f 77       	andi	r24, 0x7F	; 127
    2490:	5d d9       	rcall	.-3398   	; 0x174c <__addsf3>
    2492:	ec e0       	ldi	r30, 0x0C	; 12
    2494:	f1 e0       	ldi	r31, 0x01	; 1
    2496:	03 c0       	rjmp	.+6      	; 0x249e <log+0x4a>
    2498:	59 d9       	rcall	.-3406   	; 0x174c <__addsf3>
    249a:	e9 e3       	ldi	r30, 0x39	; 57
    249c:	f1 e0       	ldi	r31, 0x01	; 1
    249e:	4a df       	rcall	.-364    	; 0x2334 <__fp_powser>
    24a0:	8b 01       	movw	r16, r22
    24a2:	be 01       	movw	r22, r28
    24a4:	ec 01       	movw	r28, r24
    24a6:	fb 2e       	mov	r15, r27
    24a8:	6f 57       	subi	r22, 0x7F	; 127
    24aa:	71 09       	sbc	r23, r1
    24ac:	75 95       	asr	r23
    24ae:	77 1f       	adc	r23, r23
    24b0:	88 0b       	sbc	r24, r24
    24b2:	99 0b       	sbc	r25, r25
    24b4:	4e db       	rcall	.-2404   	; 0x1b52 <__floatsisf>
    24b6:	28 e1       	ldi	r18, 0x18	; 24
    24b8:	32 e7       	ldi	r19, 0x72	; 114
    24ba:	41 e3       	ldi	r20, 0x31	; 49
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	47 d0       	rcall	.+142    	; 0x254e <__mulsf3x>
    24c0:	af 2d       	mov	r26, r15
    24c2:	98 01       	movw	r18, r16
    24c4:	ae 01       	movw	r20, r28
    24c6:	ff 90       	pop	r15
    24c8:	0f 91       	pop	r16
    24ca:	1f 91       	pop	r17
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	a2 d0       	rcall	.+324    	; 0x2616 <__addsf3x>
    24d2:	10 c1       	rjmp	.+544    	; 0x26f4 <__fp_round>

000024d4 <modf>:
    24d4:	fa 01       	movw	r30, r20
    24d6:	dc 01       	movw	r26, r24
    24d8:	aa 0f       	add	r26, r26
    24da:	bb 1f       	adc	r27, r27
    24dc:	9b 01       	movw	r18, r22
    24de:	ac 01       	movw	r20, r24
    24e0:	bf 57       	subi	r27, 0x7F	; 127
    24e2:	28 f4       	brcc	.+10     	; 0x24ee <modf+0x1a>
    24e4:	22 27       	eor	r18, r18
    24e6:	33 27       	eor	r19, r19
    24e8:	44 27       	eor	r20, r20
    24ea:	50 78       	andi	r21, 0x80	; 128
    24ec:	1f c0       	rjmp	.+62     	; 0x252c <modf+0x58>
    24ee:	b7 51       	subi	r27, 0x17	; 23
    24f0:	88 f4       	brcc	.+34     	; 0x2514 <modf+0x40>
    24f2:	ab 2f       	mov	r26, r27
    24f4:	00 24       	eor	r0, r0
    24f6:	46 95       	lsr	r20
    24f8:	37 95       	ror	r19
    24fa:	27 95       	ror	r18
    24fc:	01 1c       	adc	r0, r1
    24fe:	a3 95       	inc	r26
    2500:	d2 f3       	brmi	.-12     	; 0x24f6 <modf+0x22>
    2502:	00 20       	and	r0, r0
    2504:	69 f0       	breq	.+26     	; 0x2520 <modf+0x4c>
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	44 1f       	adc	r20, r20
    250c:	b3 95       	inc	r27
    250e:	da f3       	brmi	.-10     	; 0x2506 <modf+0x32>
    2510:	0d d0       	rcall	.+26     	; 0x252c <modf+0x58>
    2512:	eb c8       	rjmp	.-3626   	; 0x16ea <__subsf3>
    2514:	61 30       	cpi	r22, 0x01	; 1
    2516:	71 05       	cpc	r23, r1
    2518:	a0 e8       	ldi	r26, 0x80	; 128
    251a:	8a 07       	cpc	r24, r26
    251c:	b9 46       	sbci	r27, 0x69	; 105
    251e:	30 f4       	brcc	.+12     	; 0x252c <modf+0x58>
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	66 27       	eor	r22, r22
    2526:	77 27       	eor	r23, r23
    2528:	88 27       	eor	r24, r24
    252a:	90 78       	andi	r25, 0x80	; 128
    252c:	30 96       	adiw	r30, 0x00	; 0
    252e:	21 f0       	breq	.+8      	; 0x2538 <modf+0x64>
    2530:	20 83       	st	Z, r18
    2532:	31 83       	std	Z+1, r19	; 0x01
    2534:	42 83       	std	Z+2, r20	; 0x02
    2536:	53 83       	std	Z+3, r21	; 0x03
    2538:	08 95       	ret
    253a:	ce d0       	rcall	.+412    	; 0x26d8 <__fp_pscA>
    253c:	28 f0       	brcs	.+10     	; 0x2548 <modf+0x74>
    253e:	d3 d0       	rcall	.+422    	; 0x26e6 <__fp_pscB>
    2540:	18 f0       	brcs	.+6      	; 0x2548 <modf+0x74>
    2542:	95 23       	and	r25, r21
    2544:	09 f0       	breq	.+2      	; 0x2548 <modf+0x74>
    2546:	ed ce       	rjmp	.-550    	; 0x2322 <__fp_inf>
    2548:	f2 ce       	rjmp	.-540    	; 0x232e <__fp_nan>
    254a:	11 24       	eor	r1, r1
    254c:	3b cf       	rjmp	.-394    	; 0x23c4 <__fp_szero>

0000254e <__mulsf3x>:
    254e:	17 df       	rcall	.-466    	; 0x237e <__fp_split3>
    2550:	a0 f3       	brcs	.-24     	; 0x253a <modf+0x66>

00002552 <__mulsf3_pse>:
    2552:	95 9f       	mul	r25, r21
    2554:	d1 f3       	breq	.-12     	; 0x254a <modf+0x76>
    2556:	95 0f       	add	r25, r21
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	55 1f       	adc	r21, r21
    255c:	62 9f       	mul	r22, r18
    255e:	f0 01       	movw	r30, r0
    2560:	72 9f       	mul	r23, r18
    2562:	bb 27       	eor	r27, r27
    2564:	f0 0d       	add	r31, r0
    2566:	b1 1d       	adc	r27, r1
    2568:	63 9f       	mul	r22, r19
    256a:	aa 27       	eor	r26, r26
    256c:	f0 0d       	add	r31, r0
    256e:	b1 1d       	adc	r27, r1
    2570:	aa 1f       	adc	r26, r26
    2572:	64 9f       	mul	r22, r20
    2574:	66 27       	eor	r22, r22
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	66 1f       	adc	r22, r22
    257c:	82 9f       	mul	r24, r18
    257e:	22 27       	eor	r18, r18
    2580:	b0 0d       	add	r27, r0
    2582:	a1 1d       	adc	r26, r1
    2584:	62 1f       	adc	r22, r18
    2586:	73 9f       	mul	r23, r19
    2588:	b0 0d       	add	r27, r0
    258a:	a1 1d       	adc	r26, r1
    258c:	62 1f       	adc	r22, r18
    258e:	83 9f       	mul	r24, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	22 1f       	adc	r18, r18
    2596:	74 9f       	mul	r23, r20
    2598:	33 27       	eor	r19, r19
    259a:	a0 0d       	add	r26, r0
    259c:	61 1d       	adc	r22, r1
    259e:	23 1f       	adc	r18, r19
    25a0:	84 9f       	mul	r24, r20
    25a2:	60 0d       	add	r22, r0
    25a4:	21 1d       	adc	r18, r1
    25a6:	82 2f       	mov	r24, r18
    25a8:	76 2f       	mov	r23, r22
    25aa:	6a 2f       	mov	r22, r26
    25ac:	11 24       	eor	r1, r1
    25ae:	9f 57       	subi	r25, 0x7F	; 127
    25b0:	50 40       	sbci	r21, 0x00	; 0
    25b2:	8a f0       	brmi	.+34     	; 0x25d6 <__mulsf3_pse+0x84>
    25b4:	e1 f0       	breq	.+56     	; 0x25ee <__mulsf3_pse+0x9c>
    25b6:	88 23       	and	r24, r24
    25b8:	4a f0       	brmi	.+18     	; 0x25cc <__mulsf3_pse+0x7a>
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	bb 1f       	adc	r27, r27
    25c0:	66 1f       	adc	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__mulsf3_pse+0x64>
    25cc:	9e 3f       	cpi	r25, 0xFE	; 254
    25ce:	51 05       	cpc	r21, r1
    25d0:	70 f0       	brcs	.+28     	; 0x25ee <__mulsf3_pse+0x9c>
    25d2:	a7 ce       	rjmp	.-690    	; 0x2322 <__fp_inf>
    25d4:	f7 ce       	rjmp	.-530    	; 0x23c4 <__fp_szero>
    25d6:	5f 3f       	cpi	r21, 0xFF	; 255
    25d8:	ec f3       	brlt	.-6      	; 0x25d4 <__mulsf3_pse+0x82>
    25da:	98 3e       	cpi	r25, 0xE8	; 232
    25dc:	dc f3       	brlt	.-10     	; 0x25d4 <__mulsf3_pse+0x82>
    25de:	86 95       	lsr	r24
    25e0:	77 95       	ror	r23
    25e2:	67 95       	ror	r22
    25e4:	b7 95       	ror	r27
    25e6:	f7 95       	ror	r31
    25e8:	e7 95       	ror	r30
    25ea:	9f 5f       	subi	r25, 0xFF	; 255
    25ec:	c1 f7       	brne	.-16     	; 0x25de <__mulsf3_pse+0x8c>
    25ee:	fe 2b       	or	r31, r30
    25f0:	88 0f       	add	r24, r24
    25f2:	91 1d       	adc	r25, r1
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	97 f9       	bld	r25, 7
    25fa:	08 95       	ret
    25fc:	6d d0       	rcall	.+218    	; 0x26d8 <__fp_pscA>
    25fe:	30 f0       	brcs	.+12     	; 0x260c <__mulsf3_pse+0xba>
    2600:	72 d0       	rcall	.+228    	; 0x26e6 <__fp_pscB>
    2602:	20 f0       	brcs	.+8      	; 0x260c <__mulsf3_pse+0xba>
    2604:	31 f4       	brne	.+12     	; 0x2612 <__mulsf3_pse+0xc0>
    2606:	9f 3f       	cpi	r25, 0xFF	; 255
    2608:	11 f4       	brne	.+4      	; 0x260e <__mulsf3_pse+0xbc>
    260a:	1e f4       	brtc	.+6      	; 0x2612 <__mulsf3_pse+0xc0>
    260c:	90 ce       	rjmp	.-736    	; 0x232e <__fp_nan>
    260e:	0e f4       	brtc	.+2      	; 0x2612 <__mulsf3_pse+0xc0>
    2610:	e0 95       	com	r30
    2612:	e7 fb       	bst	r30, 7
    2614:	86 ce       	rjmp	.-756    	; 0x2322 <__fp_inf>

00002616 <__addsf3x>:
    2616:	e9 2f       	mov	r30, r25
    2618:	b2 de       	rcall	.-668    	; 0x237e <__fp_split3>
    261a:	80 f3       	brcs	.-32     	; 0x25fc <__mulsf3_pse+0xaa>
    261c:	ba 17       	cp	r27, r26
    261e:	62 07       	cpc	r22, r18
    2620:	73 07       	cpc	r23, r19
    2622:	84 07       	cpc	r24, r20
    2624:	95 07       	cpc	r25, r21
    2626:	18 f0       	brcs	.+6      	; 0x262e <__addsf3x+0x18>
    2628:	71 f4       	brne	.+28     	; 0x2646 <__addsf3x+0x30>
    262a:	9e f5       	brtc	.+102    	; 0x2692 <__addsf3x+0x7c>
    262c:	ca ce       	rjmp	.-620    	; 0x23c2 <__fp_zero>
    262e:	0e f4       	brtc	.+2      	; 0x2632 <__addsf3x+0x1c>
    2630:	e0 95       	com	r30
    2632:	0b 2e       	mov	r0, r27
    2634:	ba 2f       	mov	r27, r26
    2636:	a0 2d       	mov	r26, r0
    2638:	0b 01       	movw	r0, r22
    263a:	b9 01       	movw	r22, r18
    263c:	90 01       	movw	r18, r0
    263e:	0c 01       	movw	r0, r24
    2640:	ca 01       	movw	r24, r20
    2642:	a0 01       	movw	r20, r0
    2644:	11 24       	eor	r1, r1
    2646:	ff 27       	eor	r31, r31
    2648:	59 1b       	sub	r21, r25
    264a:	99 f0       	breq	.+38     	; 0x2672 <__addsf3x+0x5c>
    264c:	59 3f       	cpi	r21, 0xF9	; 249
    264e:	50 f4       	brcc	.+20     	; 0x2664 <__addsf3x+0x4e>
    2650:	50 3e       	cpi	r21, 0xE0	; 224
    2652:	68 f1       	brcs	.+90     	; 0x26ae <__addsf3x+0x98>
    2654:	1a 16       	cp	r1, r26
    2656:	f0 40       	sbci	r31, 0x00	; 0
    2658:	a2 2f       	mov	r26, r18
    265a:	23 2f       	mov	r18, r19
    265c:	34 2f       	mov	r19, r20
    265e:	44 27       	eor	r20, r20
    2660:	58 5f       	subi	r21, 0xF8	; 248
    2662:	f3 cf       	rjmp	.-26     	; 0x264a <__addsf3x+0x34>
    2664:	46 95       	lsr	r20
    2666:	37 95       	ror	r19
    2668:	27 95       	ror	r18
    266a:	a7 95       	ror	r26
    266c:	f0 40       	sbci	r31, 0x00	; 0
    266e:	53 95       	inc	r21
    2670:	c9 f7       	brne	.-14     	; 0x2664 <__addsf3x+0x4e>
    2672:	7e f4       	brtc	.+30     	; 0x2692 <__addsf3x+0x7c>
    2674:	1f 16       	cp	r1, r31
    2676:	ba 0b       	sbc	r27, r26
    2678:	62 0b       	sbc	r22, r18
    267a:	73 0b       	sbc	r23, r19
    267c:	84 0b       	sbc	r24, r20
    267e:	ba f0       	brmi	.+46     	; 0x26ae <__addsf3x+0x98>
    2680:	91 50       	subi	r25, 0x01	; 1
    2682:	a1 f0       	breq	.+40     	; 0x26ac <__addsf3x+0x96>
    2684:	ff 0f       	add	r31, r31
    2686:	bb 1f       	adc	r27, r27
    2688:	66 1f       	adc	r22, r22
    268a:	77 1f       	adc	r23, r23
    268c:	88 1f       	adc	r24, r24
    268e:	c2 f7       	brpl	.-16     	; 0x2680 <__addsf3x+0x6a>
    2690:	0e c0       	rjmp	.+28     	; 0x26ae <__addsf3x+0x98>
    2692:	ba 0f       	add	r27, r26
    2694:	62 1f       	adc	r22, r18
    2696:	73 1f       	adc	r23, r19
    2698:	84 1f       	adc	r24, r20
    269a:	48 f4       	brcc	.+18     	; 0x26ae <__addsf3x+0x98>
    269c:	87 95       	ror	r24
    269e:	77 95       	ror	r23
    26a0:	67 95       	ror	r22
    26a2:	b7 95       	ror	r27
    26a4:	f7 95       	ror	r31
    26a6:	9e 3f       	cpi	r25, 0xFE	; 254
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <__addsf3x+0x96>
    26aa:	b3 cf       	rjmp	.-154    	; 0x2612 <__mulsf3_pse+0xc0>
    26ac:	93 95       	inc	r25
    26ae:	88 0f       	add	r24, r24
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <__addsf3x+0x9e>
    26b2:	99 27       	eor	r25, r25
    26b4:	ee 0f       	add	r30, r30
    26b6:	97 95       	ror	r25
    26b8:	87 95       	ror	r24
    26ba:	08 95       	ret

000026bc <__fp_mpack>:
    26bc:	9f 3f       	cpi	r25, 0xFF	; 255
    26be:	31 f0       	breq	.+12     	; 0x26cc <__fp_mpack_finite+0xc>

000026c0 <__fp_mpack_finite>:
    26c0:	91 50       	subi	r25, 0x01	; 1
    26c2:	20 f4       	brcc	.+8      	; 0x26cc <__fp_mpack_finite+0xc>
    26c4:	87 95       	ror	r24
    26c6:	77 95       	ror	r23
    26c8:	67 95       	ror	r22
    26ca:	b7 95       	ror	r27
    26cc:	88 0f       	add	r24, r24
    26ce:	91 1d       	adc	r25, r1
    26d0:	96 95       	lsr	r25
    26d2:	87 95       	ror	r24
    26d4:	97 f9       	bld	r25, 7
    26d6:	08 95       	ret

000026d8 <__fp_pscA>:
    26d8:	00 24       	eor	r0, r0
    26da:	0a 94       	dec	r0
    26dc:	16 16       	cp	r1, r22
    26de:	17 06       	cpc	r1, r23
    26e0:	18 06       	cpc	r1, r24
    26e2:	09 06       	cpc	r0, r25
    26e4:	08 95       	ret

000026e6 <__fp_pscB>:
    26e6:	00 24       	eor	r0, r0
    26e8:	0a 94       	dec	r0
    26ea:	12 16       	cp	r1, r18
    26ec:	13 06       	cpc	r1, r19
    26ee:	14 06       	cpc	r1, r20
    26f0:	05 06       	cpc	r0, r21
    26f2:	08 95       	ret

000026f4 <__fp_round>:
    26f4:	09 2e       	mov	r0, r25
    26f6:	03 94       	inc	r0
    26f8:	00 0c       	add	r0, r0
    26fa:	11 f4       	brne	.+4      	; 0x2700 <__fp_round+0xc>
    26fc:	88 23       	and	r24, r24
    26fe:	52 f0       	brmi	.+20     	; 0x2714 <__fp_round+0x20>
    2700:	bb 0f       	add	r27, r27
    2702:	40 f4       	brcc	.+16     	; 0x2714 <__fp_round+0x20>
    2704:	bf 2b       	or	r27, r31
    2706:	11 f4       	brne	.+4      	; 0x270c <__fp_round+0x18>
    2708:	60 ff       	sbrs	r22, 0
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <__fp_round+0x20>
    270c:	6f 5f       	subi	r22, 0xFF	; 255
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	08 95       	ret

00002716 <_exit>:
    2716:	f8 94       	cli

00002718 <__stop_program>:
    2718:	ff cf       	rjmp	.-2      	; 0x2718 <__stop_program>
